/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ComponentSetNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentSetNode{}

// ComponentSetNode struct for ComponentSetNode
type ComponentSetNode struct {
	// A string uniquely identifying this node within the document.
	Id string `json:"id"`
	// The name given to the node by the user in the tool.
	Name string `json:"name"`
	// The type of this node, represented by the string literal \"COMPONENT_SET\"
	Type string `json:"type"`
	// Whether or not the node is visible on the canvas.
	Visible *bool `json:"visible,omitempty"`
	// If true, layer is locked and cannot be edited
	Locked *bool `json:"locked,omitempty"`
	// Whether the layer is fixed while the parent is scrolling
	// Deprecated
	IsFixed *bool `json:"isFixed,omitempty"`
	// How layer should be treated when the frame is resized
	ScrollBehavior string `json:"scrollBehavior"`
	// The rotation of the node, if not 0.
	Rotation *float32 `json:"rotation,omitempty"`
	// A mapping of a layer's property to component property name of component properties attached to this node. The component property name can be used to look up more information on the corresponding component's or component set's componentPropertyDefinitions.
	ComponentPropertyReferences map[string]string `json:"componentPropertyReferences,omitempty"`
	PluginData interface{} `json:"pluginData,omitempty"`
	SharedPluginData interface{} `json:"sharedPluginData,omitempty"`
	BoundVariables *IsLayerTraitBoundVariables `json:"boundVariables,omitempty"`
	// A mapping of variable collection ID to mode ID representing the explicitly set modes for this node.
	ExplicitVariableModes map[string]string `json:"explicitVariableModes,omitempty"`
	// How this node blends with nodes behind it in the scene (see blend mode section for more details)
	BlendMode BlendMode `json:"blendMode"`
	// Opacity of the node
	Opacity *float32 `json:"opacity,omitempty"`
	// An array of nodes that are direct children of this node
	Children []SubcanvasNode `json:"children"`
	AbsoluteBoundingBox Rectangle `json:"absoluteBoundingBox"`
	AbsoluteRenderBounds Rectangle `json:"absoluteRenderBounds"`
	// Keep height and width constrained to same ratio.
	PreserveRatio *bool `json:"preserveRatio,omitempty"`
	// Horizontal and vertical layout constraints for node.
	Constraints *LayoutConstraint `json:"constraints,omitempty"`
	// A transformation matrix is standard way in computer graphics to represent translation and rotation. These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1]. This is known as an affine transform and is enough to represent translation, rotation, and skew.  The identity transform is [[1, 0, 0], [0, 1, 0]].  A translation matrix will typically look like:  ``` [[1, 0, tx],   [0, 1, ty]] ```  and a rotation matrix will typically look like:  ``` [[cos(angle), sin(angle), 0],   [-sin(angle), cos(angle), 0]] ```  Another way to think about this transform is as three vectors:  - The x axis (t[0][0], t[1][0]) - The y axis (t[0][1], t[1][1]) - The translation offset (t[0][2], t[1][2])  The most common usage of the Transform matrix is the `relativeTransform property`. This particular usage of the matrix has a few additional restrictions. The translation offset can take on any value but we do enforce that the axis vectors are unit vectors (i.e. have length 1). The axes are not required to be at 90Â° angles to each other.
	RelativeTransform [][]float32 `json:"relativeTransform,omitempty"`
	// Width and height of element. This is different from the width and height of the bounding box in that the absolute bounding box represents the element after scaling and rotation. Only present if `geometry=paths` is passed.
	Size *Vector `json:"size,omitempty"`
	//  Determines if the layer should stretch along the parent's counter axis. This property is only provided for direct children of auto-layout frames.  - `INHERIT` - `STRETCH`  In previous versions of auto layout, determined how the layer is aligned inside an auto-layout frame. This property is only provided for direct children of auto-layout frames.  - `MIN` - `CENTER` - `MAX` - `STRETCH`  In horizontal auto-layout frames, \"MIN\" and \"MAX\" correspond to \"TOP\" and \"BOTTOM\". In vertical auto-layout frames, \"MIN\" and \"MAX\" correspond to \"LEFT\" and \"RIGHT\".
	LayoutAlign *string `json:"layoutAlign,omitempty"`
	// This property is applicable only for direct children of auto-layout frames, ignored otherwise. Determines whether a layer should stretch along the parent's primary axis. A `0` corresponds to a fixed size and `1` corresponds to stretch.
	LayoutGrow *float32 `json:"layoutGrow,omitempty"`
	// Determines whether a layer's size and position should be determined by auto-layout settings or manually adjustable.
	LayoutPositioning *string `json:"layoutPositioning,omitempty"`
	// The minimum width of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
	MinWidth *float32 `json:"minWidth,omitempty"`
	// The maximum width of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
	MaxWidth *float32 `json:"maxWidth,omitempty"`
	// The minimum height of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
	MinHeight *float32 `json:"minHeight,omitempty"`
	// The maximum height of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
	MaxHeight *float32 `json:"maxHeight,omitempty"`
	// The horizontal sizing setting on this auto-layout frame or frame child. - `FIXED` - `HUG`: only valid on auto-layout frames and text nodes - `FILL`: only valid on auto-layout frame children
	LayoutSizingHorizontal *string `json:"layoutSizingHorizontal,omitempty"`
	// The vertical sizing setting on this auto-layout frame or frame child. - `FIXED` - `HUG`: only valid on auto-layout frames and text nodes - `FILL`: only valid on auto-layout frame children
	LayoutSizingVertical *string `json:"layoutSizingVertical,omitempty"`
	// Whether or not this node clip content outside of its bounds
	ClipsContent bool `json:"clipsContent"`
	// Background of the node. This is deprecated, as backgrounds for frames are now in the `fills` field.
	Background []Paint `json:"background,omitempty"`
	// Background color of the node. This is deprecated, as frames now support more than a solid color as a background. Please use the `fills` field instead.
	// Deprecated
	BackgroundColor *RGBA `json:"backgroundColor,omitempty"`
	// An array of layout grids attached to this node (see layout grids section for more details). GROUP nodes do not have this attribute
	LayoutGrids []LayoutGrid `json:"layoutGrids,omitempty"`
	// Whether a node has primary axis scrolling, horizontal or vertical.
	OverflowDirection *string `json:"overflowDirection,omitempty"`
	// Whether this layer uses auto-layout to position its children.
	LayoutMode *string `json:"layoutMode,omitempty"`
	// Whether the primary axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine). This property is only applicable for auto-layout frames.
	PrimaryAxisSizingMode *string `json:"primaryAxisSizingMode,omitempty"`
	// Whether the counter axis has a fixed length (determined by the user) or an automatic length (determined by the layout engine). This property is only applicable for auto-layout frames.
	CounterAxisSizingMode *string `json:"counterAxisSizingMode,omitempty"`
	// Determines how the auto-layout frame's children should be aligned in the primary axis direction. This property is only applicable for auto-layout frames.
	PrimaryAxisAlignItems *string `json:"primaryAxisAlignItems,omitempty"`
	// Determines how the auto-layout frame's children should be aligned in the counter axis direction. This property is only applicable for auto-layout frames.
	CounterAxisAlignItems *string `json:"counterAxisAlignItems,omitempty"`
	// The padding between the left border of the frame and its children. This property is only applicable for auto-layout frames.
	PaddingLeft *float32 `json:"paddingLeft,omitempty"`
	// The padding between the right border of the frame and its children. This property is only applicable for auto-layout frames.
	PaddingRight *float32 `json:"paddingRight,omitempty"`
	// The padding between the top border of the frame and its children. This property is only applicable for auto-layout frames.
	PaddingTop *float32 `json:"paddingTop,omitempty"`
	// The padding between the bottom border of the frame and its children. This property is only applicable for auto-layout frames.
	PaddingBottom *float32 `json:"paddingBottom,omitempty"`
	// The distance between children of the frame. Can be negative. This property is only applicable for auto-layout frames.
	ItemSpacing *float32 `json:"itemSpacing,omitempty"`
	// Determines the canvas stacking order of layers in this frame. When true, the first layer will be draw on top. This property is only applicable for auto-layout frames.
	ItemReverseZIndex *bool `json:"itemReverseZIndex,omitempty"`
	// Determines whether strokes are included in layout calculations. When true, auto-layout frames behave like css \"box-sizing: border-box\". This property is only applicable for auto-layout frames.
	StrokesIncludedInLayout *bool `json:"strokesIncludedInLayout,omitempty"`
	// Whether this auto-layout frame has wrapping enabled.
	LayoutWrap *string `json:"layoutWrap,omitempty"`
	// The distance between wrapped tracks of an auto-layout frame. This property is only applicable for auto-layout frames with `layoutWrap: \"WRAP\"`
	CounterAxisSpacing *float32 `json:"counterAxisSpacing,omitempty"`
	// Determines how the auto-layout frameâs wrapped tracks should be aligned in the counter axis direction. This property is only applicable for auto-layout frames with `layoutWrap: \"WRAP\"`.
	CounterAxisAlignContent *string `json:"counterAxisAlignContent,omitempty"`
	// Radius of each corner if a single radius is set for all corners
	CornerRadius *float32 `json:"cornerRadius,omitempty"`
	// A value that lets you control how \"smooth\" the corners are. Ranges from 0 to 1. 0 is the default and means that the corner is perfectly circular. A value of 0.6 means the corner matches the iOS 7 \"squircle\" icon shape. Other values produce various other curves.
	CornerSmoothing *float32 `json:"cornerSmoothing,omitempty"`
	// Array of length 4 of the radius of each corner of the frame, starting in the top left and proceeding clockwise.  Values are given in the order top-left, top-right, bottom-right, bottom-left.
	RectangleCornerRadii []float32 `json:"rectangleCornerRadii,omitempty"`
	// An array of fill paints applied to the node.
	Fills []Paint `json:"fills"`
	// A mapping of a StyleType to style ID (see Style) of styles present on this node. The style ID can be used to look up more information about the style in the top-level styles field.
	Styles map[string]string `json:"styles,omitempty"`
	// An array of stroke paints applied to the node.
	Strokes []Paint `json:"strokes,omitempty"`
	// The weight of strokes on the node.
	StrokeWeight *float32 `json:"strokeWeight,omitempty"`
	// Position of stroke relative to vector outline, as a string enum  - `INSIDE`: stroke drawn inside the shape boundary - `OUTSIDE`: stroke drawn outside the shape boundary - `CENTER`: stroke drawn centered along the shape boundary
	StrokeAlign *string `json:"strokeAlign,omitempty"`
	// A string enum with value of \"MITER\", \"BEVEL\", or \"ROUND\", describing how corners in vector paths are rendered.
	StrokeJoin *string `json:"strokeJoin,omitempty"`
	// An array of floating point numbers describing the pattern of dash length and gap lengths that the vector stroke will use when drawn.  For example a value of [1, 2] indicates that the stroke will be drawn with a dash of length 1 followed by a gap of length 2, repeated.
	StrokeDashes []float32 `json:"strokeDashes,omitempty"`
	// Map from ID to PaintOverride for looking up fill overrides. To see which regions are overriden, you must use the `geometry=paths` option. Each path returned may have an `overrideID` which maps to this table.
	FillOverrideTable map[string]HasGeometryTraitAllOfFillOverrideTable `json:"fillOverrideTable,omitempty"`
	// Only specified if parameter `geometry=paths` is used. An array of paths representing the object fill.
	FillGeometry []Path `json:"fillGeometry,omitempty"`
	// Only specified if parameter `geometry=paths` is used. An array of paths representing the object stroke.
	StrokeGeometry []Path `json:"strokeGeometry,omitempty"`
	// A string enum describing the end caps of vector paths.
	StrokeCap *string `json:"strokeCap,omitempty"`
	// Only valid if `strokeJoin` is \"MITER\". The corner angle, in degrees, below which `strokeJoin` will be set to \"BEVEL\" to avoid super sharp corners. By default this is 28.96 degrees.
	StrokeMiterAngle *float32 `json:"strokeMiterAngle,omitempty"`
	// An array of export settings representing images to export from the node.
	ExportSettings []ExportSetting `json:"exportSettings,omitempty"`
	// An array of effects attached to this node (see effects section for more details)
	Effects []Effect `json:"effects"`
	// Does this node mask sibling nodes in front of it?
	IsMask *bool `json:"isMask,omitempty"`
	// If this layer is a mask, this property describes the operation used to mask the layer's siblings. The value may be one of the following:  - ALPHA: the mask node's alpha channel will be used to determine the opacity of each pixel in the masked result. - VECTOR: if the mask node has visible fill paints, every pixel inside the node's fill regions will be fully visible in the masked result. If the mask has visible stroke paints, every pixel inside the node's stroke regions will be fully visible in the masked result. - LUMINANCE: the luminance value of each pixel of the mask node will be used to determine the opacity of that pixel in the masked result.
	MaskType *string `json:"maskType,omitempty"`
	// True if maskType is VECTOR. This field is deprecated; use maskType instead.
	// Deprecated
	IsMaskOutline *bool `json:"isMaskOutline,omitempty"`
	// Node ID of node to transition to in prototyping
	TransitionNodeID *string `json:"transitionNodeID,omitempty"`
	// The duration of the prototyping transition on this node (in milliseconds). This will override the default transition duration on the prototype, for this node.
	TransitionDuration *float32 `json:"transitionDuration,omitempty"`
	// The easing curve used in the prototyping transition on this node.
	TransitionEasing *EasingType `json:"transitionEasing,omitempty"`
	Interactions []Interaction `json:"interactions,omitempty"`
	// An object including the top, bottom, left, and right stroke weights. Only returned if individual stroke weights are used.
	IndividualStrokeWeights *StrokeWeights `json:"individualStrokeWeights,omitempty"`
	DevStatus *DevStatusTraitDevStatus `json:"devStatus,omitempty"`
	// A mapping of name to `ComponentPropertyDefinition` for every component property on this component. Each property has a type, defaultValue, and other optional values.
	ComponentPropertyDefinitions map[string]ComponentPropertyDefinition `json:"componentPropertyDefinitions,omitempty"`
}

type _ComponentSetNode ComponentSetNode

// NewComponentSetNode instantiates a new ComponentSetNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentSetNode(id string, name string, type_ string, scrollBehavior string, blendMode BlendMode, children []SubcanvasNode, absoluteBoundingBox Rectangle, absoluteRenderBounds Rectangle, clipsContent bool, fills []Paint, effects []Effect) *ComponentSetNode {
	this := ComponentSetNode{}
	this.Id = id
	this.Name = name
	this.Type = type_
	var visible bool = true
	this.Visible = &visible
	var locked bool = false
	this.Locked = &locked
	var isFixed bool = false
	this.IsFixed = &isFixed
	this.ScrollBehavior = scrollBehavior
	var rotation float32 = 0
	this.Rotation = &rotation
	this.BlendMode = blendMode
	var opacity float32 = 1
	this.Opacity = &opacity
	this.Children = children
	this.AbsoluteBoundingBox = absoluteBoundingBox
	this.AbsoluteRenderBounds = absoluteRenderBounds
	var preserveRatio bool = false
	this.PreserveRatio = &preserveRatio
	var layoutGrow float32 = 0
	this.LayoutGrow = &layoutGrow
	var layoutPositioning string = "AUTO"
	this.LayoutPositioning = &layoutPositioning
	var minWidth float32 = 0
	this.MinWidth = &minWidth
	var maxWidth float32 = 0
	this.MaxWidth = &maxWidth
	var minHeight float32 = 0
	this.MinHeight = &minHeight
	var maxHeight float32 = 0
	this.MaxHeight = &maxHeight
	this.ClipsContent = clipsContent
	var overflowDirection string = "NONE"
	this.OverflowDirection = &overflowDirection
	var layoutMode string = "NONE"
	this.LayoutMode = &layoutMode
	var primaryAxisSizingMode string = "AUTO"
	this.PrimaryAxisSizingMode = &primaryAxisSizingMode
	var counterAxisSizingMode string = "AUTO"
	this.CounterAxisSizingMode = &counterAxisSizingMode
	var primaryAxisAlignItems string = "MIN"
	this.PrimaryAxisAlignItems = &primaryAxisAlignItems
	var counterAxisAlignItems string = "MIN"
	this.CounterAxisAlignItems = &counterAxisAlignItems
	var paddingLeft float32 = 0
	this.PaddingLeft = &paddingLeft
	var paddingRight float32 = 0
	this.PaddingRight = &paddingRight
	var paddingTop float32 = 0
	this.PaddingTop = &paddingTop
	var paddingBottom float32 = 0
	this.PaddingBottom = &paddingBottom
	var itemSpacing float32 = 0
	this.ItemSpacing = &itemSpacing
	var itemReverseZIndex bool = false
	this.ItemReverseZIndex = &itemReverseZIndex
	var strokesIncludedInLayout bool = false
	this.StrokesIncludedInLayout = &strokesIncludedInLayout
	var counterAxisAlignContent string = "AUTO"
	this.CounterAxisAlignContent = &counterAxisAlignContent
	var cornerRadius float32 = 0
	this.CornerRadius = &cornerRadius
	this.Fills = fills
	var strokeWeight float32 = 1
	this.StrokeWeight = &strokeWeight
	var strokeJoin string = "MITER"
	this.StrokeJoin = &strokeJoin
	var strokeCap string = "NONE"
	this.StrokeCap = &strokeCap
	var strokeMiterAngle float32 = 28.96
	this.StrokeMiterAngle = &strokeMiterAngle
	this.Effects = effects
	var isMask bool = false
	this.IsMask = &isMask
	var isMaskOutline bool = false
	this.IsMaskOutline = &isMaskOutline
	return &this
}

// NewComponentSetNodeWithDefaults instantiates a new ComponentSetNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentSetNodeWithDefaults() *ComponentSetNode {
	this := ComponentSetNode{}
	var visible bool = true
	this.Visible = &visible
	var locked bool = false
	this.Locked = &locked
	var isFixed bool = false
	this.IsFixed = &isFixed
	var scrollBehavior string = "SCROLLS"
	this.ScrollBehavior = scrollBehavior
	var rotation float32 = 0
	this.Rotation = &rotation
	var opacity float32 = 1
	this.Opacity = &opacity
	var preserveRatio bool = false
	this.PreserveRatio = &preserveRatio
	var layoutGrow float32 = 0
	this.LayoutGrow = &layoutGrow
	var layoutPositioning string = "AUTO"
	this.LayoutPositioning = &layoutPositioning
	var minWidth float32 = 0
	this.MinWidth = &minWidth
	var maxWidth float32 = 0
	this.MaxWidth = &maxWidth
	var minHeight float32 = 0
	this.MinHeight = &minHeight
	var maxHeight float32 = 0
	this.MaxHeight = &maxHeight
	var overflowDirection string = "NONE"
	this.OverflowDirection = &overflowDirection
	var layoutMode string = "NONE"
	this.LayoutMode = &layoutMode
	var primaryAxisSizingMode string = "AUTO"
	this.PrimaryAxisSizingMode = &primaryAxisSizingMode
	var counterAxisSizingMode string = "AUTO"
	this.CounterAxisSizingMode = &counterAxisSizingMode
	var primaryAxisAlignItems string = "MIN"
	this.PrimaryAxisAlignItems = &primaryAxisAlignItems
	var counterAxisAlignItems string = "MIN"
	this.CounterAxisAlignItems = &counterAxisAlignItems
	var paddingLeft float32 = 0
	this.PaddingLeft = &paddingLeft
	var paddingRight float32 = 0
	this.PaddingRight = &paddingRight
	var paddingTop float32 = 0
	this.PaddingTop = &paddingTop
	var paddingBottom float32 = 0
	this.PaddingBottom = &paddingBottom
	var itemSpacing float32 = 0
	this.ItemSpacing = &itemSpacing
	var itemReverseZIndex bool = false
	this.ItemReverseZIndex = &itemReverseZIndex
	var strokesIncludedInLayout bool = false
	this.StrokesIncludedInLayout = &strokesIncludedInLayout
	var counterAxisAlignContent string = "AUTO"
	this.CounterAxisAlignContent = &counterAxisAlignContent
	var cornerRadius float32 = 0
	this.CornerRadius = &cornerRadius
	var strokeWeight float32 = 1
	this.StrokeWeight = &strokeWeight
	var strokeJoin string = "MITER"
	this.StrokeJoin = &strokeJoin
	var strokeCap string = "NONE"
	this.StrokeCap = &strokeCap
	var strokeMiterAngle float32 = 28.96
	this.StrokeMiterAngle = &strokeMiterAngle
	var isMask bool = false
	this.IsMask = &isMask
	var isMaskOutline bool = false
	this.IsMaskOutline = &isMaskOutline
	return &this
}

// GetId returns the Id field value
func (o *ComponentSetNode) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ComponentSetNode) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ComponentSetNode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ComponentSetNode) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ComponentSetNode) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ComponentSetNode) SetType(v string) {
	o.Type = v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *ComponentSetNode) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *ComponentSetNode) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *ComponentSetNode) SetVisible(v bool) {
	o.Visible = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *ComponentSetNode) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *ComponentSetNode) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *ComponentSetNode) SetLocked(v bool) {
	o.Locked = &v
}

// GetIsFixed returns the IsFixed field value if set, zero value otherwise.
// Deprecated
func (o *ComponentSetNode) GetIsFixed() bool {
	if o == nil || IsNil(o.IsFixed) {
		var ret bool
		return ret
	}
	return *o.IsFixed
}

// GetIsFixedOk returns a tuple with the IsFixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ComponentSetNode) GetIsFixedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFixed) {
		return nil, false
	}
	return o.IsFixed, true
}

// HasIsFixed returns a boolean if a field has been set.
func (o *ComponentSetNode) HasIsFixed() bool {
	if o != nil && !IsNil(o.IsFixed) {
		return true
	}

	return false
}

// SetIsFixed gets a reference to the given bool and assigns it to the IsFixed field.
// Deprecated
func (o *ComponentSetNode) SetIsFixed(v bool) {
	o.IsFixed = &v
}

// GetScrollBehavior returns the ScrollBehavior field value
func (o *ComponentSetNode) GetScrollBehavior() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScrollBehavior
}

// GetScrollBehaviorOk returns a tuple with the ScrollBehavior field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetScrollBehaviorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScrollBehavior, true
}

// SetScrollBehavior sets field value
func (o *ComponentSetNode) SetScrollBehavior(v string) {
	o.ScrollBehavior = v
}

// GetRotation returns the Rotation field value if set, zero value otherwise.
func (o *ComponentSetNode) GetRotation() float32 {
	if o == nil || IsNil(o.Rotation) {
		var ret float32
		return ret
	}
	return *o.Rotation
}

// GetRotationOk returns a tuple with the Rotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetRotationOk() (*float32, bool) {
	if o == nil || IsNil(o.Rotation) {
		return nil, false
	}
	return o.Rotation, true
}

// HasRotation returns a boolean if a field has been set.
func (o *ComponentSetNode) HasRotation() bool {
	if o != nil && !IsNil(o.Rotation) {
		return true
	}

	return false
}

// SetRotation gets a reference to the given float32 and assigns it to the Rotation field.
func (o *ComponentSetNode) SetRotation(v float32) {
	o.Rotation = &v
}

// GetComponentPropertyReferences returns the ComponentPropertyReferences field value if set, zero value otherwise.
func (o *ComponentSetNode) GetComponentPropertyReferences() map[string]string {
	if o == nil || IsNil(o.ComponentPropertyReferences) {
		var ret map[string]string
		return ret
	}
	return o.ComponentPropertyReferences
}

// GetComponentPropertyReferencesOk returns a tuple with the ComponentPropertyReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetComponentPropertyReferencesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.ComponentPropertyReferences) {
		return map[string]string{}, false
	}
	return o.ComponentPropertyReferences, true
}

// HasComponentPropertyReferences returns a boolean if a field has been set.
func (o *ComponentSetNode) HasComponentPropertyReferences() bool {
	if o != nil && !IsNil(o.ComponentPropertyReferences) {
		return true
	}

	return false
}

// SetComponentPropertyReferences gets a reference to the given map[string]string and assigns it to the ComponentPropertyReferences field.
func (o *ComponentSetNode) SetComponentPropertyReferences(v map[string]string) {
	o.ComponentPropertyReferences = v
}

// GetPluginData returns the PluginData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentSetNode) GetPluginData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PluginData
}

// GetPluginDataOk returns a tuple with the PluginData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentSetNode) GetPluginDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.PluginData) {
		return nil, false
	}
	return &o.PluginData, true
}

// HasPluginData returns a boolean if a field has been set.
func (o *ComponentSetNode) HasPluginData() bool {
	if o != nil && !IsNil(o.PluginData) {
		return true
	}

	return false
}

// SetPluginData gets a reference to the given interface{} and assigns it to the PluginData field.
func (o *ComponentSetNode) SetPluginData(v interface{}) {
	o.PluginData = v
}

// GetSharedPluginData returns the SharedPluginData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentSetNode) GetSharedPluginData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SharedPluginData
}

// GetSharedPluginDataOk returns a tuple with the SharedPluginData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentSetNode) GetSharedPluginDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SharedPluginData) {
		return nil, false
	}
	return &o.SharedPluginData, true
}

// HasSharedPluginData returns a boolean if a field has been set.
func (o *ComponentSetNode) HasSharedPluginData() bool {
	if o != nil && !IsNil(o.SharedPluginData) {
		return true
	}

	return false
}

// SetSharedPluginData gets a reference to the given interface{} and assigns it to the SharedPluginData field.
func (o *ComponentSetNode) SetSharedPluginData(v interface{}) {
	o.SharedPluginData = v
}

// GetBoundVariables returns the BoundVariables field value if set, zero value otherwise.
func (o *ComponentSetNode) GetBoundVariables() IsLayerTraitBoundVariables {
	if o == nil || IsNil(o.BoundVariables) {
		var ret IsLayerTraitBoundVariables
		return ret
	}
	return *o.BoundVariables
}

// GetBoundVariablesOk returns a tuple with the BoundVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetBoundVariablesOk() (*IsLayerTraitBoundVariables, bool) {
	if o == nil || IsNil(o.BoundVariables) {
		return nil, false
	}
	return o.BoundVariables, true
}

// HasBoundVariables returns a boolean if a field has been set.
func (o *ComponentSetNode) HasBoundVariables() bool {
	if o != nil && !IsNil(o.BoundVariables) {
		return true
	}

	return false
}

// SetBoundVariables gets a reference to the given IsLayerTraitBoundVariables and assigns it to the BoundVariables field.
func (o *ComponentSetNode) SetBoundVariables(v IsLayerTraitBoundVariables) {
	o.BoundVariables = &v
}

// GetExplicitVariableModes returns the ExplicitVariableModes field value if set, zero value otherwise.
func (o *ComponentSetNode) GetExplicitVariableModes() map[string]string {
	if o == nil || IsNil(o.ExplicitVariableModes) {
		var ret map[string]string
		return ret
	}
	return o.ExplicitVariableModes
}

// GetExplicitVariableModesOk returns a tuple with the ExplicitVariableModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetExplicitVariableModesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.ExplicitVariableModes) {
		return map[string]string{}, false
	}
	return o.ExplicitVariableModes, true
}

// HasExplicitVariableModes returns a boolean if a field has been set.
func (o *ComponentSetNode) HasExplicitVariableModes() bool {
	if o != nil && !IsNil(o.ExplicitVariableModes) {
		return true
	}

	return false
}

// SetExplicitVariableModes gets a reference to the given map[string]string and assigns it to the ExplicitVariableModes field.
func (o *ComponentSetNode) SetExplicitVariableModes(v map[string]string) {
	o.ExplicitVariableModes = v
}

// GetBlendMode returns the BlendMode field value
func (o *ComponentSetNode) GetBlendMode() BlendMode {
	if o == nil {
		var ret BlendMode
		return ret
	}

	return o.BlendMode
}

// GetBlendModeOk returns a tuple with the BlendMode field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetBlendModeOk() (*BlendMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlendMode, true
}

// SetBlendMode sets field value
func (o *ComponentSetNode) SetBlendMode(v BlendMode) {
	o.BlendMode = v
}

// GetOpacity returns the Opacity field value if set, zero value otherwise.
func (o *ComponentSetNode) GetOpacity() float32 {
	if o == nil || IsNil(o.Opacity) {
		var ret float32
		return ret
	}
	return *o.Opacity
}

// GetOpacityOk returns a tuple with the Opacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetOpacityOk() (*float32, bool) {
	if o == nil || IsNil(o.Opacity) {
		return nil, false
	}
	return o.Opacity, true
}

// HasOpacity returns a boolean if a field has been set.
func (o *ComponentSetNode) HasOpacity() bool {
	if o != nil && !IsNil(o.Opacity) {
		return true
	}

	return false
}

// SetOpacity gets a reference to the given float32 and assigns it to the Opacity field.
func (o *ComponentSetNode) SetOpacity(v float32) {
	o.Opacity = &v
}

// GetChildren returns the Children field value
func (o *ComponentSetNode) GetChildren() []SubcanvasNode {
	if o == nil {
		var ret []SubcanvasNode
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetChildrenOk() ([]SubcanvasNode, bool) {
	if o == nil {
		return nil, false
	}
	return o.Children, true
}

// SetChildren sets field value
func (o *ComponentSetNode) SetChildren(v []SubcanvasNode) {
	o.Children = v
}

// GetAbsoluteBoundingBox returns the AbsoluteBoundingBox field value
func (o *ComponentSetNode) GetAbsoluteBoundingBox() Rectangle {
	if o == nil {
		var ret Rectangle
		return ret
	}

	return o.AbsoluteBoundingBox
}

// GetAbsoluteBoundingBoxOk returns a tuple with the AbsoluteBoundingBox field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetAbsoluteBoundingBoxOk() (*Rectangle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbsoluteBoundingBox, true
}

// SetAbsoluteBoundingBox sets field value
func (o *ComponentSetNode) SetAbsoluteBoundingBox(v Rectangle) {
	o.AbsoluteBoundingBox = v
}

// GetAbsoluteRenderBounds returns the AbsoluteRenderBounds field value
func (o *ComponentSetNode) GetAbsoluteRenderBounds() Rectangle {
	if o == nil {
		var ret Rectangle
		return ret
	}

	return o.AbsoluteRenderBounds
}

// GetAbsoluteRenderBoundsOk returns a tuple with the AbsoluteRenderBounds field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetAbsoluteRenderBoundsOk() (*Rectangle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbsoluteRenderBounds, true
}

// SetAbsoluteRenderBounds sets field value
func (o *ComponentSetNode) SetAbsoluteRenderBounds(v Rectangle) {
	o.AbsoluteRenderBounds = v
}

// GetPreserveRatio returns the PreserveRatio field value if set, zero value otherwise.
func (o *ComponentSetNode) GetPreserveRatio() bool {
	if o == nil || IsNil(o.PreserveRatio) {
		var ret bool
		return ret
	}
	return *o.PreserveRatio
}

// GetPreserveRatioOk returns a tuple with the PreserveRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetPreserveRatioOk() (*bool, bool) {
	if o == nil || IsNil(o.PreserveRatio) {
		return nil, false
	}
	return o.PreserveRatio, true
}

// HasPreserveRatio returns a boolean if a field has been set.
func (o *ComponentSetNode) HasPreserveRatio() bool {
	if o != nil && !IsNil(o.PreserveRatio) {
		return true
	}

	return false
}

// SetPreserveRatio gets a reference to the given bool and assigns it to the PreserveRatio field.
func (o *ComponentSetNode) SetPreserveRatio(v bool) {
	o.PreserveRatio = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *ComponentSetNode) GetConstraints() LayoutConstraint {
	if o == nil || IsNil(o.Constraints) {
		var ret LayoutConstraint
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetConstraintsOk() (*LayoutConstraint, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *ComponentSetNode) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given LayoutConstraint and assigns it to the Constraints field.
func (o *ComponentSetNode) SetConstraints(v LayoutConstraint) {
	o.Constraints = &v
}

// GetRelativeTransform returns the RelativeTransform field value if set, zero value otherwise.
func (o *ComponentSetNode) GetRelativeTransform() [][]float32 {
	if o == nil || IsNil(o.RelativeTransform) {
		var ret [][]float32
		return ret
	}
	return o.RelativeTransform
}

// GetRelativeTransformOk returns a tuple with the RelativeTransform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetRelativeTransformOk() ([][]float32, bool) {
	if o == nil || IsNil(o.RelativeTransform) {
		return nil, false
	}
	return o.RelativeTransform, true
}

// HasRelativeTransform returns a boolean if a field has been set.
func (o *ComponentSetNode) HasRelativeTransform() bool {
	if o != nil && !IsNil(o.RelativeTransform) {
		return true
	}

	return false
}

// SetRelativeTransform gets a reference to the given [][]float32 and assigns it to the RelativeTransform field.
func (o *ComponentSetNode) SetRelativeTransform(v [][]float32) {
	o.RelativeTransform = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ComponentSetNode) GetSize() Vector {
	if o == nil || IsNil(o.Size) {
		var ret Vector
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetSizeOk() (*Vector, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ComponentSetNode) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given Vector and assigns it to the Size field.
func (o *ComponentSetNode) SetSize(v Vector) {
	o.Size = &v
}

// GetLayoutAlign returns the LayoutAlign field value if set, zero value otherwise.
func (o *ComponentSetNode) GetLayoutAlign() string {
	if o == nil || IsNil(o.LayoutAlign) {
		var ret string
		return ret
	}
	return *o.LayoutAlign
}

// GetLayoutAlignOk returns a tuple with the LayoutAlign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetLayoutAlignOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutAlign) {
		return nil, false
	}
	return o.LayoutAlign, true
}

// HasLayoutAlign returns a boolean if a field has been set.
func (o *ComponentSetNode) HasLayoutAlign() bool {
	if o != nil && !IsNil(o.LayoutAlign) {
		return true
	}

	return false
}

// SetLayoutAlign gets a reference to the given string and assigns it to the LayoutAlign field.
func (o *ComponentSetNode) SetLayoutAlign(v string) {
	o.LayoutAlign = &v
}

// GetLayoutGrow returns the LayoutGrow field value if set, zero value otherwise.
func (o *ComponentSetNode) GetLayoutGrow() float32 {
	if o == nil || IsNil(o.LayoutGrow) {
		var ret float32
		return ret
	}
	return *o.LayoutGrow
}

// GetLayoutGrowOk returns a tuple with the LayoutGrow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetLayoutGrowOk() (*float32, bool) {
	if o == nil || IsNil(o.LayoutGrow) {
		return nil, false
	}
	return o.LayoutGrow, true
}

// HasLayoutGrow returns a boolean if a field has been set.
func (o *ComponentSetNode) HasLayoutGrow() bool {
	if o != nil && !IsNil(o.LayoutGrow) {
		return true
	}

	return false
}

// SetLayoutGrow gets a reference to the given float32 and assigns it to the LayoutGrow field.
func (o *ComponentSetNode) SetLayoutGrow(v float32) {
	o.LayoutGrow = &v
}

// GetLayoutPositioning returns the LayoutPositioning field value if set, zero value otherwise.
func (o *ComponentSetNode) GetLayoutPositioning() string {
	if o == nil || IsNil(o.LayoutPositioning) {
		var ret string
		return ret
	}
	return *o.LayoutPositioning
}

// GetLayoutPositioningOk returns a tuple with the LayoutPositioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetLayoutPositioningOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutPositioning) {
		return nil, false
	}
	return o.LayoutPositioning, true
}

// HasLayoutPositioning returns a boolean if a field has been set.
func (o *ComponentSetNode) HasLayoutPositioning() bool {
	if o != nil && !IsNil(o.LayoutPositioning) {
		return true
	}

	return false
}

// SetLayoutPositioning gets a reference to the given string and assigns it to the LayoutPositioning field.
func (o *ComponentSetNode) SetLayoutPositioning(v string) {
	o.LayoutPositioning = &v
}

// GetMinWidth returns the MinWidth field value if set, zero value otherwise.
func (o *ComponentSetNode) GetMinWidth() float32 {
	if o == nil || IsNil(o.MinWidth) {
		var ret float32
		return ret
	}
	return *o.MinWidth
}

// GetMinWidthOk returns a tuple with the MinWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetMinWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.MinWidth) {
		return nil, false
	}
	return o.MinWidth, true
}

// HasMinWidth returns a boolean if a field has been set.
func (o *ComponentSetNode) HasMinWidth() bool {
	if o != nil && !IsNil(o.MinWidth) {
		return true
	}

	return false
}

// SetMinWidth gets a reference to the given float32 and assigns it to the MinWidth field.
func (o *ComponentSetNode) SetMinWidth(v float32) {
	o.MinWidth = &v
}

// GetMaxWidth returns the MaxWidth field value if set, zero value otherwise.
func (o *ComponentSetNode) GetMaxWidth() float32 {
	if o == nil || IsNil(o.MaxWidth) {
		var ret float32
		return ret
	}
	return *o.MaxWidth
}

// GetMaxWidthOk returns a tuple with the MaxWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetMaxWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxWidth) {
		return nil, false
	}
	return o.MaxWidth, true
}

// HasMaxWidth returns a boolean if a field has been set.
func (o *ComponentSetNode) HasMaxWidth() bool {
	if o != nil && !IsNil(o.MaxWidth) {
		return true
	}

	return false
}

// SetMaxWidth gets a reference to the given float32 and assigns it to the MaxWidth field.
func (o *ComponentSetNode) SetMaxWidth(v float32) {
	o.MaxWidth = &v
}

// GetMinHeight returns the MinHeight field value if set, zero value otherwise.
func (o *ComponentSetNode) GetMinHeight() float32 {
	if o == nil || IsNil(o.MinHeight) {
		var ret float32
		return ret
	}
	return *o.MinHeight
}

// GetMinHeightOk returns a tuple with the MinHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetMinHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.MinHeight) {
		return nil, false
	}
	return o.MinHeight, true
}

// HasMinHeight returns a boolean if a field has been set.
func (o *ComponentSetNode) HasMinHeight() bool {
	if o != nil && !IsNil(o.MinHeight) {
		return true
	}

	return false
}

// SetMinHeight gets a reference to the given float32 and assigns it to the MinHeight field.
func (o *ComponentSetNode) SetMinHeight(v float32) {
	o.MinHeight = &v
}

// GetMaxHeight returns the MaxHeight field value if set, zero value otherwise.
func (o *ComponentSetNode) GetMaxHeight() float32 {
	if o == nil || IsNil(o.MaxHeight) {
		var ret float32
		return ret
	}
	return *o.MaxHeight
}

// GetMaxHeightOk returns a tuple with the MaxHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetMaxHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxHeight) {
		return nil, false
	}
	return o.MaxHeight, true
}

// HasMaxHeight returns a boolean if a field has been set.
func (o *ComponentSetNode) HasMaxHeight() bool {
	if o != nil && !IsNil(o.MaxHeight) {
		return true
	}

	return false
}

// SetMaxHeight gets a reference to the given float32 and assigns it to the MaxHeight field.
func (o *ComponentSetNode) SetMaxHeight(v float32) {
	o.MaxHeight = &v
}

// GetLayoutSizingHorizontal returns the LayoutSizingHorizontal field value if set, zero value otherwise.
func (o *ComponentSetNode) GetLayoutSizingHorizontal() string {
	if o == nil || IsNil(o.LayoutSizingHorizontal) {
		var ret string
		return ret
	}
	return *o.LayoutSizingHorizontal
}

// GetLayoutSizingHorizontalOk returns a tuple with the LayoutSizingHorizontal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetLayoutSizingHorizontalOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutSizingHorizontal) {
		return nil, false
	}
	return o.LayoutSizingHorizontal, true
}

// HasLayoutSizingHorizontal returns a boolean if a field has been set.
func (o *ComponentSetNode) HasLayoutSizingHorizontal() bool {
	if o != nil && !IsNil(o.LayoutSizingHorizontal) {
		return true
	}

	return false
}

// SetLayoutSizingHorizontal gets a reference to the given string and assigns it to the LayoutSizingHorizontal field.
func (o *ComponentSetNode) SetLayoutSizingHorizontal(v string) {
	o.LayoutSizingHorizontal = &v
}

// GetLayoutSizingVertical returns the LayoutSizingVertical field value if set, zero value otherwise.
func (o *ComponentSetNode) GetLayoutSizingVertical() string {
	if o == nil || IsNil(o.LayoutSizingVertical) {
		var ret string
		return ret
	}
	return *o.LayoutSizingVertical
}

// GetLayoutSizingVerticalOk returns a tuple with the LayoutSizingVertical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetLayoutSizingVerticalOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutSizingVertical) {
		return nil, false
	}
	return o.LayoutSizingVertical, true
}

// HasLayoutSizingVertical returns a boolean if a field has been set.
func (o *ComponentSetNode) HasLayoutSizingVertical() bool {
	if o != nil && !IsNil(o.LayoutSizingVertical) {
		return true
	}

	return false
}

// SetLayoutSizingVertical gets a reference to the given string and assigns it to the LayoutSizingVertical field.
func (o *ComponentSetNode) SetLayoutSizingVertical(v string) {
	o.LayoutSizingVertical = &v
}

// GetClipsContent returns the ClipsContent field value
func (o *ComponentSetNode) GetClipsContent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ClipsContent
}

// GetClipsContentOk returns a tuple with the ClipsContent field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetClipsContentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClipsContent, true
}

// SetClipsContent sets field value
func (o *ComponentSetNode) SetClipsContent(v bool) {
	o.ClipsContent = v
}

// GetBackground returns the Background field value if set, zero value otherwise.
func (o *ComponentSetNode) GetBackground() []Paint {
	if o == nil || IsNil(o.Background) {
		var ret []Paint
		return ret
	}
	return o.Background
}

// GetBackgroundOk returns a tuple with the Background field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetBackgroundOk() ([]Paint, bool) {
	if o == nil || IsNil(o.Background) {
		return nil, false
	}
	return o.Background, true
}

// HasBackground returns a boolean if a field has been set.
func (o *ComponentSetNode) HasBackground() bool {
	if o != nil && !IsNil(o.Background) {
		return true
	}

	return false
}

// SetBackground gets a reference to the given []Paint and assigns it to the Background field.
func (o *ComponentSetNode) SetBackground(v []Paint) {
	o.Background = v
}

// GetBackgroundColor returns the BackgroundColor field value if set, zero value otherwise.
// Deprecated
func (o *ComponentSetNode) GetBackgroundColor() RGBA {
	if o == nil || IsNil(o.BackgroundColor) {
		var ret RGBA
		return ret
	}
	return *o.BackgroundColor
}

// GetBackgroundColorOk returns a tuple with the BackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ComponentSetNode) GetBackgroundColorOk() (*RGBA, bool) {
	if o == nil || IsNil(o.BackgroundColor) {
		return nil, false
	}
	return o.BackgroundColor, true
}

// HasBackgroundColor returns a boolean if a field has been set.
func (o *ComponentSetNode) HasBackgroundColor() bool {
	if o != nil && !IsNil(o.BackgroundColor) {
		return true
	}

	return false
}

// SetBackgroundColor gets a reference to the given RGBA and assigns it to the BackgroundColor field.
// Deprecated
func (o *ComponentSetNode) SetBackgroundColor(v RGBA) {
	o.BackgroundColor = &v
}

// GetLayoutGrids returns the LayoutGrids field value if set, zero value otherwise.
func (o *ComponentSetNode) GetLayoutGrids() []LayoutGrid {
	if o == nil || IsNil(o.LayoutGrids) {
		var ret []LayoutGrid
		return ret
	}
	return o.LayoutGrids
}

// GetLayoutGridsOk returns a tuple with the LayoutGrids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetLayoutGridsOk() ([]LayoutGrid, bool) {
	if o == nil || IsNil(o.LayoutGrids) {
		return nil, false
	}
	return o.LayoutGrids, true
}

// HasLayoutGrids returns a boolean if a field has been set.
func (o *ComponentSetNode) HasLayoutGrids() bool {
	if o != nil && !IsNil(o.LayoutGrids) {
		return true
	}

	return false
}

// SetLayoutGrids gets a reference to the given []LayoutGrid and assigns it to the LayoutGrids field.
func (o *ComponentSetNode) SetLayoutGrids(v []LayoutGrid) {
	o.LayoutGrids = v
}

// GetOverflowDirection returns the OverflowDirection field value if set, zero value otherwise.
func (o *ComponentSetNode) GetOverflowDirection() string {
	if o == nil || IsNil(o.OverflowDirection) {
		var ret string
		return ret
	}
	return *o.OverflowDirection
}

// GetOverflowDirectionOk returns a tuple with the OverflowDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetOverflowDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.OverflowDirection) {
		return nil, false
	}
	return o.OverflowDirection, true
}

// HasOverflowDirection returns a boolean if a field has been set.
func (o *ComponentSetNode) HasOverflowDirection() bool {
	if o != nil && !IsNil(o.OverflowDirection) {
		return true
	}

	return false
}

// SetOverflowDirection gets a reference to the given string and assigns it to the OverflowDirection field.
func (o *ComponentSetNode) SetOverflowDirection(v string) {
	o.OverflowDirection = &v
}

// GetLayoutMode returns the LayoutMode field value if set, zero value otherwise.
func (o *ComponentSetNode) GetLayoutMode() string {
	if o == nil || IsNil(o.LayoutMode) {
		var ret string
		return ret
	}
	return *o.LayoutMode
}

// GetLayoutModeOk returns a tuple with the LayoutMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetLayoutModeOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutMode) {
		return nil, false
	}
	return o.LayoutMode, true
}

// HasLayoutMode returns a boolean if a field has been set.
func (o *ComponentSetNode) HasLayoutMode() bool {
	if o != nil && !IsNil(o.LayoutMode) {
		return true
	}

	return false
}

// SetLayoutMode gets a reference to the given string and assigns it to the LayoutMode field.
func (o *ComponentSetNode) SetLayoutMode(v string) {
	o.LayoutMode = &v
}

// GetPrimaryAxisSizingMode returns the PrimaryAxisSizingMode field value if set, zero value otherwise.
func (o *ComponentSetNode) GetPrimaryAxisSizingMode() string {
	if o == nil || IsNil(o.PrimaryAxisSizingMode) {
		var ret string
		return ret
	}
	return *o.PrimaryAxisSizingMode
}

// GetPrimaryAxisSizingModeOk returns a tuple with the PrimaryAxisSizingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetPrimaryAxisSizingModeOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryAxisSizingMode) {
		return nil, false
	}
	return o.PrimaryAxisSizingMode, true
}

// HasPrimaryAxisSizingMode returns a boolean if a field has been set.
func (o *ComponentSetNode) HasPrimaryAxisSizingMode() bool {
	if o != nil && !IsNil(o.PrimaryAxisSizingMode) {
		return true
	}

	return false
}

// SetPrimaryAxisSizingMode gets a reference to the given string and assigns it to the PrimaryAxisSizingMode field.
func (o *ComponentSetNode) SetPrimaryAxisSizingMode(v string) {
	o.PrimaryAxisSizingMode = &v
}

// GetCounterAxisSizingMode returns the CounterAxisSizingMode field value if set, zero value otherwise.
func (o *ComponentSetNode) GetCounterAxisSizingMode() string {
	if o == nil || IsNil(o.CounterAxisSizingMode) {
		var ret string
		return ret
	}
	return *o.CounterAxisSizingMode
}

// GetCounterAxisSizingModeOk returns a tuple with the CounterAxisSizingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetCounterAxisSizingModeOk() (*string, bool) {
	if o == nil || IsNil(o.CounterAxisSizingMode) {
		return nil, false
	}
	return o.CounterAxisSizingMode, true
}

// HasCounterAxisSizingMode returns a boolean if a field has been set.
func (o *ComponentSetNode) HasCounterAxisSizingMode() bool {
	if o != nil && !IsNil(o.CounterAxisSizingMode) {
		return true
	}

	return false
}

// SetCounterAxisSizingMode gets a reference to the given string and assigns it to the CounterAxisSizingMode field.
func (o *ComponentSetNode) SetCounterAxisSizingMode(v string) {
	o.CounterAxisSizingMode = &v
}

// GetPrimaryAxisAlignItems returns the PrimaryAxisAlignItems field value if set, zero value otherwise.
func (o *ComponentSetNode) GetPrimaryAxisAlignItems() string {
	if o == nil || IsNil(o.PrimaryAxisAlignItems) {
		var ret string
		return ret
	}
	return *o.PrimaryAxisAlignItems
}

// GetPrimaryAxisAlignItemsOk returns a tuple with the PrimaryAxisAlignItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetPrimaryAxisAlignItemsOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryAxisAlignItems) {
		return nil, false
	}
	return o.PrimaryAxisAlignItems, true
}

// HasPrimaryAxisAlignItems returns a boolean if a field has been set.
func (o *ComponentSetNode) HasPrimaryAxisAlignItems() bool {
	if o != nil && !IsNil(o.PrimaryAxisAlignItems) {
		return true
	}

	return false
}

// SetPrimaryAxisAlignItems gets a reference to the given string and assigns it to the PrimaryAxisAlignItems field.
func (o *ComponentSetNode) SetPrimaryAxisAlignItems(v string) {
	o.PrimaryAxisAlignItems = &v
}

// GetCounterAxisAlignItems returns the CounterAxisAlignItems field value if set, zero value otherwise.
func (o *ComponentSetNode) GetCounterAxisAlignItems() string {
	if o == nil || IsNil(o.CounterAxisAlignItems) {
		var ret string
		return ret
	}
	return *o.CounterAxisAlignItems
}

// GetCounterAxisAlignItemsOk returns a tuple with the CounterAxisAlignItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetCounterAxisAlignItemsOk() (*string, bool) {
	if o == nil || IsNil(o.CounterAxisAlignItems) {
		return nil, false
	}
	return o.CounterAxisAlignItems, true
}

// HasCounterAxisAlignItems returns a boolean if a field has been set.
func (o *ComponentSetNode) HasCounterAxisAlignItems() bool {
	if o != nil && !IsNil(o.CounterAxisAlignItems) {
		return true
	}

	return false
}

// SetCounterAxisAlignItems gets a reference to the given string and assigns it to the CounterAxisAlignItems field.
func (o *ComponentSetNode) SetCounterAxisAlignItems(v string) {
	o.CounterAxisAlignItems = &v
}

// GetPaddingLeft returns the PaddingLeft field value if set, zero value otherwise.
func (o *ComponentSetNode) GetPaddingLeft() float32 {
	if o == nil || IsNil(o.PaddingLeft) {
		var ret float32
		return ret
	}
	return *o.PaddingLeft
}

// GetPaddingLeftOk returns a tuple with the PaddingLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetPaddingLeftOk() (*float32, bool) {
	if o == nil || IsNil(o.PaddingLeft) {
		return nil, false
	}
	return o.PaddingLeft, true
}

// HasPaddingLeft returns a boolean if a field has been set.
func (o *ComponentSetNode) HasPaddingLeft() bool {
	if o != nil && !IsNil(o.PaddingLeft) {
		return true
	}

	return false
}

// SetPaddingLeft gets a reference to the given float32 and assigns it to the PaddingLeft field.
func (o *ComponentSetNode) SetPaddingLeft(v float32) {
	o.PaddingLeft = &v
}

// GetPaddingRight returns the PaddingRight field value if set, zero value otherwise.
func (o *ComponentSetNode) GetPaddingRight() float32 {
	if o == nil || IsNil(o.PaddingRight) {
		var ret float32
		return ret
	}
	return *o.PaddingRight
}

// GetPaddingRightOk returns a tuple with the PaddingRight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetPaddingRightOk() (*float32, bool) {
	if o == nil || IsNil(o.PaddingRight) {
		return nil, false
	}
	return o.PaddingRight, true
}

// HasPaddingRight returns a boolean if a field has been set.
func (o *ComponentSetNode) HasPaddingRight() bool {
	if o != nil && !IsNil(o.PaddingRight) {
		return true
	}

	return false
}

// SetPaddingRight gets a reference to the given float32 and assigns it to the PaddingRight field.
func (o *ComponentSetNode) SetPaddingRight(v float32) {
	o.PaddingRight = &v
}

// GetPaddingTop returns the PaddingTop field value if set, zero value otherwise.
func (o *ComponentSetNode) GetPaddingTop() float32 {
	if o == nil || IsNil(o.PaddingTop) {
		var ret float32
		return ret
	}
	return *o.PaddingTop
}

// GetPaddingTopOk returns a tuple with the PaddingTop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetPaddingTopOk() (*float32, bool) {
	if o == nil || IsNil(o.PaddingTop) {
		return nil, false
	}
	return o.PaddingTop, true
}

// HasPaddingTop returns a boolean if a field has been set.
func (o *ComponentSetNode) HasPaddingTop() bool {
	if o != nil && !IsNil(o.PaddingTop) {
		return true
	}

	return false
}

// SetPaddingTop gets a reference to the given float32 and assigns it to the PaddingTop field.
func (o *ComponentSetNode) SetPaddingTop(v float32) {
	o.PaddingTop = &v
}

// GetPaddingBottom returns the PaddingBottom field value if set, zero value otherwise.
func (o *ComponentSetNode) GetPaddingBottom() float32 {
	if o == nil || IsNil(o.PaddingBottom) {
		var ret float32
		return ret
	}
	return *o.PaddingBottom
}

// GetPaddingBottomOk returns a tuple with the PaddingBottom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetPaddingBottomOk() (*float32, bool) {
	if o == nil || IsNil(o.PaddingBottom) {
		return nil, false
	}
	return o.PaddingBottom, true
}

// HasPaddingBottom returns a boolean if a field has been set.
func (o *ComponentSetNode) HasPaddingBottom() bool {
	if o != nil && !IsNil(o.PaddingBottom) {
		return true
	}

	return false
}

// SetPaddingBottom gets a reference to the given float32 and assigns it to the PaddingBottom field.
func (o *ComponentSetNode) SetPaddingBottom(v float32) {
	o.PaddingBottom = &v
}

// GetItemSpacing returns the ItemSpacing field value if set, zero value otherwise.
func (o *ComponentSetNode) GetItemSpacing() float32 {
	if o == nil || IsNil(o.ItemSpacing) {
		var ret float32
		return ret
	}
	return *o.ItemSpacing
}

// GetItemSpacingOk returns a tuple with the ItemSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetItemSpacingOk() (*float32, bool) {
	if o == nil || IsNil(o.ItemSpacing) {
		return nil, false
	}
	return o.ItemSpacing, true
}

// HasItemSpacing returns a boolean if a field has been set.
func (o *ComponentSetNode) HasItemSpacing() bool {
	if o != nil && !IsNil(o.ItemSpacing) {
		return true
	}

	return false
}

// SetItemSpacing gets a reference to the given float32 and assigns it to the ItemSpacing field.
func (o *ComponentSetNode) SetItemSpacing(v float32) {
	o.ItemSpacing = &v
}

// GetItemReverseZIndex returns the ItemReverseZIndex field value if set, zero value otherwise.
func (o *ComponentSetNode) GetItemReverseZIndex() bool {
	if o == nil || IsNil(o.ItemReverseZIndex) {
		var ret bool
		return ret
	}
	return *o.ItemReverseZIndex
}

// GetItemReverseZIndexOk returns a tuple with the ItemReverseZIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetItemReverseZIndexOk() (*bool, bool) {
	if o == nil || IsNil(o.ItemReverseZIndex) {
		return nil, false
	}
	return o.ItemReverseZIndex, true
}

// HasItemReverseZIndex returns a boolean if a field has been set.
func (o *ComponentSetNode) HasItemReverseZIndex() bool {
	if o != nil && !IsNil(o.ItemReverseZIndex) {
		return true
	}

	return false
}

// SetItemReverseZIndex gets a reference to the given bool and assigns it to the ItemReverseZIndex field.
func (o *ComponentSetNode) SetItemReverseZIndex(v bool) {
	o.ItemReverseZIndex = &v
}

// GetStrokesIncludedInLayout returns the StrokesIncludedInLayout field value if set, zero value otherwise.
func (o *ComponentSetNode) GetStrokesIncludedInLayout() bool {
	if o == nil || IsNil(o.StrokesIncludedInLayout) {
		var ret bool
		return ret
	}
	return *o.StrokesIncludedInLayout
}

// GetStrokesIncludedInLayoutOk returns a tuple with the StrokesIncludedInLayout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetStrokesIncludedInLayoutOk() (*bool, bool) {
	if o == nil || IsNil(o.StrokesIncludedInLayout) {
		return nil, false
	}
	return o.StrokesIncludedInLayout, true
}

// HasStrokesIncludedInLayout returns a boolean if a field has been set.
func (o *ComponentSetNode) HasStrokesIncludedInLayout() bool {
	if o != nil && !IsNil(o.StrokesIncludedInLayout) {
		return true
	}

	return false
}

// SetStrokesIncludedInLayout gets a reference to the given bool and assigns it to the StrokesIncludedInLayout field.
func (o *ComponentSetNode) SetStrokesIncludedInLayout(v bool) {
	o.StrokesIncludedInLayout = &v
}

// GetLayoutWrap returns the LayoutWrap field value if set, zero value otherwise.
func (o *ComponentSetNode) GetLayoutWrap() string {
	if o == nil || IsNil(o.LayoutWrap) {
		var ret string
		return ret
	}
	return *o.LayoutWrap
}

// GetLayoutWrapOk returns a tuple with the LayoutWrap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetLayoutWrapOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutWrap) {
		return nil, false
	}
	return o.LayoutWrap, true
}

// HasLayoutWrap returns a boolean if a field has been set.
func (o *ComponentSetNode) HasLayoutWrap() bool {
	if o != nil && !IsNil(o.LayoutWrap) {
		return true
	}

	return false
}

// SetLayoutWrap gets a reference to the given string and assigns it to the LayoutWrap field.
func (o *ComponentSetNode) SetLayoutWrap(v string) {
	o.LayoutWrap = &v
}

// GetCounterAxisSpacing returns the CounterAxisSpacing field value if set, zero value otherwise.
func (o *ComponentSetNode) GetCounterAxisSpacing() float32 {
	if o == nil || IsNil(o.CounterAxisSpacing) {
		var ret float32
		return ret
	}
	return *o.CounterAxisSpacing
}

// GetCounterAxisSpacingOk returns a tuple with the CounterAxisSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetCounterAxisSpacingOk() (*float32, bool) {
	if o == nil || IsNil(o.CounterAxisSpacing) {
		return nil, false
	}
	return o.CounterAxisSpacing, true
}

// HasCounterAxisSpacing returns a boolean if a field has been set.
func (o *ComponentSetNode) HasCounterAxisSpacing() bool {
	if o != nil && !IsNil(o.CounterAxisSpacing) {
		return true
	}

	return false
}

// SetCounterAxisSpacing gets a reference to the given float32 and assigns it to the CounterAxisSpacing field.
func (o *ComponentSetNode) SetCounterAxisSpacing(v float32) {
	o.CounterAxisSpacing = &v
}

// GetCounterAxisAlignContent returns the CounterAxisAlignContent field value if set, zero value otherwise.
func (o *ComponentSetNode) GetCounterAxisAlignContent() string {
	if o == nil || IsNil(o.CounterAxisAlignContent) {
		var ret string
		return ret
	}
	return *o.CounterAxisAlignContent
}

// GetCounterAxisAlignContentOk returns a tuple with the CounterAxisAlignContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetCounterAxisAlignContentOk() (*string, bool) {
	if o == nil || IsNil(o.CounterAxisAlignContent) {
		return nil, false
	}
	return o.CounterAxisAlignContent, true
}

// HasCounterAxisAlignContent returns a boolean if a field has been set.
func (o *ComponentSetNode) HasCounterAxisAlignContent() bool {
	if o != nil && !IsNil(o.CounterAxisAlignContent) {
		return true
	}

	return false
}

// SetCounterAxisAlignContent gets a reference to the given string and assigns it to the CounterAxisAlignContent field.
func (o *ComponentSetNode) SetCounterAxisAlignContent(v string) {
	o.CounterAxisAlignContent = &v
}

// GetCornerRadius returns the CornerRadius field value if set, zero value otherwise.
func (o *ComponentSetNode) GetCornerRadius() float32 {
	if o == nil || IsNil(o.CornerRadius) {
		var ret float32
		return ret
	}
	return *o.CornerRadius
}

// GetCornerRadiusOk returns a tuple with the CornerRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetCornerRadiusOk() (*float32, bool) {
	if o == nil || IsNil(o.CornerRadius) {
		return nil, false
	}
	return o.CornerRadius, true
}

// HasCornerRadius returns a boolean if a field has been set.
func (o *ComponentSetNode) HasCornerRadius() bool {
	if o != nil && !IsNil(o.CornerRadius) {
		return true
	}

	return false
}

// SetCornerRadius gets a reference to the given float32 and assigns it to the CornerRadius field.
func (o *ComponentSetNode) SetCornerRadius(v float32) {
	o.CornerRadius = &v
}

// GetCornerSmoothing returns the CornerSmoothing field value if set, zero value otherwise.
func (o *ComponentSetNode) GetCornerSmoothing() float32 {
	if o == nil || IsNil(o.CornerSmoothing) {
		var ret float32
		return ret
	}
	return *o.CornerSmoothing
}

// GetCornerSmoothingOk returns a tuple with the CornerSmoothing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetCornerSmoothingOk() (*float32, bool) {
	if o == nil || IsNil(o.CornerSmoothing) {
		return nil, false
	}
	return o.CornerSmoothing, true
}

// HasCornerSmoothing returns a boolean if a field has been set.
func (o *ComponentSetNode) HasCornerSmoothing() bool {
	if o != nil && !IsNil(o.CornerSmoothing) {
		return true
	}

	return false
}

// SetCornerSmoothing gets a reference to the given float32 and assigns it to the CornerSmoothing field.
func (o *ComponentSetNode) SetCornerSmoothing(v float32) {
	o.CornerSmoothing = &v
}

// GetRectangleCornerRadii returns the RectangleCornerRadii field value if set, zero value otherwise.
func (o *ComponentSetNode) GetRectangleCornerRadii() []float32 {
	if o == nil || IsNil(o.RectangleCornerRadii) {
		var ret []float32
		return ret
	}
	return o.RectangleCornerRadii
}

// GetRectangleCornerRadiiOk returns a tuple with the RectangleCornerRadii field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetRectangleCornerRadiiOk() ([]float32, bool) {
	if o == nil || IsNil(o.RectangleCornerRadii) {
		return nil, false
	}
	return o.RectangleCornerRadii, true
}

// HasRectangleCornerRadii returns a boolean if a field has been set.
func (o *ComponentSetNode) HasRectangleCornerRadii() bool {
	if o != nil && !IsNil(o.RectangleCornerRadii) {
		return true
	}

	return false
}

// SetRectangleCornerRadii gets a reference to the given []float32 and assigns it to the RectangleCornerRadii field.
func (o *ComponentSetNode) SetRectangleCornerRadii(v []float32) {
	o.RectangleCornerRadii = v
}

// GetFills returns the Fills field value
func (o *ComponentSetNode) GetFills() []Paint {
	if o == nil {
		var ret []Paint
		return ret
	}

	return o.Fills
}

// GetFillsOk returns a tuple with the Fills field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetFillsOk() ([]Paint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fills, true
}

// SetFills sets field value
func (o *ComponentSetNode) SetFills(v []Paint) {
	o.Fills = v
}

// GetStyles returns the Styles field value if set, zero value otherwise.
func (o *ComponentSetNode) GetStyles() map[string]string {
	if o == nil || IsNil(o.Styles) {
		var ret map[string]string
		return ret
	}
	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetStylesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Styles) {
		return map[string]string{}, false
	}
	return o.Styles, true
}

// HasStyles returns a boolean if a field has been set.
func (o *ComponentSetNode) HasStyles() bool {
	if o != nil && !IsNil(o.Styles) {
		return true
	}

	return false
}

// SetStyles gets a reference to the given map[string]string and assigns it to the Styles field.
func (o *ComponentSetNode) SetStyles(v map[string]string) {
	o.Styles = v
}

// GetStrokes returns the Strokes field value if set, zero value otherwise.
func (o *ComponentSetNode) GetStrokes() []Paint {
	if o == nil || IsNil(o.Strokes) {
		var ret []Paint
		return ret
	}
	return o.Strokes
}

// GetStrokesOk returns a tuple with the Strokes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetStrokesOk() ([]Paint, bool) {
	if o == nil || IsNil(o.Strokes) {
		return nil, false
	}
	return o.Strokes, true
}

// HasStrokes returns a boolean if a field has been set.
func (o *ComponentSetNode) HasStrokes() bool {
	if o != nil && !IsNil(o.Strokes) {
		return true
	}

	return false
}

// SetStrokes gets a reference to the given []Paint and assigns it to the Strokes field.
func (o *ComponentSetNode) SetStrokes(v []Paint) {
	o.Strokes = v
}

// GetStrokeWeight returns the StrokeWeight field value if set, zero value otherwise.
func (o *ComponentSetNode) GetStrokeWeight() float32 {
	if o == nil || IsNil(o.StrokeWeight) {
		var ret float32
		return ret
	}
	return *o.StrokeWeight
}

// GetStrokeWeightOk returns a tuple with the StrokeWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetStrokeWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.StrokeWeight) {
		return nil, false
	}
	return o.StrokeWeight, true
}

// HasStrokeWeight returns a boolean if a field has been set.
func (o *ComponentSetNode) HasStrokeWeight() bool {
	if o != nil && !IsNil(o.StrokeWeight) {
		return true
	}

	return false
}

// SetStrokeWeight gets a reference to the given float32 and assigns it to the StrokeWeight field.
func (o *ComponentSetNode) SetStrokeWeight(v float32) {
	o.StrokeWeight = &v
}

// GetStrokeAlign returns the StrokeAlign field value if set, zero value otherwise.
func (o *ComponentSetNode) GetStrokeAlign() string {
	if o == nil || IsNil(o.StrokeAlign) {
		var ret string
		return ret
	}
	return *o.StrokeAlign
}

// GetStrokeAlignOk returns a tuple with the StrokeAlign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetStrokeAlignOk() (*string, bool) {
	if o == nil || IsNil(o.StrokeAlign) {
		return nil, false
	}
	return o.StrokeAlign, true
}

// HasStrokeAlign returns a boolean if a field has been set.
func (o *ComponentSetNode) HasStrokeAlign() bool {
	if o != nil && !IsNil(o.StrokeAlign) {
		return true
	}

	return false
}

// SetStrokeAlign gets a reference to the given string and assigns it to the StrokeAlign field.
func (o *ComponentSetNode) SetStrokeAlign(v string) {
	o.StrokeAlign = &v
}

// GetStrokeJoin returns the StrokeJoin field value if set, zero value otherwise.
func (o *ComponentSetNode) GetStrokeJoin() string {
	if o == nil || IsNil(o.StrokeJoin) {
		var ret string
		return ret
	}
	return *o.StrokeJoin
}

// GetStrokeJoinOk returns a tuple with the StrokeJoin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetStrokeJoinOk() (*string, bool) {
	if o == nil || IsNil(o.StrokeJoin) {
		return nil, false
	}
	return o.StrokeJoin, true
}

// HasStrokeJoin returns a boolean if a field has been set.
func (o *ComponentSetNode) HasStrokeJoin() bool {
	if o != nil && !IsNil(o.StrokeJoin) {
		return true
	}

	return false
}

// SetStrokeJoin gets a reference to the given string and assigns it to the StrokeJoin field.
func (o *ComponentSetNode) SetStrokeJoin(v string) {
	o.StrokeJoin = &v
}

// GetStrokeDashes returns the StrokeDashes field value if set, zero value otherwise.
func (o *ComponentSetNode) GetStrokeDashes() []float32 {
	if o == nil || IsNil(o.StrokeDashes) {
		var ret []float32
		return ret
	}
	return o.StrokeDashes
}

// GetStrokeDashesOk returns a tuple with the StrokeDashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetStrokeDashesOk() ([]float32, bool) {
	if o == nil || IsNil(o.StrokeDashes) {
		return nil, false
	}
	return o.StrokeDashes, true
}

// HasStrokeDashes returns a boolean if a field has been set.
func (o *ComponentSetNode) HasStrokeDashes() bool {
	if o != nil && !IsNil(o.StrokeDashes) {
		return true
	}

	return false
}

// SetStrokeDashes gets a reference to the given []float32 and assigns it to the StrokeDashes field.
func (o *ComponentSetNode) SetStrokeDashes(v []float32) {
	o.StrokeDashes = v
}

// GetFillOverrideTable returns the FillOverrideTable field value if set, zero value otherwise.
func (o *ComponentSetNode) GetFillOverrideTable() map[string]HasGeometryTraitAllOfFillOverrideTable {
	if o == nil || IsNil(o.FillOverrideTable) {
		var ret map[string]HasGeometryTraitAllOfFillOverrideTable
		return ret
	}
	return o.FillOverrideTable
}

// GetFillOverrideTableOk returns a tuple with the FillOverrideTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetFillOverrideTableOk() (map[string]HasGeometryTraitAllOfFillOverrideTable, bool) {
	if o == nil || IsNil(o.FillOverrideTable) {
		return map[string]HasGeometryTraitAllOfFillOverrideTable{}, false
	}
	return o.FillOverrideTable, true
}

// HasFillOverrideTable returns a boolean if a field has been set.
func (o *ComponentSetNode) HasFillOverrideTable() bool {
	if o != nil && !IsNil(o.FillOverrideTable) {
		return true
	}

	return false
}

// SetFillOverrideTable gets a reference to the given map[string]HasGeometryTraitAllOfFillOverrideTable and assigns it to the FillOverrideTable field.
func (o *ComponentSetNode) SetFillOverrideTable(v map[string]HasGeometryTraitAllOfFillOverrideTable) {
	o.FillOverrideTable = v
}

// GetFillGeometry returns the FillGeometry field value if set, zero value otherwise.
func (o *ComponentSetNode) GetFillGeometry() []Path {
	if o == nil || IsNil(o.FillGeometry) {
		var ret []Path
		return ret
	}
	return o.FillGeometry
}

// GetFillGeometryOk returns a tuple with the FillGeometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetFillGeometryOk() ([]Path, bool) {
	if o == nil || IsNil(o.FillGeometry) {
		return nil, false
	}
	return o.FillGeometry, true
}

// HasFillGeometry returns a boolean if a field has been set.
func (o *ComponentSetNode) HasFillGeometry() bool {
	if o != nil && !IsNil(o.FillGeometry) {
		return true
	}

	return false
}

// SetFillGeometry gets a reference to the given []Path and assigns it to the FillGeometry field.
func (o *ComponentSetNode) SetFillGeometry(v []Path) {
	o.FillGeometry = v
}

// GetStrokeGeometry returns the StrokeGeometry field value if set, zero value otherwise.
func (o *ComponentSetNode) GetStrokeGeometry() []Path {
	if o == nil || IsNil(o.StrokeGeometry) {
		var ret []Path
		return ret
	}
	return o.StrokeGeometry
}

// GetStrokeGeometryOk returns a tuple with the StrokeGeometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetStrokeGeometryOk() ([]Path, bool) {
	if o == nil || IsNil(o.StrokeGeometry) {
		return nil, false
	}
	return o.StrokeGeometry, true
}

// HasStrokeGeometry returns a boolean if a field has been set.
func (o *ComponentSetNode) HasStrokeGeometry() bool {
	if o != nil && !IsNil(o.StrokeGeometry) {
		return true
	}

	return false
}

// SetStrokeGeometry gets a reference to the given []Path and assigns it to the StrokeGeometry field.
func (o *ComponentSetNode) SetStrokeGeometry(v []Path) {
	o.StrokeGeometry = v
}

// GetStrokeCap returns the StrokeCap field value if set, zero value otherwise.
func (o *ComponentSetNode) GetStrokeCap() string {
	if o == nil || IsNil(o.StrokeCap) {
		var ret string
		return ret
	}
	return *o.StrokeCap
}

// GetStrokeCapOk returns a tuple with the StrokeCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetStrokeCapOk() (*string, bool) {
	if o == nil || IsNil(o.StrokeCap) {
		return nil, false
	}
	return o.StrokeCap, true
}

// HasStrokeCap returns a boolean if a field has been set.
func (o *ComponentSetNode) HasStrokeCap() bool {
	if o != nil && !IsNil(o.StrokeCap) {
		return true
	}

	return false
}

// SetStrokeCap gets a reference to the given string and assigns it to the StrokeCap field.
func (o *ComponentSetNode) SetStrokeCap(v string) {
	o.StrokeCap = &v
}

// GetStrokeMiterAngle returns the StrokeMiterAngle field value if set, zero value otherwise.
func (o *ComponentSetNode) GetStrokeMiterAngle() float32 {
	if o == nil || IsNil(o.StrokeMiterAngle) {
		var ret float32
		return ret
	}
	return *o.StrokeMiterAngle
}

// GetStrokeMiterAngleOk returns a tuple with the StrokeMiterAngle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetStrokeMiterAngleOk() (*float32, bool) {
	if o == nil || IsNil(o.StrokeMiterAngle) {
		return nil, false
	}
	return o.StrokeMiterAngle, true
}

// HasStrokeMiterAngle returns a boolean if a field has been set.
func (o *ComponentSetNode) HasStrokeMiterAngle() bool {
	if o != nil && !IsNil(o.StrokeMiterAngle) {
		return true
	}

	return false
}

// SetStrokeMiterAngle gets a reference to the given float32 and assigns it to the StrokeMiterAngle field.
func (o *ComponentSetNode) SetStrokeMiterAngle(v float32) {
	o.StrokeMiterAngle = &v
}

// GetExportSettings returns the ExportSettings field value if set, zero value otherwise.
func (o *ComponentSetNode) GetExportSettings() []ExportSetting {
	if o == nil || IsNil(o.ExportSettings) {
		var ret []ExportSetting
		return ret
	}
	return o.ExportSettings
}

// GetExportSettingsOk returns a tuple with the ExportSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetExportSettingsOk() ([]ExportSetting, bool) {
	if o == nil || IsNil(o.ExportSettings) {
		return nil, false
	}
	return o.ExportSettings, true
}

// HasExportSettings returns a boolean if a field has been set.
func (o *ComponentSetNode) HasExportSettings() bool {
	if o != nil && !IsNil(o.ExportSettings) {
		return true
	}

	return false
}

// SetExportSettings gets a reference to the given []ExportSetting and assigns it to the ExportSettings field.
func (o *ComponentSetNode) SetExportSettings(v []ExportSetting) {
	o.ExportSettings = v
}

// GetEffects returns the Effects field value
func (o *ComponentSetNode) GetEffects() []Effect {
	if o == nil {
		var ret []Effect
		return ret
	}

	return o.Effects
}

// GetEffectsOk returns a tuple with the Effects field value
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetEffectsOk() ([]Effect, bool) {
	if o == nil {
		return nil, false
	}
	return o.Effects, true
}

// SetEffects sets field value
func (o *ComponentSetNode) SetEffects(v []Effect) {
	o.Effects = v
}

// GetIsMask returns the IsMask field value if set, zero value otherwise.
func (o *ComponentSetNode) GetIsMask() bool {
	if o == nil || IsNil(o.IsMask) {
		var ret bool
		return ret
	}
	return *o.IsMask
}

// GetIsMaskOk returns a tuple with the IsMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetIsMaskOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMask) {
		return nil, false
	}
	return o.IsMask, true
}

// HasIsMask returns a boolean if a field has been set.
func (o *ComponentSetNode) HasIsMask() bool {
	if o != nil && !IsNil(o.IsMask) {
		return true
	}

	return false
}

// SetIsMask gets a reference to the given bool and assigns it to the IsMask field.
func (o *ComponentSetNode) SetIsMask(v bool) {
	o.IsMask = &v
}

// GetMaskType returns the MaskType field value if set, zero value otherwise.
func (o *ComponentSetNode) GetMaskType() string {
	if o == nil || IsNil(o.MaskType) {
		var ret string
		return ret
	}
	return *o.MaskType
}

// GetMaskTypeOk returns a tuple with the MaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetMaskTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MaskType) {
		return nil, false
	}
	return o.MaskType, true
}

// HasMaskType returns a boolean if a field has been set.
func (o *ComponentSetNode) HasMaskType() bool {
	if o != nil && !IsNil(o.MaskType) {
		return true
	}

	return false
}

// SetMaskType gets a reference to the given string and assigns it to the MaskType field.
func (o *ComponentSetNode) SetMaskType(v string) {
	o.MaskType = &v
}

// GetIsMaskOutline returns the IsMaskOutline field value if set, zero value otherwise.
// Deprecated
func (o *ComponentSetNode) GetIsMaskOutline() bool {
	if o == nil || IsNil(o.IsMaskOutline) {
		var ret bool
		return ret
	}
	return *o.IsMaskOutline
}

// GetIsMaskOutlineOk returns a tuple with the IsMaskOutline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ComponentSetNode) GetIsMaskOutlineOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMaskOutline) {
		return nil, false
	}
	return o.IsMaskOutline, true
}

// HasIsMaskOutline returns a boolean if a field has been set.
func (o *ComponentSetNode) HasIsMaskOutline() bool {
	if o != nil && !IsNil(o.IsMaskOutline) {
		return true
	}

	return false
}

// SetIsMaskOutline gets a reference to the given bool and assigns it to the IsMaskOutline field.
// Deprecated
func (o *ComponentSetNode) SetIsMaskOutline(v bool) {
	o.IsMaskOutline = &v
}

// GetTransitionNodeID returns the TransitionNodeID field value if set, zero value otherwise.
func (o *ComponentSetNode) GetTransitionNodeID() string {
	if o == nil || IsNil(o.TransitionNodeID) {
		var ret string
		return ret
	}
	return *o.TransitionNodeID
}

// GetTransitionNodeIDOk returns a tuple with the TransitionNodeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetTransitionNodeIDOk() (*string, bool) {
	if o == nil || IsNil(o.TransitionNodeID) {
		return nil, false
	}
	return o.TransitionNodeID, true
}

// HasTransitionNodeID returns a boolean if a field has been set.
func (o *ComponentSetNode) HasTransitionNodeID() bool {
	if o != nil && !IsNil(o.TransitionNodeID) {
		return true
	}

	return false
}

// SetTransitionNodeID gets a reference to the given string and assigns it to the TransitionNodeID field.
func (o *ComponentSetNode) SetTransitionNodeID(v string) {
	o.TransitionNodeID = &v
}

// GetTransitionDuration returns the TransitionDuration field value if set, zero value otherwise.
func (o *ComponentSetNode) GetTransitionDuration() float32 {
	if o == nil || IsNil(o.TransitionDuration) {
		var ret float32
		return ret
	}
	return *o.TransitionDuration
}

// GetTransitionDurationOk returns a tuple with the TransitionDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetTransitionDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.TransitionDuration) {
		return nil, false
	}
	return o.TransitionDuration, true
}

// HasTransitionDuration returns a boolean if a field has been set.
func (o *ComponentSetNode) HasTransitionDuration() bool {
	if o != nil && !IsNil(o.TransitionDuration) {
		return true
	}

	return false
}

// SetTransitionDuration gets a reference to the given float32 and assigns it to the TransitionDuration field.
func (o *ComponentSetNode) SetTransitionDuration(v float32) {
	o.TransitionDuration = &v
}

// GetTransitionEasing returns the TransitionEasing field value if set, zero value otherwise.
func (o *ComponentSetNode) GetTransitionEasing() EasingType {
	if o == nil || IsNil(o.TransitionEasing) {
		var ret EasingType
		return ret
	}
	return *o.TransitionEasing
}

// GetTransitionEasingOk returns a tuple with the TransitionEasing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetTransitionEasingOk() (*EasingType, bool) {
	if o == nil || IsNil(o.TransitionEasing) {
		return nil, false
	}
	return o.TransitionEasing, true
}

// HasTransitionEasing returns a boolean if a field has been set.
func (o *ComponentSetNode) HasTransitionEasing() bool {
	if o != nil && !IsNil(o.TransitionEasing) {
		return true
	}

	return false
}

// SetTransitionEasing gets a reference to the given EasingType and assigns it to the TransitionEasing field.
func (o *ComponentSetNode) SetTransitionEasing(v EasingType) {
	o.TransitionEasing = &v
}

// GetInteractions returns the Interactions field value if set, zero value otherwise.
func (o *ComponentSetNode) GetInteractions() []Interaction {
	if o == nil || IsNil(o.Interactions) {
		var ret []Interaction
		return ret
	}
	return o.Interactions
}

// GetInteractionsOk returns a tuple with the Interactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetInteractionsOk() ([]Interaction, bool) {
	if o == nil || IsNil(o.Interactions) {
		return nil, false
	}
	return o.Interactions, true
}

// HasInteractions returns a boolean if a field has been set.
func (o *ComponentSetNode) HasInteractions() bool {
	if o != nil && !IsNil(o.Interactions) {
		return true
	}

	return false
}

// SetInteractions gets a reference to the given []Interaction and assigns it to the Interactions field.
func (o *ComponentSetNode) SetInteractions(v []Interaction) {
	o.Interactions = v
}

// GetIndividualStrokeWeights returns the IndividualStrokeWeights field value if set, zero value otherwise.
func (o *ComponentSetNode) GetIndividualStrokeWeights() StrokeWeights {
	if o == nil || IsNil(o.IndividualStrokeWeights) {
		var ret StrokeWeights
		return ret
	}
	return *o.IndividualStrokeWeights
}

// GetIndividualStrokeWeightsOk returns a tuple with the IndividualStrokeWeights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetIndividualStrokeWeightsOk() (*StrokeWeights, bool) {
	if o == nil || IsNil(o.IndividualStrokeWeights) {
		return nil, false
	}
	return o.IndividualStrokeWeights, true
}

// HasIndividualStrokeWeights returns a boolean if a field has been set.
func (o *ComponentSetNode) HasIndividualStrokeWeights() bool {
	if o != nil && !IsNil(o.IndividualStrokeWeights) {
		return true
	}

	return false
}

// SetIndividualStrokeWeights gets a reference to the given StrokeWeights and assigns it to the IndividualStrokeWeights field.
func (o *ComponentSetNode) SetIndividualStrokeWeights(v StrokeWeights) {
	o.IndividualStrokeWeights = &v
}

// GetDevStatus returns the DevStatus field value if set, zero value otherwise.
func (o *ComponentSetNode) GetDevStatus() DevStatusTraitDevStatus {
	if o == nil || IsNil(o.DevStatus) {
		var ret DevStatusTraitDevStatus
		return ret
	}
	return *o.DevStatus
}

// GetDevStatusOk returns a tuple with the DevStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetDevStatusOk() (*DevStatusTraitDevStatus, bool) {
	if o == nil || IsNil(o.DevStatus) {
		return nil, false
	}
	return o.DevStatus, true
}

// HasDevStatus returns a boolean if a field has been set.
func (o *ComponentSetNode) HasDevStatus() bool {
	if o != nil && !IsNil(o.DevStatus) {
		return true
	}

	return false
}

// SetDevStatus gets a reference to the given DevStatusTraitDevStatus and assigns it to the DevStatus field.
func (o *ComponentSetNode) SetDevStatus(v DevStatusTraitDevStatus) {
	o.DevStatus = &v
}

// GetComponentPropertyDefinitions returns the ComponentPropertyDefinitions field value if set, zero value otherwise.
func (o *ComponentSetNode) GetComponentPropertyDefinitions() map[string]ComponentPropertyDefinition {
	if o == nil || IsNil(o.ComponentPropertyDefinitions) {
		var ret map[string]ComponentPropertyDefinition
		return ret
	}
	return o.ComponentPropertyDefinitions
}

// GetComponentPropertyDefinitionsOk returns a tuple with the ComponentPropertyDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSetNode) GetComponentPropertyDefinitionsOk() (map[string]ComponentPropertyDefinition, bool) {
	if o == nil || IsNil(o.ComponentPropertyDefinitions) {
		return map[string]ComponentPropertyDefinition{}, false
	}
	return o.ComponentPropertyDefinitions, true
}

// HasComponentPropertyDefinitions returns a boolean if a field has been set.
func (o *ComponentSetNode) HasComponentPropertyDefinitions() bool {
	if o != nil && !IsNil(o.ComponentPropertyDefinitions) {
		return true
	}

	return false
}

// SetComponentPropertyDefinitions gets a reference to the given map[string]ComponentPropertyDefinition and assigns it to the ComponentPropertyDefinitions field.
func (o *ComponentSetNode) SetComponentPropertyDefinitions(v map[string]ComponentPropertyDefinition) {
	o.ComponentPropertyDefinitions = v
}

func (o ComponentSetNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentSetNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.IsFixed) {
		toSerialize["isFixed"] = o.IsFixed
	}
	toSerialize["scrollBehavior"] = o.ScrollBehavior
	if !IsNil(o.Rotation) {
		toSerialize["rotation"] = o.Rotation
	}
	if !IsNil(o.ComponentPropertyReferences) {
		toSerialize["componentPropertyReferences"] = o.ComponentPropertyReferences
	}
	if o.PluginData != nil {
		toSerialize["pluginData"] = o.PluginData
	}
	if o.SharedPluginData != nil {
		toSerialize["sharedPluginData"] = o.SharedPluginData
	}
	if !IsNil(o.BoundVariables) {
		toSerialize["boundVariables"] = o.BoundVariables
	}
	if !IsNil(o.ExplicitVariableModes) {
		toSerialize["explicitVariableModes"] = o.ExplicitVariableModes
	}
	toSerialize["blendMode"] = o.BlendMode
	if !IsNil(o.Opacity) {
		toSerialize["opacity"] = o.Opacity
	}
	toSerialize["children"] = o.Children
	toSerialize["absoluteBoundingBox"] = o.AbsoluteBoundingBox
	toSerialize["absoluteRenderBounds"] = o.AbsoluteRenderBounds
	if !IsNil(o.PreserveRatio) {
		toSerialize["preserveRatio"] = o.PreserveRatio
	}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.RelativeTransform) {
		toSerialize["relativeTransform"] = o.RelativeTransform
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.LayoutAlign) {
		toSerialize["layoutAlign"] = o.LayoutAlign
	}
	if !IsNil(o.LayoutGrow) {
		toSerialize["layoutGrow"] = o.LayoutGrow
	}
	if !IsNil(o.LayoutPositioning) {
		toSerialize["layoutPositioning"] = o.LayoutPositioning
	}
	if !IsNil(o.MinWidth) {
		toSerialize["minWidth"] = o.MinWidth
	}
	if !IsNil(o.MaxWidth) {
		toSerialize["maxWidth"] = o.MaxWidth
	}
	if !IsNil(o.MinHeight) {
		toSerialize["minHeight"] = o.MinHeight
	}
	if !IsNil(o.MaxHeight) {
		toSerialize["maxHeight"] = o.MaxHeight
	}
	if !IsNil(o.LayoutSizingHorizontal) {
		toSerialize["layoutSizingHorizontal"] = o.LayoutSizingHorizontal
	}
	if !IsNil(o.LayoutSizingVertical) {
		toSerialize["layoutSizingVertical"] = o.LayoutSizingVertical
	}
	toSerialize["clipsContent"] = o.ClipsContent
	if !IsNil(o.Background) {
		toSerialize["background"] = o.Background
	}
	if !IsNil(o.BackgroundColor) {
		toSerialize["backgroundColor"] = o.BackgroundColor
	}
	if !IsNil(o.LayoutGrids) {
		toSerialize["layoutGrids"] = o.LayoutGrids
	}
	if !IsNil(o.OverflowDirection) {
		toSerialize["overflowDirection"] = o.OverflowDirection
	}
	if !IsNil(o.LayoutMode) {
		toSerialize["layoutMode"] = o.LayoutMode
	}
	if !IsNil(o.PrimaryAxisSizingMode) {
		toSerialize["primaryAxisSizingMode"] = o.PrimaryAxisSizingMode
	}
	if !IsNil(o.CounterAxisSizingMode) {
		toSerialize["counterAxisSizingMode"] = o.CounterAxisSizingMode
	}
	if !IsNil(o.PrimaryAxisAlignItems) {
		toSerialize["primaryAxisAlignItems"] = o.PrimaryAxisAlignItems
	}
	if !IsNil(o.CounterAxisAlignItems) {
		toSerialize["counterAxisAlignItems"] = o.CounterAxisAlignItems
	}
	if !IsNil(o.PaddingLeft) {
		toSerialize["paddingLeft"] = o.PaddingLeft
	}
	if !IsNil(o.PaddingRight) {
		toSerialize["paddingRight"] = o.PaddingRight
	}
	if !IsNil(o.PaddingTop) {
		toSerialize["paddingTop"] = o.PaddingTop
	}
	if !IsNil(o.PaddingBottom) {
		toSerialize["paddingBottom"] = o.PaddingBottom
	}
	if !IsNil(o.ItemSpacing) {
		toSerialize["itemSpacing"] = o.ItemSpacing
	}
	if !IsNil(o.ItemReverseZIndex) {
		toSerialize["itemReverseZIndex"] = o.ItemReverseZIndex
	}
	if !IsNil(o.StrokesIncludedInLayout) {
		toSerialize["strokesIncludedInLayout"] = o.StrokesIncludedInLayout
	}
	if !IsNil(o.LayoutWrap) {
		toSerialize["layoutWrap"] = o.LayoutWrap
	}
	if !IsNil(o.CounterAxisSpacing) {
		toSerialize["counterAxisSpacing"] = o.CounterAxisSpacing
	}
	if !IsNil(o.CounterAxisAlignContent) {
		toSerialize["counterAxisAlignContent"] = o.CounterAxisAlignContent
	}
	if !IsNil(o.CornerRadius) {
		toSerialize["cornerRadius"] = o.CornerRadius
	}
	if !IsNil(o.CornerSmoothing) {
		toSerialize["cornerSmoothing"] = o.CornerSmoothing
	}
	if !IsNil(o.RectangleCornerRadii) {
		toSerialize["rectangleCornerRadii"] = o.RectangleCornerRadii
	}
	toSerialize["fills"] = o.Fills
	if !IsNil(o.Styles) {
		toSerialize["styles"] = o.Styles
	}
	if !IsNil(o.Strokes) {
		toSerialize["strokes"] = o.Strokes
	}
	if !IsNil(o.StrokeWeight) {
		toSerialize["strokeWeight"] = o.StrokeWeight
	}
	if !IsNil(o.StrokeAlign) {
		toSerialize["strokeAlign"] = o.StrokeAlign
	}
	if !IsNil(o.StrokeJoin) {
		toSerialize["strokeJoin"] = o.StrokeJoin
	}
	if !IsNil(o.StrokeDashes) {
		toSerialize["strokeDashes"] = o.StrokeDashes
	}
	if !IsNil(o.FillOverrideTable) {
		toSerialize["fillOverrideTable"] = o.FillOverrideTable
	}
	if !IsNil(o.FillGeometry) {
		toSerialize["fillGeometry"] = o.FillGeometry
	}
	if !IsNil(o.StrokeGeometry) {
		toSerialize["strokeGeometry"] = o.StrokeGeometry
	}
	if !IsNil(o.StrokeCap) {
		toSerialize["strokeCap"] = o.StrokeCap
	}
	if !IsNil(o.StrokeMiterAngle) {
		toSerialize["strokeMiterAngle"] = o.StrokeMiterAngle
	}
	if !IsNil(o.ExportSettings) {
		toSerialize["exportSettings"] = o.ExportSettings
	}
	toSerialize["effects"] = o.Effects
	if !IsNil(o.IsMask) {
		toSerialize["isMask"] = o.IsMask
	}
	if !IsNil(o.MaskType) {
		toSerialize["maskType"] = o.MaskType
	}
	if !IsNil(o.IsMaskOutline) {
		toSerialize["isMaskOutline"] = o.IsMaskOutline
	}
	if !IsNil(o.TransitionNodeID) {
		toSerialize["transitionNodeID"] = o.TransitionNodeID
	}
	if !IsNil(o.TransitionDuration) {
		toSerialize["transitionDuration"] = o.TransitionDuration
	}
	if !IsNil(o.TransitionEasing) {
		toSerialize["transitionEasing"] = o.TransitionEasing
	}
	if !IsNil(o.Interactions) {
		toSerialize["interactions"] = o.Interactions
	}
	if !IsNil(o.IndividualStrokeWeights) {
		toSerialize["individualStrokeWeights"] = o.IndividualStrokeWeights
	}
	if !IsNil(o.DevStatus) {
		toSerialize["devStatus"] = o.DevStatus
	}
	if !IsNil(o.ComponentPropertyDefinitions) {
		toSerialize["componentPropertyDefinitions"] = o.ComponentPropertyDefinitions
	}
	return toSerialize, nil
}

func (o *ComponentSetNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"type",
		"scrollBehavior",
		"blendMode",
		"children",
		"absoluteBoundingBox",
		"absoluteRenderBounds",
		"clipsContent",
		"fills",
		"effects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComponentSetNode := _ComponentSetNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComponentSetNode)

	if err != nil {
		return err
	}

	*o = ComponentSetNode(varComponentSetNode)

	return err
}

type NullableComponentSetNode struct {
	value *ComponentSetNode
	isSet bool
}

func (v NullableComponentSetNode) Get() *ComponentSetNode {
	return v.value
}

func (v *NullableComponentSetNode) Set(val *ComponentSetNode) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentSetNode) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentSetNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentSetNode(val *ComponentSetNode) *NullableComponentSetNode {
	return &NullableComponentSetNode{value: val, isSet: true}
}

func (v NullableComponentSetNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentSetNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



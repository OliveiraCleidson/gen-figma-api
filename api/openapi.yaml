openapi: 3.1.0
info:
  contact:
    email: support@figma.com
  description: |-
    This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).

    Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
  termsOfService: https://www.figma.com/developer-terms/
  title: Figma API
  version: 0.20.0
externalDocs:
  description: Figma REST API Documentation
  url: https://www.figma.com/developers/api
servers:
- url: https://api.figma.com
tags:
- description: "Get file JSON, images, and other file-related content."
  externalDocs:
    description: File endpoints documentation
    url: https://www.figma.com/developers/api#files
  name: Files
- description: Interact with file comments.
  externalDocs:
    description: Comment endpoints documentation
    url: https://www.figma.com/developers/api#comments
  name: Comments
- description: Interact with reactions to file comments.
  externalDocs:
    description: Comment endpoints documentation
    url: https://www.figma.com/developers/api#comments
  name: Comment Reactions
- description: Get information about projects and files in teams.
  externalDocs:
    description: Project endpoints documentation
    url: https://www.figma.com/developers/api#projects
  name: Projects
- description: Get information about the currently authenticated user.
  externalDocs:
    description: User endpoints documentation
    url: https://www.figma.com/developers/api#users
  name: Users
- description: Get information about published components.
  externalDocs:
    description: Component and style endpoints documentation
    url: https://www.figma.com/developers/api#library-items
  name: Components
- description: Get information about published component sets.
  externalDocs:
    description: Component and style endpoints documentation
    url: https://www.figma.com/developers/api#library-items
  name: Component Sets
- description: Get information about published styles.
  externalDocs:
    description: Component and style endpoints documentation
    url: https://www.figma.com/developers/api#library-items
  name: Styles
- description: Interact with team webhooks as a team admin.
  externalDocs:
    description: Webhook endpoints documentation
    url: https://www.figma.com/developers/api#webhooks_v2
  name: Webhooks
- description: Get activity logs as an organization admin.
  externalDocs:
    description: Activity log endpoints documentation
    url: https://www.figma.com/developers/api#activity_logs
  name: Activity Logs
- description: Get purchase information for your Community resources.
  externalDocs:
    description: Payment endpoints documentation
    url: https://www.figma.com/developers/api#payments
  name: Payments
- description: Interact with variables in an Enterprise organization.
  externalDocs:
    description: Variables endpoints documentation
    url: https://www.figma.com/developers/api#variables
  name: Variables
- description: Interact with dev resources in Figma Dev Mode.
  externalDocs:
    description: Dev resource endpoints documentation
    url: https://www.figma.com/developers/api#dev-resources
  name: Dev Resources
- description: Get analytics data for your published libraries.
  externalDocs:
    description: Library analytics endpoints documentation
    url: https://www.figma.com/developers/api#library-analytics
  name: Library Analytics
paths:
  /v1/files/{file_key}:
    get:
      description: |-
        Returns the document identified by `file_key` as a JSON object. The file key can be parsed from any Figma file url: `https://www.figma.com/file/{file_key}/{title}`.

        The `document` property contains a node of type `DOCUMENT`.

        The `components` property contains a mapping from node IDs to component metadata. This is to help you determine which components each instance comes from.
      operationId: getFile
      parameters:
      - description: File to export JSON from. This can be a file key or branch key.
          Use `GET /v1/files/:key` with the `branch_data` query param to get the branch
          key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: A specific version ID to get. Omitting this will get the current
          version of the file.
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Comma separated list of nodes that you care about in the document. If specified, only a subset of the document will be returned corresponding to the nodes listed, their children, and everything between the root node and the listed nodes.

          Note: There may be other nodes included in the returned JSON that are outside the ancestor chains of the desired nodes. The response may also include dependencies of anything in the nodes' subtrees. For example, if a node subtree contains an instance of a local component that lives elsewhere in that file, that component and its ancestor chain will also be included.

          For historical reasons, top-level canvas nodes are always returned, regardless of whether they are listed in the `ids` parameter. This quirk may be removed in a future version of the API.
        explode: true
        in: query
        name: ids
        required: false
        schema:
          type: string
        style: form
      - description: "Positive integer representing how deep into the document tree\
          \ to traverse. For example, setting this to 1 returns only Pages, setting\
          \ it to 2 returns Pages and all top level objects on each page. Not setting\
          \ this parameter returns all nodes."
        explode: true
        in: query
        name: depth
        required: false
        schema:
          type: number
        style: form
      - description: Set to "paths" to export vector data.
        explode: true
        in: query
        name: geometry
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of plugin IDs and/or the string "shared".
          Any data present in the document written by those plugins will be included
          in the result in the `pluginData` and `sharedPluginData` properties.
        explode: true
        in: query
        name: plugin_data
        required: false
        schema:
          type: string
        style: form
      - description: "Returns branch metadata for the requested file. If the file\
          \ is a branch, the main file's key will be included in the returned response.\
          \ If the file has branches, their metadata will be included in the returned\
          \ response. Default: false."
        explode: true
        in: query
        name: branch_data
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetFileResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get file JSON
      tags:
      - Files
  /v1/files/{file_key}/nodes:
    get:
      description: |-
        Returns the nodes referenced to by `ids` as a JSON object. The nodes are retrieved from the Figma file referenced to by `file_key`.

        The node ID and file key can be parsed from any Figma node url: `https://www.figma.com/file/{file_key}/{title}?node-id={id}`

        The `name`, `lastModified`, `thumbnailUrl`, `editorType`, and `version` attributes are all metadata of the specified file.

        The `linkAccess` field describes the file link share permission level. There are 5 types of permissions a shared link can have: `"inherit"`, `"view"`, `"edit"`, `"org_view"`, and `"org_edit"`. `"inherit"` is the default permission applied to files created in a team project, and will inherit the project's permissions. `"org_view"` and `"org_edit"` restrict the link to org users.

        The `document` attribute contains a Node of type `DOCUMENT`.

        The `components` key contains a mapping from node IDs to component metadata. This is to help you determine which components each instance comes from.

        By default, no vector data is returned. To return vector data, pass the geometry=paths parameter to the endpoint.
        Each node can also inherit properties from applicable styles. The styles key contains a mapping from style IDs to style metadata.

        Important: the nodes map may contain values that are `null`. This may be due to the node id not existing within the specified file.
      operationId: getFileNodes
      parameters:
      - description: File to export JSON from. This can be a file key or branch key.
          Use `GET /v1/files/:key` with the `branch_data` query param to get the branch
          key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: A comma separated list of node IDs to retrieve and convert.
        explode: true
        in: query
        name: ids
        required: true
        schema:
          type: string
        style: form
      - description: A specific version ID to get. Omitting this will get the current
          version of the file.
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Positive integer representing how deep into the node tree to traverse. For example, setting this to 1 will return only the children directly underneath the desired nodes. Not setting this parameter returns all nodes.

          Note: this parameter behaves differently from the same parameter in the `GET /v1/files/:key` endpoint. In this endpoint, the depth will be counted starting from the desired node rather than the document root node.
        explode: true
        in: query
        name: depth
        required: false
        schema:
          type: number
        style: form
      - description: Set to "paths" to export vector data.
        explode: true
        in: query
        name: geometry
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of plugin IDs and/or the string "shared".
          Any data present in the document written by those plugins will be included
          in the result in the `pluginData` and `sharedPluginData` properties.
        explode: true
        in: query
        name: plugin_data
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetFileNodesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get file JSON for specific nodes
      tags:
      - Files
  /v1/images/{file_key}:
    get:
      description: |
        Renders images from a file.

        If no error occurs, `"images"` will be populated with a map from node IDs to URLs of the rendered images, and `"status"` will be omitted. The image assets will expire after 30 days. Images up to 32 megapixels can be exported. Any images that are larger will be scaled down.

        Important: the image map may contain values that are `null`. This indicates that rendering of that specific node has failed. This may be due to the node id not existing, or other reasons such has the node having no renderable components. It is guaranteed that any node that was requested for rendering will be represented in this map whether or not the render succeeded.

        To render multiple images from the same file, use the `ids` query parameter to specify multiple node ids.

        ```
        GET /v1/images/:key?ids=1:2,1:3,1:4
        ```
      operationId: getImages
      parameters:
      - description: File to export images from. This can be a file key or branch
          key. Use `GET /v1/files/:key` with the `branch_data` query param to get
          the branch key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: A comma separated list of node IDs to render.
        explode: true
        in: query
        name: ids
        required: true
        schema:
          type: string
        style: form
      - description: A specific version ID to get. Omitting this will get the current
          version of the file.
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: "A number between 0.01 and 4, the image scaling factor."
        explode: true
        in: query
        name: scale
        required: false
        schema:
          maximum: 4
          minimum: 0.01
          type: number
        style: form
      - description: A string enum for the image output format.
        explode: true
        in: query
        name: format
        required: false
        schema:
          default: png
          enum:
          - jpg
          - png
          - svg
          - pdf
          type: string
        style: form
      - description: |-
          Whether text elements are rendered as outlines (vector paths) or as `<text>` elements in SVGs.

          Rendering text elements as outlines guarantees that the text looks exactly the same in the SVG as it does in the browser/inside Figma.

          Exporting as `<text>` allows text to be selectable inside SVGs and generally makes the SVG easier to read. However, this relies on the browser's rendering engine which can vary between browsers and/or operating systems. As such, visual accuracy is not guaranteed as the result could look different than in Figma.
        explode: true
        in: query
        name: svg_outline_text
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: Whether to include id attributes for all SVG elements. Adds the
          layer name to the `id` attribute of an svg element.
        explode: true
        in: query
        name: svg_include_id
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Whether to include node id attributes for all SVG elements. Adds
          the node id to a `data-node-id` attribute of an svg element.
        explode: true
        in: query
        name: svg_include_node_id
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Whether to simplify inside/outside strokes and use stroke attribute
          if possible instead of `<mask>`.
        explode: true
        in: query
        name: svg_simplify_stroke
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: "Whether content that overlaps the node should be excluded from\
          \ rendering. Passing false (i.e., rendering overlaps) may increase processing\
          \ time, since more of the document must be included in rendering."
        explode: true
        in: query
        name: contents_only
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: Use the full dimensions of the node regardless of whether or
          not it is cropped or the space around it is empty. Use this to export text
          nodes without cropping.
        explode: true
        in: query
        name: use_absolute_bounds
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetImagesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Render images of file nodes
      tags:
      - Files
  /v1/files/{file_key}/images:
    get:
      description: |-
        Returns download links for all images present in image fills in a document. Image fills are how Figma represents any user supplied images. When you drag an image into Figma, we create a rectangle with a single fill that represents the image, and the user is able to transform the rectangle (and properties on the fill) as they wish.

        This endpoint returns a mapping from image references to the URLs at which the images may be download. Image URLs will expire after no more than 14 days. Image references are located in the output of the GET files endpoint under the `imageRef` attribute in a `Paint`.
      operationId: getImageFills
      parameters:
      - description: File to get image URLs from. This can be a file key or branch
          key. Use `GET /v1/files/:key` with the `branch_data` query param to get
          the branch key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetImageFillsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get image fills
      tags:
      - Files
  /v1/teams/{team_id}/projects:
    get:
      description: "You can use this endpoint to get a list of all the Projects within\
        \ the specified team. This will only return projects visible to the authenticated\
        \ user or owner of the developer token. Note: it is not currently possible\
        \ to programmatically obtain the team id of a user just from a token. To obtain\
        \ a team id, navigate to a team page of a team you are a part of. The team\
        \ id will be present in the URL after the word team and before your team name."
      operationId: getTeamProjects
      parameters:
      - description: ID of the team to list projects from
        explode: false
        in: path
        name: team_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetTeamProjectsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get projects in a team
      tags:
      - Projects
  /v1/projects/{project_id}/files:
    get:
      description: Get a list of all the Files within the specified project.
      operationId: getProjectFiles
      parameters:
      - description: ID of the project to list files from
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          type: string
        style: simple
      - description: Returns branch metadata in the response for each main file with
          a branch inside the project.
        explode: true
        in: query
        name: branch_data
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetProjectFilesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get files in a project
      tags:
      - Projects
  /v1/files/{file_key}/versions:
    get:
      description: "This endpoint fetches the version history of a file, allowing\
        \ you to see the progression of a file over time. You can then use this information\
        \ to render a specific version of the file, via another endpoint."
      operationId: getFileVersions
      parameters:
      - description: File to get version history from. This can be a file key or branch
          key. Use `GET /v1/files/:key` with the `branch_data` query param to get
          the branch key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: "The number of items returned in a page of the response. If not\
          \ included, `page_size` is `30`."
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          maximum: 50
          type: number
        style: form
      - description: "A version ID for one of the versions in the history. Gets versions\
          \ before this ID. Used for paginating. If the response is not paginated,\
          \ this link returns the same data in the current response."
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: number
        style: form
      - description: "A version ID for one of the versions in the history. Gets versions\
          \ after this ID. Used for paginating. If the response is not paginated,\
          \ this property is not included."
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetFileVersionsResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get versions of a file
      tags:
      - Files
  /v1/files/{file_key}/comments:
    get:
      description: Gets a list of comments left on the file.
      operationId: getComments
      parameters:
      - description: File to get comments from. This can be a file key or branch key.
          Use `GET /v1/files/:key` with the `branch_data` query param to get the branch
          key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: "If enabled, will return comments as their markdown equivalents\
          \ when applicable."
        explode: true
        in: query
        name: as_md
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetCommentsResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get comments in a file
      tags:
      - Comments
    post:
      description: Posts a new comment on the file.
      operationId: postComment
      parameters:
      - description: File to add comments in. This can be a file key or branch key.
          Use `GET /v1/files/:key` with the `branch_data` query param to get the branch
          key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postComment_request'
        description: Comment to post.
        required: true
      responses:
        "200":
          $ref: '#/components/responses/PostCommentResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_comments:write
      summary: Add a comment to a file
      tags:
      - Comments
  /v1/files/{file_key}/comments/{comment_id}:
    delete:
      description: Deletes a specific comment. Only the person who made the comment
        is allowed to delete it.
      operationId: deleteComment
      parameters:
      - description: File to delete comment from. This can be a file key or branch
          key. Use `GET /v1/files/:key` with the `branch_data` query param to get
          the branch key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: Comment id of comment to delete
        explode: false
        in: path
        name: comment_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/DeleteCommentResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_comments:write
      summary: Delete a comment
      tags:
      - Comments
  /v1/files/{file_key}/comments/{comment_id}/reactions:
    delete:
      description: Deletes a specific comment reaction. Only the person who made the
        reaction is allowed to delete it.
      operationId: deleteCommentReaction
      parameters:
      - description: File to delete comment reaction from. This can be a file key
          or branch key. Use `GET /v1/files/:key` with the `branch_data` query param
          to get the branch key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: ID of comment to delete reaction from.
        explode: false
        in: path
        name: comment_id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: emoji
        required: true
        schema:
          $ref: '#/components/schemas/Emoji'
        style: form
      responses:
        "200":
          $ref: '#/components/responses/DeleteCommentReactionResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_comments:write
      summary: Delete a reaction
      tags:
      - Comment Reactions
    get:
      description: Gets a paginated list of reactions left on the comment.
      operationId: getCommentReactions
      parameters:
      - description: File to get comment containing reactions from. This can be a
          file key or branch key. Use `GET /v1/files/:key` with the `branch_data`
          query param to get the branch key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: ID of comment to get reactions from.
        explode: false
        in: path
        name: comment_id
        required: true
        schema:
          type: string
        style: simple
      - description: "Cursor for pagination, retrieved from the response of the previous\
          \ call."
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetCommentReactionsResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get reactions for a comment
      tags:
      - Comment Reactions
    post:
      description: Posts a new comment reaction on a file comment.
      operationId: postCommentReaction
      parameters:
      - description: File to post comment reactions to. This can be a file key or
          branch key. Use `GET /v1/files/:key` with the `branch_data` query param
          to get the branch key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: ID of comment to react to.
        explode: false
        in: path
        name: comment_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postCommentReaction_request'
        description: Reaction to post.
        required: true
      responses:
        "200":
          $ref: '#/components/responses/PostCommentReactionResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_comments:write
      summary: Add a reaction to a comment
      tags:
      - Comment Reactions
  /v1/me:
    get:
      description: Returns the user information for the currently authenticated user.
      operationId: getMe
      responses:
        "200":
          $ref: '#/components/responses/GetMeResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get current user
      tags:
      - Users
  /v1/teams/{team_id}/components:
    get:
      description: Get a paginated list of published components within a team library.
      operationId: getTeamComponents
      parameters:
      - description: Id of the team to list components from.
        explode: false
        in: path
        name: team_id
        required: true
        schema:
          type: string
        style: simple
      - description: Number of items to return in a paged list of results. Defaults
          to 30.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 30
          type: number
        style: form
      - description: Cursor indicating which id after which to start retrieving components
          for. Exclusive with before. The cursor value is an internally tracked integer
          that doesn't correspond to any Ids.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: number
        style: form
      - description: Cursor indicating which id before which to start retrieving components
          for. Exclusive with after. The cursor value is an internally tracked integer
          that doesn't correspond to any Ids.
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetTeamComponentsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get team components
      tags:
      - Components
  /v1/files/{file_key}/components:
    get:
      description: Get a list of published components within a file library.
      operationId: getFileComponents
      parameters:
      - description: "File to list components from. This must be a main file key,\
          \ not a branch key, as it is not possible to publish from branches."
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetFileComponentsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get file components
      tags:
      - Components
  /v1/components/{key}:
    get:
      description: Get metadata on a component by key.
      operationId: getComponent
      parameters:
      - description: The unique identifier of the component.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetComponentResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get component
      tags:
      - Components
  /v1/teams/{team_id}/component_sets:
    get:
      description: Get a paginated list of published component sets within a team
        library.
      operationId: getTeamComponentSets
      parameters:
      - description: Id of the team to list component sets from.
        explode: false
        in: path
        name: team_id
        required: true
        schema:
          type: string
        style: simple
      - description: Number of items to return in a paged list of results. Defaults
          to 30.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 30
          type: number
        style: form
      - description: Cursor indicating which id after which to start retrieving component
          sets for. Exclusive with before. The cursor value is an internally tracked
          integer that doesn't correspond to any Ids.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: number
        style: form
      - description: Cursor indicating which id before which to start retrieving component
          sets for. Exclusive with after. The cursor value is an internally tracked
          integer that doesn't correspond to any Ids.
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetTeamComponentSetsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get team component sets
      tags:
      - Component Sets
  /v1/files/{file_key}/component_sets:
    get:
      description: Get a list of published component sets within a file library.
      operationId: getFileComponentSets
      parameters:
      - description: "File to list component sets from. This must be a main file key,\
          \ not a branch key, as it is not possible to publish from branches."
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetFileComponentSetsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get file component sets
      tags:
      - Component Sets
  /v1/component_sets/{key}:
    get:
      description: Get metadata on a component set by key.
      operationId: getComponentSet
      parameters:
      - description: The unique identifier of the component set.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetComponentSetResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get component set
      tags:
      - Component Sets
  /v1/teams/{team_id}/styles:
    get:
      description: Get a paginated list of published styles within a team library.
      operationId: getTeamStyles
      parameters:
      - description: Id of the team to list styles from.
        explode: false
        in: path
        name: team_id
        required: true
        schema:
          type: string
        style: simple
      - description: Number of items to return in a paged list of results. Defaults
          to 30.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 30
          type: number
        style: form
      - description: Cursor indicating which id after which to start retrieving styles
          for. Exclusive with before. The cursor value is an internally tracked integer
          that doesn't correspond to any Ids.
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: number
        style: form
      - description: Cursor indicating which id before which to start retrieving styles
          for. Exclusive with after. The cursor value is an internally tracked integer
          that doesn't correspond to any Ids.
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetTeamStylesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get team styles
      tags:
      - Styles
  /v1/files/{file_key}/styles:
    get:
      description: Get a list of published styles within a file library.
      operationId: getFileStyles
      parameters:
      - description: "File to list styles from. This must be a main file key, not\
          \ a branch key, as it is not possible to publish from branches."
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetFileStylesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get file styles
      tags:
      - Styles
  /v1/styles/{key}:
    get:
      description: Get metadata on a style by key.
      operationId: getStyle
      parameters:
      - description: The unique identifier of the style.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetStyleResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrMessage'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get style
      tags:
      - Styles
  /v2/webhooks:
    post:
      callbacks:
        ping:
          '{$request.body#/endpoint}':
            post:
              description: "Triggers when a webhook is created. Used for debugging.\
                \ Cannot be subscribed to, all webhooks will receive `PING` events."
              operationId: PingPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/WebhookPingPayload'
                description: The webhook will send a PING event to the endpoint when
                  it is created.
                required: true
              responses:
                "200":
                  description: |-
                    Your server implementation should return this HTTP status code
                                        if the data was received successfully
                "400":
                  description: "If your server returns a non-200 status code, or takes\
                    \ too long, the Figma API will treat this as an error. Figma retries\
                    \ failed requests 3 times with an exponential backoff strategy."
              security:
              - PersonalAccessToken: []
              - OAuth2:
                - webhooks:write
              summary: Ping event
              x-callback-request: true
        fileUpdate:
          '{$request.body#/endpoint}':
            post:
              description: Triggers within 30 minutes of editing inactivity in a file.
              operationId: FileUpdatePost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/WebhookFileUpdatePayload'
                description: "This is useful when you want to stay up-to-date with\
                  \ the contents of a file. For example, you could generate a static\
                  \ website from your Figma document and keep it always up-to-date\
                  \ with this webhook."
                required: true
              responses:
                "200":
                  description: |-
                    Your server implementation should return this HTTP status code
                                        if the data was received successfully
                "400":
                  description: "If your server returns a non-200 status code, or takes\
                    \ too long, the Figma API will treat this as an error. Figma retries\
                    \ failed requests 3 times with an exponential backoff strategy."
              security:
              - PersonalAccessToken: []
              - OAuth2:
                - webhooks:write
              summary: File update event
              x-callback-request: true
        fileVersionUpdate:
          '{$request.body#/endpoint}':
            post:
              description: Triggers whenever a named version is created in the version
                history of a file.
              operationId: FileVersionUpdatePost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/WebhookFileVersionUpdatePayload'
                description: "This is useful for workflow integrations. For example,\
                  \ suppose you have a Figma document with icon assets. When the design\
                  \ for an asset is updated and ready to publish, you can have a member\
                  \ of the team tag that version in the version history and then use\
                  \ this webhook event to generate and deploy your new asset version."
                required: true
              responses:
                "200":
                  description: |-
                    Your server implementation should return this HTTP status code
                                        if the data was received successfully
                "400":
                  description: "If your server returns a non-200 status code, or takes\
                    \ too long, the Figma API will treat this as an error. Figma retries\
                    \ failed requests 3 times with an exponential backoff strategy."
              security:
              - PersonalAccessToken: []
              - OAuth2:
                - webhooks:write
              summary: File version update event
              x-callback-request: true
        fileDelete:
          '{$request.body#/endpoint}':
            post:
              description: "Triggers whenever a file has been deleted. If you subscribe\
                \ to `FILE_UPDATE`, you automatically get these notifications. Note\
                \ that this does not trigger on all files within a folder, if the\
                \ folder is deleted."
              operationId: FileDeletePost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/WebhookFileDeletePayload'
                description: "Note if a folder is deleted, this event will not trigger\
                  \ for files within the folder."
                required: true
              responses:
                "200":
                  description: |-
                    Your server implementation should return this HTTP status code
                                        if the data was received successfully
                "400":
                  description: "If your server returns a non-200 status code, or takes\
                    \ too long, the Figma API will treat this as an error. Figma retries\
                    \ failed requests 3 times with an exponential backoff strategy."
              security:
              - PersonalAccessToken: []
              - OAuth2:
                - webhooks:write
              summary: File delete event
              x-callback-request: true
        libraryPublish:
          '{$request.body#/endpoint}':
            post:
              description: Triggers whenever a library file is published.
              operationId: LibraryPublishPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/WebhookLibraryPublishPayload'
                description: |-
                  This is useful for workflow integrations. This webhook could integrate with Slack, Asana or Jira, notifying designers to modify their assets when new components are published.

                  Note: when a library is published, a separate `LIBRARY_PUBLISH` event will be triggered for each type of library asset (components, styles, and variables) that has changes.
                required: true
              responses:
                "200":
                  description: |-
                    Your server implementation should return this HTTP status code
                                        if the data was received successfully
                "400":
                  description: "If your server returns a non-200 status code, or takes\
                    \ too long, the Figma API will treat this as an error. Figma retries\
                    \ failed requests 3 times with an exponential backoff strategy."
              security:
              - PersonalAccessToken: []
              - OAuth2:
                - webhooks:write
              summary: Library publish event
              x-callback-request: true
        fileComment:
          '{$request.body#/endpoint}':
            post:
              description: Triggers when someone comments on a file.
              operationId: FileCommentPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/WebhookFileCommentPayload'
                description: This webhook could integrate with Asana or Jira and automatically
                  create tasks whenever a user comments. It could also integrate with
                  Slack and notify mentioned users.
                required: true
              responses:
                "200":
                  description: |-
                    Your server implementation should return this HTTP status code
                                        if the data was received successfully
                "400":
                  description: "If your server returns a non-200 status code, or takes\
                    \ too long, the Figma API will treat this as an error. Figma retries\
                    \ failed requests 3 times with an exponential backoff strategy."
              security:
              - PersonalAccessToken: []
              - OAuth2:
                - webhooks:write
              summary: File comment event
              x-callback-request: true
      description: "Create a new webhook which will call the specified endpoint when\
        \ the event triggers. By default, this webhook will automatically send a PING\
        \ event to the endpoint when it is created. If this behavior is not desired,\
        \ you can create the webhook and set the status to PAUSED and reactivate it\
        \ later."
      operationId: postWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postWebhook_request'
        description: The webhook to create.
        required: true
      responses:
        "200":
          $ref: '#/components/responses/PostWebhookResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - webhooks:write
      summary: Create a webhook
      tags:
      - Webhooks
  /v2/webhooks/{webhook_id}:
    delete:
      description: Deletes the specified webhook. This operation cannot be reversed.
      operationId: deleteWebhook
      parameters:
      - description: ID of webhook to delete
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/DeleteWebhookResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - webhooks:write
      summary: Delete a webhook
      tags:
      - Webhooks
    get:
      description: Get a webhook by ID.
      operationId: getWebhook
      parameters:
      - description: ID of webhook to get
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetWebhookResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get a webhook
      tags:
      - Webhooks
    put:
      description: Update a webhook by ID.
      operationId: putWebhook
      parameters:
      - description: ID of webhook to update
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/putWebhook_request'
        description: The webhook to update.
        required: true
      responses:
        "200":
          $ref: '#/components/responses/PutWebhookResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - webhooks:write
      summary: Update a webhook
      tags:
      - Webhooks
  /v2/teams/{team_id}/webhooks:
    get:
      description: Returns all webhooks registered under the specified team.
      operationId: getTeamWebhooks
      parameters:
      - description: ID of team to get webhooks for
        explode: false
        in: path
        name: team_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetTeamWebhooksResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrMessage'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrMessage'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get team webhooks
      tags:
      - Webhooks
  /v2/webhooks/{webhook_id}/requests:
    get:
      description: Returns all webhook requests sent within the last week. Useful
        for debugging.
      operationId: getWebhookRequests
      parameters:
      - description: The id of the webhook subscription you want to see events from
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetWebhookRequestsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrMessage'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrMessage'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - files:read
      summary: Get webhook requests
      tags:
      - Webhooks
  /v1/activity_logs:
    get:
      description: Returns a list of activity log events
      operationId: getActivityLogs
      parameters:
      - description: Event type(s) to include in the response. Can have multiple values
          separated by comma. All events are returned by default.
        explode: true
        in: query
        name: events
        required: false
        schema:
          type: string
        style: form
      - description: Unix timestamp of the least recent event to include. This param
          defaults to one year ago if unspecified. Events prior to one year ago are
          not available.
        explode: true
        in: query
        name: start_time
        required: false
        schema:
          type: number
        style: form
      - description: Unix timestamp of the most recent event to include. This param
          defaults to the current timestamp if unspecified.
        explode: true
        in: query
        name: end_time
        required: false
        schema:
          type: number
        style: form
      - description: Maximum number of events to return. This param defaults to 1000
          if unspecified.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: number
        style: form
      - description: Event order by timestamp. This param can be either "asc" (default)
          or "desc".
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: asc
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetActivityLogsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - OrgOAuth2:
        - org:activity_log_read
      summary: Get activity logs
      tags:
      - Activity Logs
  /v1/payments:
    get:
      description: |-
        There are two methods to query for a user's payment information on a plugin, widget, or Community file. The first method, using plugin payment tokens, is typically used when making queries from a plugin's or widget's code. The second method, providing a user ID and resource ID, is typically used when making queries from anywhere else.

        Note that you can only query for resources that you own. In most cases, this means that you can only query resources that you originally created.
      operationId: getPayments
      parameters:
      - description: Short-lived token returned from "getPluginPaymentTokenAsync"
          in the plugin payments API and used to authenticate to this endpoint. Read
          more about generating this token through "Calling the Payments REST API
          from a plugin or widget" below.
        explode: true
        in: query
        name: plugin_payment_token
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the user to query payment information about. You can
          get the user ID by having the user OAuth2 to the Figma REST API.
        explode: true
        in: query
        name: user_id
        required: false
        schema:
          type: number
        style: form
      - description: "The ID of the Community file to query a user's payment information\
          \ on. You can get the Community file ID from the file's Community page (look\
          \ for the number after \"file/\" in the URL). Provide exactly one of \"\
          community_file_id\", \"plugin_id\", or \"widget_id\"."
        explode: true
        in: query
        name: community_file_id
        required: false
        schema:
          type: number
        style: form
      - description: "The ID of the plugin to query a user's payment information on.\
          \ You can get the plugin ID from the plugin's manifest, or from the plugin's\
          \ Community page (look for the number after \"plugin/\" in the URL). Provide\
          \ exactly one of \"community_file_id\", \"plugin_id\", or \"widget_id\"."
        explode: true
        in: query
        name: plugin_id
        required: false
        schema:
          type: number
        style: form
      - description: "The ID of the widget to query a user's payment information on.\
          \ You can get the widget ID from the widget's manifest, or from the widget's\
          \ Community page (look for the number after \"widget/\" in the URL). Provide\
          \ exactly one of \"community_file_id\", \"plugin_id\", or \"widget_id\"."
        explode: true
        in: query
        name: widget_id
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetPaymentsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      summary: Get payments
      tags:
      - Payments
  /v1/files/{file_key}/variables/local:
    get:
      description: "**This API is available to full members of Enterprise orgs.**\n\
        \nThe `GET /v1/files/:file_key/variables/local` endpoint lets you enumerate\
        \ local variables created in the file and remote variables used in the file.\
        \ Remote variables are referenced by their `subscribed_id`.\n\nAs a part of\
        \ the Variables related API additions, the `GET /v1/files/:file_key` endpoint\
        \ now returns a `boundVariables` property, containing the `variableId` of\
        \ the bound variable. The `GET /v1/files/:file_key/variables/local` endpoint\
        \ can be used to get the full variable or variable collection object.\n\n\
        Note that `GET /v1/files/:file_key/variables/published` does not return modes.\
        \ Instead, you will need to use the `GET /v1/files/:file_key/variables/local`\
        \ endpoint, in the same file, to examine the mode values.\n        "
      operationId: getLocalVariables
      parameters:
      - description: File to get variables from. This can be a file key or branch
          key. Use `GET /v1/files/:key` with the `branch_data` query param to get
          the branch key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetLocalVariablesResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrorBoolean'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_variables:read
      summary: Get local variables
      tags:
      - Variables
  /v1/files/{file_key}/variables/published:
    get:
      description: |-
        **This API is available to full members of Enterprise orgs.**

        The `GET /v1/files/:file_key/variables/published` endpoint returns the variables that are published from the given file.

        The response for this endpoint contains some key differences compared to the `GET /v1/files/:file_key/variables/local` endpoint:

        - Each variable and variable collection contains a `subscribed_id`.
        - Modes are omitted for published variable collections

        Published variables have two ids: an id that is assigned in the file where it is created (`id`), and an id that is used by subscribing files (`subscribed_id`). The `id` and `key` are stable over the lifetime of the variable. The `subscribed_id` changes every time the variable is modified and published. The same is true for variable collections.

        The `updatedAt` fields are ISO 8601 timestamps that indicate the last time that a change to a variable was published. For variable collections, this timestamp will change any time a variable in the collection is changed.
      operationId: getPublishedVariables
      parameters:
      - description: "File to get variables from. This must be a main file key, not\
          \ a branch key, as it is not possible to publish from branches."
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/GetPublishedVariablesResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrorBoolean'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_variables:read
      summary: Get published variables
      tags:
      - Variables
  /v1/files/{file_key}/variables:
    post:
      description: |-
        **This API is available to full members of Enterprise orgs with Editor seats.**

        The `POST /v1/files/:file_key/variables` endpoint lets you bulk create, update, and delete variables and variable collections.

        The request body supports the following 4 top-level arrays. Changes from these arrays will be applied in the below order, and within each array, by array order.

        - **variableCollections**: For creating, updating, and deleting variable collections
        - **variableModes**: For creating, updating, and deleting modes within variable collections
          - Each collection can have a maximum of 40 modes
          - Mode names cannot be longer than 40 characters
        - **variables**: For creating, updating, and deleting variables
          - Each collection can have a maximum of 5000 variables
          - Variable names must be unique within a collection and cannot contain certain special characters such as `.{}`
        - **variableModeValues**: For setting a variable value under a specific mode.
          - When setting aliases, a variable cannot be aliased to itself or form an alias cycle

        Temporary ids can be used to reference an object later in the same POST request body. They can be used at create time in the `id` property of variable collections, modes, variables, and in the `initialModeId` property of variable collections. They are scoped to a single request body, and must be unique within the body. The mapping of temporary ids to real ids is returned in the response.

        This endpoint has the following key behaviors:

        - The request body must be 4MB or less.
        - Must include an `action` property for collections, modes, and variables to tell the API whether to create, update, or delete the object.
        - When creating a collection, mode, or variable, you can include a temporary `id` that can be referenced in dependent objects in the same request. For example, you can create a new collection with the id `"my_new_collection"`. You can then set `variableCollectionId` to `"my_new_collection"` in new modes or variables. Temporary ids must be unique in the request body.
        - New collections always come with one mode. You can reference this mode by setting `initialModeId` to a temporary id in the request body. This is useful if you want to set values for variables in the mode in the `variableModeValues` array.
          - The `tempIdToRealId` array returns a mapping of the temporary ids in the request, to the real ids of the newly created objects.
        - When adding new modes or variables, default variable values will be applied, consistent with what happens in the UI.
        - Everything to be created, updated, and deleted in the request body is treated as one atomic operation. If there is any validation failure, you will get a 400 status code response, and no changes will be persisted.
        - You will not be able to update remote variables or variable collections. You can only update variables in the file where they were originally created.
      operationId: postVariables
      parameters:
      - description: File to modify variables in. This can be a file key or branch
          key. Use `GET /v1/files/:key` with the `branch_data` query param to get
          the branch key.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postVariables_request'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/PostVariablesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrorBoolean'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_variables:write
      summary: Create/modify/delete variables
      tags:
      - Variables
  /v1/files/{file_key}/dev_resources:
    get:
      description: Get dev resources in a file
      operationId: getDevResources
      parameters:
      - description: "The file to get the dev resources from. This must be a main\
          \ file key, not a branch key."
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: "Comma separated list of nodes that you care about in the document.\
          \ If specified, only dev resources attached to these nodes will be returned.\
          \ If not specified, all dev resources in the file will be returned."
        explode: true
        in: query
        name: node_ids
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetDevResourcesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrorBoolean'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_dev_resources:read
      summary: Get dev resources
      tags:
      - Dev Resources
  /v1/dev_resources:
    post:
      description: |-
        Bulk create dev resources across multiple files.
        Dev resources that are successfully created will show up in the links_created array in the response.

        If there are any dev resources that cannot be created, you may still get a 200 response. These resources will show up in the errors array. Some reasons a dev resource cannot be created include:

        - Resource points to a `file_key` that cannot be found.
        - The node already has the maximum of 10 dev resources.
        - Another dev resource for the node has the same url.
      operationId: postDevResources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postDevResources_request'
        description: A list of dev resources that you want to create.
        required: true
      responses:
        "200":
          $ref: '#/components/responses/PostDevResourcesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_dev_resources:write
      summary: Create dev resources
      tags:
      - Dev Resources
    put:
      description: |-
        Bulk update dev resources across multiple files.

        Ids for dev resources that are successfully updated will show up in the `links_updated` array in the response.

        If there are any dev resources that cannot be updated, you may still get a 200 response. These resources will show up in the `errors` array.
      operationId: putDevResources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/putDevResources_request'
        description: A list of dev resources that you want to update.
        required: true
      responses:
        "200":
          $ref: '#/components/responses/PutDevResourcesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_dev_resources:write
      summary: Update dev resources
      tags:
      - Dev Resources
  /v1/files/{file_key}/dev_resources/{dev_resource_id}:
    delete:
      description: Delete a dev resource from a file
      operationId: deleteDevResource
      parameters:
      - description: "The file to delete the dev resource from. This must be a main\
          \ file key, not a branch key."
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the dev resource to delete.
        explode: false
        in: path
        name: dev_resource_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/DeleteDevResourceResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrorBoolean'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - file_dev_resources:write
      summary: Delete dev resource
      tags:
      - Dev Resources
  /v1/analytics/libraries/{file_key}/actions:
    get:
      description: Returns a list of library analytics actions data broken down by
        the requested dimension.
      operationId: getLibraryAnalyticsActions
      parameters:
      - description: File key of the library to fetch analytics data for.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: Cursor indicating what page of data to fetch. Obtained from prior
          API call.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: A dimension to group returned analytics data by. Accepts "component"
          or "team".
        explode: true
        in: query
        name: group_by
        required: true
        schema:
          enum:
          - component
          - team
          type: string
        style: form
      - description: ISO 8601 date string (YYYY-MM-DD) of the earliest week to include.
          Dates are rounded back to the nearest start of a week. Defaults to one year
          prior.
        explode: true
        in: query
        name: start_date
        required: false
        schema:
          type: string
        style: form
      - description: ISO 8601 date string (YYYY-MM-DD) of the latest week to include.
          Dates are rounded forward to the nearest end of a week. Defaults to the
          latest computed week.
        explode: true
        in: query
        name: end_date
        required: false
        schema:
          type: string
        style: form
      - description: How to order response rows by week. This param can be either
          "asc" or "desc" (default).
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetLibraryAnalyticsActionsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - library_analytics:read
      summary: Get library analytics action data.
      tags:
      - Library Analytics
  /v1/analytics/libraries/{file_key}/usages:
    get:
      description: Returns a list of library analytics usage data broken down by the
        requested dimension.
      operationId: getLibraryAnalyticsUsages
      parameters:
      - description: File key of the library to fetch analytics data for.
        explode: false
        in: path
        name: file_key
        required: true
        schema:
          type: string
        style: simple
      - description: Cursor indicating what page of data to fetch. Obtained from prior
          API call.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: A dimension to group returned analytics data by. Accepts "component"
          or "file".
        explode: true
        in: query
        name: group_by
        required: true
        schema:
          enum:
          - component
          - file
          type: string
        style: form
      - description: How to order response rows by number of instances. This param
          can be either "asc" or "desc" (default).
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          $ref: '#/components/responses/GetLibraryAnalyticsUsagesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponseWithErrorBoolean'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponseWithErrorBoolean'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponseWithErrorBoolean'
        "429":
          $ref: '#/components/responses/TooManyRequestsErrorResponseWithErrorBoolean'
        "500":
          $ref: '#/components/responses/InternalServerErrorResponseWithErrorBoolean'
      security:
      - PersonalAccessToken: []
      - OAuth2:
        - library_analytics:read
      summary: Get library analytics usage data.
      tags:
      - Library Analytics
components:
  responses:
    GetFileResponse:
      content:
        application/json:
          schema:
            properties:
              name:
                description: The name of the file as it appears in the editor.
                type: string
              role:
                description: The role of the user making the API request in relation
                  to the file.
                enum:
                - owner
                - editor
                - viewer
                type: string
              lastModified:
                description: The UTC ISO 8601 time at which the file was last modified.
                format: date-time
                type: string
              editorType:
                description: The type of editor associated with this file.
                enum:
                - figma
                - figjam
                type: string
              thumbnailUrl:
                description: A URL to a thumbnail image of the file.
                type: string
              version:
                description: The version number of the file. This number is incremented
                  when a file is modified and can be used to check if the file has
                  changed between requests.
                type: string
              document:
                $ref: '#/components/schemas/DocumentNode'
              components:
                additionalProperties:
                  $ref: '#/components/schemas/Component'
                description: A mapping from component IDs to component metadata.
              componentSets:
                additionalProperties:
                  $ref: '#/components/schemas/ComponentSet'
                description: A mapping from component set IDs to component set metadata.
              schemaVersion:
                default: 0
                description: The version of the file schema that this file uses.
                type: number
              styles:
                additionalProperties:
                  $ref: '#/components/schemas/Style'
                description: A mapping from style IDs to style metadata.
              mainFileKey:
                description: "The key of the main file for this file. If present,\
                  \ this file is a component or component set."
                type: string
              branches:
                description: A list of branches for this file.
                items:
                  properties:
                    key:
                      description: The key of the branch.
                      type: string
                    name:
                      description: The name of the branch.
                      type: string
                    thumbnail_url:
                      description: A URL to a thumbnail image of the branch.
                      type: string
                    last_modified:
                      description: The UTC ISO 8601 time at which the branch was last
                        modified.
                      format: date-time
                      type: string
                  required:
                  - key
                  - last_modified
                  - name
                  - thumbnail_url
                type: array
            required:
            - componentSets
            - components
            - document
            - editorType
            - lastModified
            - name
            - role
            - schemaVersion
            - styles
            - version
      description: "Response from the GET /v1/files/{file_key} endpoint."
    GetFileNodesResponse:
      content:
        application/json:
          schema:
            properties:
              name:
                description: The name of the file as it appears in the editor.
                type: string
              role:
                description: The role of the user making the API request in relation
                  to the file.
                enum:
                - owner
                - editor
                - viewer
                type: string
              lastModified:
                description: The UTC ISO 8601 time at which the file was last modified.
                format: date-time
                type: string
              editorType:
                description: The type of editor associated with this file.
                enum:
                - figma
                - figjam
                type: string
              thumbnailUrl:
                description: A URL to a thumbnail image of the file.
                type: string
              version:
                description: The version number of the file. This number is incremented
                  when a file is modified and can be used to check if the file has
                  changed between requests.
                type: string
              nodes:
                additionalProperties:
                  properties:
                    document:
                      $ref: '#/components/schemas/Node'
                    components:
                      additionalProperties:
                        $ref: '#/components/schemas/Component'
                      description: A mapping from component IDs to component metadata.
                    componentSets:
                      additionalProperties:
                        $ref: '#/components/schemas/ComponentSet'
                      description: A mapping from component set IDs to component set
                        metadata.
                    schemaVersion:
                      default: 0
                      description: The version of the file schema that this file uses.
                      type: number
                    styles:
                      additionalProperties:
                        $ref: '#/components/schemas/Style'
                      description: A mapping from style IDs to style metadata.
                  required:
                  - componentSets
                  - components
                  - document
                  - schemaVersion
                  - styles
                description: A mapping from node IDs to node metadata.
            required:
            - editorType
            - lastModified
            - name
            - nodes
            - role
            - thumbnailUrl
            - version
      description: "Response from the GET /v1/files/{file_key}/nodes endpoint."
    GetImagesResponse:
      content:
        application/json:
          schema:
            properties:
              err:
                description: "For successful requests, this value is always `null`."
                nullable: true
              images:
                additionalProperties:
                  description: A URL to the requested image.
                  format: uri
                  nullable: true
                  type: string
                description: A map from node IDs to URLs of the rendered images.
            required:
            - err
            - images
      description: "Response from the GET /v1/images/{file_key} endpoint."
    GetImageFillsResponse:
      content:
        application/json:
          schema:
            properties:
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              status:
                description: Status code
                enum:
                - 200
                type: number
              meta:
                properties:
                  images:
                    additionalProperties:
                      description: A URL to the requested image fill.
                      format: uri
                      type: string
                    description: A map of image references to URLs of the image fills.
                required:
                - images
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/files/{file_key}/images endpoint."
    GetTeamProjectsResponse:
      content:
        application/json:
          schema:
            properties:
              name:
                description: The team's name.
                type: string
              projects:
                description: An array of projects.
                items:
                  $ref: '#/components/schemas/Project'
                type: array
            required:
            - name
            - projects
      description: "Response from the GET /v1/teams/{team_id}/projects endpoint."
    GetProjectFilesResponse:
      content:
        application/json:
          schema:
            properties:
              name:
                description: The project's name.
                type: string
              files:
                description: An array of files.
                items:
                  properties:
                    key:
                      description: The file's key.
                      type: string
                    name:
                      description: The file's name.
                      type: string
                    thumbnail_url:
                      description: The file's thumbnail URL.
                      type: string
                    last_modified:
                      description: The UTC ISO 8601 time at which the file was last
                        modified.
                      format: date-time
                      type: string
                  required:
                  - key
                  - last_modified
                  - name
                type: array
            required:
            - files
            - name
      description: "Response from the GET /v1/projects/{project_id}/files endpoint."
    GetFileVersionsResponse:
      content:
        application/json:
          schema:
            properties:
              versions:
                description: An array of versions.
                items:
                  $ref: '#/components/schemas/Version'
                type: array
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
            - pagination
            - versions
      description: "Response from the GET /v1/files/{file_key}/versions endpoint."
    GetCommentsResponse:
      content:
        application/json:
          schema:
            properties:
              comments:
                description: An array of comments.
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
            required:
            - comments
      description: "Response from the GET /v1/files/{file_key}/comments endpoint."
    PostCommentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'
      description: "Response from the POST /v1/files/{file_key}/comments endpoint."
    DeleteCommentResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
            required:
            - error
            - status
      description: "Response from the DELETE /v1/files/{file_key}/comments/{comment_id}\
        \ endpoint."
    GetCommentReactionsResponse:
      content:
        application/json:
          schema:
            properties:
              reactions:
                description: An array of reactions.
                items:
                  $ref: '#/components/schemas/Reaction'
                type: array
              pagination:
                $ref: '#/components/schemas/ResponsePagination'
            required:
            - pagination
            - reactions
      description: "Response from the GET /v1/files/{file_key}/comments/{comment_id}/reactions\
        \ endpoint."
    PostCommentReactionResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
            required:
            - error
            - status
      description: "Response from the POST /v1/files/{file_key}/comments/{comment_id}/reactions\
        \ endpoint."
    DeleteCommentReactionResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
            required:
            - error
            - status
      description: "Response from the DELETE /v1/files/{file_key}/comments/{comment_id}/reactions\
        \ endpoint."
    GetMeResponse:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/User'
            - properties:
                email:
                  description: Email associated with the user's account. This property
                    is only present on the /v1/me endpoint.
                  type: string
              required:
              - email
      description: Response from the GET /v1/me endpoint.
    GetTeamComponentsResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                properties:
                  components:
                    items:
                      $ref: '#/components/schemas/PublishedComponent'
                    type: array
                  cursor:
                    $ref: '#/components/schemas/ResponseCursor'
                required:
                - components
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/teams/{team_id}/components endpoint."
    GetFileComponentsResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                properties:
                  components:
                    items:
                      $ref: '#/components/schemas/PublishedComponent'
                    type: array
                required:
                - components
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/files/{file_key}/components endpoint."
    GetComponentResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                $ref: '#/components/schemas/PublishedComponent'
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/components/{key} endpoint."
    GetTeamComponentSetsResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                properties:
                  component_sets:
                    items:
                      $ref: '#/components/schemas/PublishedComponentSet'
                    type: array
                  cursor:
                    $ref: '#/components/schemas/ResponseCursor'
                required:
                - component_sets
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/teams/{team_id}/component_sets endpoint."
    GetFileComponentSetsResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                properties:
                  component_sets:
                    items:
                      $ref: '#/components/schemas/PublishedComponentSet'
                    type: array
                required:
                - component_sets
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/files/{file_key}/component_sets endpoint."
    GetComponentSetResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                $ref: '#/components/schemas/PublishedComponentSet'
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/component_sets/{key} endpoint."
    GetTeamStylesResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                properties:
                  styles:
                    items:
                      $ref: '#/components/schemas/PublishedStyle'
                    type: array
                  cursor:
                    $ref: '#/components/schemas/ResponseCursor'
                required:
                - styles
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/teams/{team_id}/styles endpoint."
    GetFileStylesResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                properties:
                  styles:
                    items:
                      $ref: '#/components/schemas/PublishedStyle'
                    type: array
                required:
                - styles
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/files/{file_key}/styles endpoint."
    GetStyleResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The status of the request.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                $ref: '#/components/schemas/PublishedStyle'
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/styles/{key} endpoint."
    PostWebhookResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookV2'
      description: Response from the POST /v2/webhooks endpoint.
    GetWebhookResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookV2'
      description: "Response from the GET /v2/webhooks/{webhook_id} endpoint."
    PutWebhookResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookV2'
      description: "Response from the PUT /v2/webhooks/{webhook_id} endpoint."
    DeleteWebhookResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookV2'
      description: "Response from the DELETE /v2/webhooks/{webhook_id} endpoint."
    GetTeamWebhooksResponse:
      content:
        application/json:
          schema:
            properties:
              webhooks:
                description: An array of webhooks.
                items:
                  $ref: '#/components/schemas/WebhookV2'
                type: array
            required:
            - webhooks
      description: "Response from the GET /v2/teams/{team_id}/webhooks endpoint."
    GetWebhookRequestsResponse:
      content:
        application/json:
          schema:
            properties:
              requests:
                description: An array of webhook requests.
                items:
                  $ref: '#/components/schemas/WebhookV2Request'
                type: array
            required:
            - requests
      description: "Response from the GET /v2/webhooks/{webhook_id}/requests endpoint."
    GetActivityLogsResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The response status code.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                properties:
                  activity_logs:
                    description: An array of activity logs sorted by timestamp in
                      ascending order by default.
                    items:
                      $ref: '#/components/schemas/ActivityLog'
                    type: array
                  cursor:
                    description: Encodes the last event (the most recent event)
                    type: string
                  next_page:
                    description: Whether there is a next page of events
                    type: boolean
      description: Response from the GET /v1/activity_logs endpoint.
    GetPaymentsResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The response status code.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                $ref: '#/components/schemas/PaymentInformation'
            required:
            - error
            - meta
            - status
      description: Response from the GET /v1/payments endpoint.
    GetLocalVariablesResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The response status code.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                properties:
                  variables:
                    additionalProperties:
                      $ref: '#/components/schemas/LocalVariable'
                    description: A map of variable ids to variables
                  variableCollections:
                    additionalProperties:
                      $ref: '#/components/schemas/LocalVariableCollection'
                    description: A map of variable collection ids to variable collections
                required:
                - variableCollections
                - variables
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/files/{file_key}/variables/local endpoint."
    GetPublishedVariablesResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The response status code.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                properties:
                  variables:
                    additionalProperties:
                      $ref: '#/components/schemas/PublishedVariable'
                    description: A map of variable ids to variables
                  variableCollections:
                    additionalProperties:
                      $ref: '#/components/schemas/PublishedVariableCollection'
                    description: A map of variable collection ids to variable collections
                required:
                - variableCollections
                - variables
            required:
            - error
            - meta
            - status
      description: "Response from the GET /v1/files/{file_key}/variables/published\
        \ endpoint."
    PostVariablesResponse:
      content:
        application/json:
          schema:
            properties:
              status:
                description: The response status code.
                enum:
                - 200
                type: number
              error:
                description: "For successful requests, this value is always `false`."
                enum:
                - false
                type: boolean
              meta:
                properties:
                  tempIdToRealId:
                    additionalProperties:
                      type: string
                    description: A map of temporary ids in the request to the real
                      ids of the newly created objects
                required:
                - tempIdToRealId
            required:
            - error
            - meta
            - status
      description: "Response from the POST /v1/files/{file_key}/variables endpoint."
    GetDevResourcesResponse:
      content:
        application/json:
          schema:
            properties:
              dev_resources:
                description: An array of dev resources.
                items:
                  $ref: '#/components/schemas/DevResource'
                type: array
            required:
            - dev_resources
      description: "Response from the GET /v1/files/{file_key}/dev_resources endpoint."
    PostDevResourcesResponse:
      content:
        application/json:
          schema:
            properties:
              links_created:
                description: An array of links created.
                items:
                  $ref: '#/components/schemas/DevResource'
                type: array
              errors:
                description: An array of errors.
                items:
                  properties:
                    file_key:
                      description: The file key.
                      nullable: true
                      type: string
                    node_id:
                      description: The node id.
                      nullable: true
                      type: string
                    error:
                      description: The error message.
                      type: string
                  required:
                  - error
                type: array
            required:
            - links_created
      description: Response from the POST /v1/dev_resources endpoint.
    PutDevResourcesResponse:
      content:
        application/json:
          schema:
            properties:
              links_updated:
                description: An array of links updated.
                items:
                  $ref: '#/components/schemas/DevResource'
                type: array
              errors:
                description: An array of errors.
                items:
                  properties:
                    id:
                      description: The id of the dev resource.
                      type: string
                    error:
                      description: The error message.
                      type: string
                  required:
                  - error
                type: array
      description: Response from the PUT /v1/dev_resources endpoint.
    DeleteDevResourceResponse:
      description: "Response from the DELETE /v1/files/{file_key}/dev_resources/{dev_resource_id}\
        \ endpoint."
    GetLibraryAnalyticsActionsResponse:
      content:
        application/json:
          schema:
            properties:
              rows:
                description: An array of analytics data.
                oneOf:
                - items:
                    $ref: '#/components/schemas/LibraryAnalyticsActionsByComponent'
                  type: array
                - items:
                    $ref: '#/components/schemas/LibraryAnalyticsActionsByTeam'
                  type: array
              next_page:
                description: Whether there is a next page of data that can be fetched.
                type: boolean
              cursor:
                description: The cursor to use to fetch the next page of data.
                type: string
            required:
            - next_page
            - rows
      description: "Response from the GET /v1/analytics/libraries/{file_key}/actions."
    GetLibraryAnalyticsUsagesResponse:
      content:
        application/json:
          schema:
            properties:
              components:
                description: An array of analytics data when breaking down usage by
                  component.
                items:
                  $ref: '#/components/schemas/LibraryAnalyticsUsagesByComponent'
                type: array
              files:
                description: An array of analytics data when breaking down usage by
                  file.
                items:
                  $ref: '#/components/schemas/LibraryAnalyticsUsagesByFile'
                type: array
              next_page:
                description: Whether there is a next page of data that can be fetched.
                type: boolean
              cursor:
                description: The cursor to use to fetch the next page of data.
                type: string
            required:
            - next_page
      description: "Response from the PUT /v1/analytics/libraries/{file_key}/usages."
    BadRequestErrorResponseWithErrMessage:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrMessage'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 400
                  type: number
              required:
              - status
      description: "Bad request. Parameters are invalid or malformed. Please check\
        \ the input formats. This error can also happen if the requested resources\
        \ are too large to complete the request, which results in a timeout. Please\
        \ reduce the number and size of objects requested."
    BadRequestErrorResponseWithErrorBoolean:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrorBoolean'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 400
                  type: number
              required:
              - status
      description: "Bad request. Parameters are invalid or malformed. Please check\
        \ the input formats. This error can also happen if the requested resources\
        \ are too large to complete the request, which results in a timeout. Please\
        \ reduce the number and size of objects requested."
    UnauthorizedErrorResponseWithErrorBoolean:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrorBoolean'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 401
                  type: number
              required:
              - status
      description: Token is missing or incorrect.
    ForbiddenErrorResponseWithErrMessage:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrMessage'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 403
                  type: number
              required:
              - status
      description: "The request was valid, but the server is refusing action. The\
        \ user might not have the necessary permissions for a resource, or may need\
        \ an account of some sort."
    ForbiddenErrorResponseWithErrorBoolean:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrorBoolean'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 403
                  type: number
              required:
              - status
      description: "The request was valid, but the server is refusing action. The\
        \ user might not have the necessary permissions for a resource, or may need\
        \ an account of some sort."
    NotFoundErrorResponseWithErrMessage:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrMessage'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 404
                  type: number
              required:
              - status
      description: The requested file or resource was not found.
    NotFoundErrorResponseWithErrorBoolean:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrorBoolean'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 404
                  type: number
              required:
              - status
      description: The requested file or resource was not found.
    TooManyRequestsErrorResponseWithErrMessage:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrMessage'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 429
                  type: number
              required:
              - status
      description: In some cases API requests may be throttled or rate limited. Please
        wait a while before attempting the request again (typically a minute).
    TooManyRequestsErrorResponseWithErrorBoolean:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrorBoolean'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 429
                  type: number
              required:
              - status
      description: In some cases API requests may be throttled or rate limited. Please
        wait a while before attempting the request again (typically a minute).
    InternalServerErrorResponseWithErrMessage:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrMessage'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 500
                  type: number
              required:
              - status
      description: An internal server error occurred.
    InternalServerErrorResponseWithErrorBoolean:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ErrorResponsePayloadWithErrorBoolean'
            - properties:
                status:
                  description: Status code
                  enum:
                  - 500
                  type: number
              required:
              - status
      description: An internal server error occurred.
  schemas:
    IsLayerTrait:
      properties:
        id:
          description: A string uniquely identifying this node within the document.
          type: string
        name:
          description: The name given to the node by the user in the tool.
          type: string
        type:
          description: The type of the node
          type: string
        visible:
          default: true
          description: Whether or not the node is visible on the canvas.
          type: boolean
        locked:
          default: false
          description: "If true, layer is locked and cannot be edited"
          type: boolean
        isFixed:
          default: false
          deprecated: true
          description: Whether the layer is fixed while the parent is scrolling
          type: boolean
        scrollBehavior:
          default: SCROLLS
          description: How layer should be treated when the frame is resized
          enum:
          - SCROLLS
          - FIXED
          - STICKY_SCROLLS
          type: string
        rotation:
          default: 0
          description: "The rotation of the node, if not 0."
          type: number
        componentPropertyReferences:
          additionalProperties:
            type: string
          description: A mapping of a layer's property to component property name
            of component properties attached to this node. The component property
            name can be used to look up more information on the corresponding component's
            or component set's componentPropertyDefinitions.
        pluginData: {}
        sharedPluginData: {}
        boundVariables:
          $ref: '#/components/schemas/IsLayerTrait_boundVariables'
        explicitVariableModes:
          additionalProperties:
            type: string
          description: A mapping of variable collection ID to mode ID representing
            the explicitly set modes for this node.
      required:
      - id
      - name
      - scrollBehavior
      - type
    HasChildrenTrait:
      properties:
        children:
          description: An array of nodes that are direct children of this node
          items:
            $ref: '#/components/schemas/SubcanvasNode'
          type: array
      required:
      - children
    HasLayoutTrait:
      properties:
        absoluteBoundingBox:
          $ref: '#/components/schemas/Rectangle'
        absoluteRenderBounds:
          $ref: '#/components/schemas/Rectangle'
        preserveRatio:
          default: false
          description: Keep height and width constrained to same ratio.
          type: boolean
        constraints:
          $ref: '#/components/schemas/LayoutConstraint'
        relativeTransform:
          description: |-
            A transformation matrix is standard way in computer graphics to represent translation and rotation. These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1]. This is known as an affine transform and is enough to represent translation, rotation, and skew.

            The identity transform is [[1, 0, 0], [0, 1, 0]].

            A translation matrix will typically look like:

            ```
            [[1, 0, tx],
              [0, 1, ty]]
            ```

            and a rotation matrix will typically look like:

            ```
            [[cos(angle), sin(angle), 0],
              [-sin(angle), cos(angle), 0]]
            ```

            Another way to think about this transform is as three vectors:

            - The x axis (t[0][0], t[1][0])
            - The y axis (t[0][1], t[1][1])
            - The translation offset (t[0][2], t[1][2])

            The most common usage of the Transform matrix is the `relativeTransform property`. This particular usage of the matrix has a few additional restrictions. The translation offset can take on any value but we do enforce that the axis vectors are unit vectors (i.e. have length 1). The axes are not required to be at 90° angles to each other.
          items:
            items:
              type: number
            maxItems: 3
            minItems: 3
            type: array
          maxItems: 2
          minItems: 2
          type: array
        size:
          $ref: '#/components/schemas/Vector'
        layoutAlign:
          description: |2-

            Determines if the layer should stretch along the parent's counter axis. This property is only provided for direct children of auto-layout frames.

            - `INHERIT`
            - `STRETCH`

            In previous versions of auto layout, determined how the layer is aligned inside an auto-layout frame. This property is only provided for direct children of auto-layout frames.

            - `MIN`
            - `CENTER`
            - `MAX`
            - `STRETCH`

            In horizontal auto-layout frames, "MIN" and "MAX" correspond to "TOP" and "BOTTOM". In vertical auto-layout frames, "MIN" and "MAX" correspond to "LEFT" and "RIGHT".
          enum:
          - INHERIT
          - STRETCH
          - MIN
          - CENTER
          - MAX
          type: string
        layoutGrow:
          default: 0
          description: "This property is applicable only for direct children of auto-layout\
            \ frames, ignored otherwise. Determines whether a layer should stretch\
            \ along the parent's primary axis. A `0` corresponds to a fixed size and\
            \ `1` corresponds to stretch."
          enum:
          - 0
          - 1
          type: number
        layoutPositioning:
          default: AUTO
          description: Determines whether a layer's size and position should be determined
            by auto-layout settings or manually adjustable.
          enum:
          - AUTO
          - ABSOLUTE
          type: string
        minWidth:
          default: 0
          description: The minimum width of the frame. This property is only applicable
            for auto-layout frames or direct children of auto-layout frames.
          type: number
        maxWidth:
          default: 0
          description: The maximum width of the frame. This property is only applicable
            for auto-layout frames or direct children of auto-layout frames.
          type: number
        minHeight:
          default: 0
          description: The minimum height of the frame. This property is only applicable
            for auto-layout frames or direct children of auto-layout frames.
          type: number
        maxHeight:
          default: 0
          description: The maximum height of the frame. This property is only applicable
            for auto-layout frames or direct children of auto-layout frames.
          type: number
        layoutSizingHorizontal:
          description: |-
            The horizontal sizing setting on this auto-layout frame or frame child.
            - `FIXED`
            - `HUG`: only valid on auto-layout frames and text nodes
            - `FILL`: only valid on auto-layout frame children
          enum:
          - FIXED
          - HUG
          - FILL
          type: string
        layoutSizingVertical:
          description: |-
            The vertical sizing setting on this auto-layout frame or frame child.
            - `FIXED`
            - `HUG`: only valid on auto-layout frames and text nodes
            - `FILL`: only valid on auto-layout frame children
          enum:
          - FIXED
          - HUG
          - FILL
          type: string
      required:
      - absoluteBoundingBox
      - absoluteRenderBounds
    HasFramePropertiesTrait:
      properties:
        clipsContent:
          description: Whether or not this node clip content outside of its bounds
          type: boolean
        background:
          description: "Background of the node. This is deprecated, as backgrounds\
            \ for frames are now in the `fills` field."
          items:
            $ref: '#/components/schemas/Paint'
          type: array
        backgroundColor:
          $ref: '#/components/schemas/RGBA'
        layoutGrids:
          description: An array of layout grids attached to this node (see layout
            grids section for more details). GROUP nodes do not have this attribute
          items:
            $ref: '#/components/schemas/LayoutGrid'
          type: array
        overflowDirection:
          default: NONE
          description: "Whether a node has primary axis scrolling, horizontal or vertical."
          enum:
          - HORIZONTAL_SCROLLING
          - VERTICAL_SCROLLING
          - HORIZONTAL_AND_VERTICAL_SCROLLING
          - NONE
          type: string
        layoutMode:
          default: NONE
          description: Whether this layer uses auto-layout to position its children.
          enum:
          - NONE
          - HORIZONTAL
          - VERTICAL
          type: string
        primaryAxisSizingMode:
          default: AUTO
          description: Whether the primary axis has a fixed length (determined by
            the user) or an automatic length (determined by the layout engine). This
            property is only applicable for auto-layout frames.
          enum:
          - FIXED
          - AUTO
          type: string
        counterAxisSizingMode:
          default: AUTO
          description: Whether the counter axis has a fixed length (determined by
            the user) or an automatic length (determined by the layout engine). This
            property is only applicable for auto-layout frames.
          enum:
          - FIXED
          - AUTO
          type: string
        primaryAxisAlignItems:
          default: MIN
          description: Determines how the auto-layout frame's children should be aligned
            in the primary axis direction. This property is only applicable for auto-layout
            frames.
          enum:
          - MIN
          - CENTER
          - MAX
          - SPACE_BETWEEN
          type: string
        counterAxisAlignItems:
          default: MIN
          description: Determines how the auto-layout frame's children should be aligned
            in the counter axis direction. This property is only applicable for auto-layout
            frames.
          enum:
          - MIN
          - CENTER
          - MAX
          - BASELINE
          type: string
        paddingLeft:
          default: 0
          description: The padding between the left border of the frame and its children.
            This property is only applicable for auto-layout frames.
          type: number
        paddingRight:
          default: 0
          description: The padding between the right border of the frame and its children.
            This property is only applicable for auto-layout frames.
          type: number
        paddingTop:
          default: 0
          description: The padding between the top border of the frame and its children.
            This property is only applicable for auto-layout frames.
          type: number
        paddingBottom:
          default: 0
          description: The padding between the bottom border of the frame and its
            children. This property is only applicable for auto-layout frames.
          type: number
        itemSpacing:
          default: 0
          description: The distance between children of the frame. Can be negative.
            This property is only applicable for auto-layout frames.
          type: number
        itemReverseZIndex:
          default: false
          description: "Determines the canvas stacking order of layers in this frame.\
            \ When true, the first layer will be draw on top. This property is only\
            \ applicable for auto-layout frames."
          type: boolean
        strokesIncludedInLayout:
          default: false
          description: "Determines whether strokes are included in layout calculations.\
            \ When true, auto-layout frames behave like css \"box-sizing: border-box\"\
            . This property is only applicable for auto-layout frames."
          type: boolean
        layoutWrap:
          description: Whether this auto-layout frame has wrapping enabled.
          enum:
          - NO_WRAP
          - WRAP
          type: string
        counterAxisSpacing:
          description: "The distance between wrapped tracks of an auto-layout frame.\
            \ This property is only applicable for auto-layout frames with `layoutWrap:\
            \ \"WRAP\"`"
          type: number
        counterAxisAlignContent:
          default: AUTO
          description: "Determines how the auto-layout frame’s wrapped tracks should\
            \ be aligned in the counter axis direction. This property is only applicable\
            \ for auto-layout frames with `layoutWrap: \"WRAP\"`."
          enum:
          - AUTO
          - SPACE_BETWEEN
          type: string
      required:
      - clipsContent
    HasBlendModeAndOpacityTrait:
      properties:
        blendMode:
          $ref: '#/components/schemas/BlendMode'
        opacity:
          default: 1
          description: Opacity of the node
          maximum: 1
          minimum: 0
          type: number
      required:
      - blendMode
    HasExportSettingsTrait:
      properties:
        exportSettings:
          description: An array of export settings representing images to export from
            the node.
          items:
            $ref: '#/components/schemas/ExportSetting'
          type: array
    HasGeometryTrait:
      allOf:
      - $ref: '#/components/schemas/MinimalFillsTrait'
      - $ref: '#/components/schemas/MinimalStrokesTrait'
      - properties:
          fillOverrideTable:
            additionalProperties:
              $ref: '#/components/schemas/HasGeometryTrait_allOf_fillOverrideTable'
            description: "Map from ID to PaintOverride for looking up fill overrides.\
              \ To see which regions are overriden, you must use the `geometry=paths`\
              \ option. Each path returned may have an `overrideID` which maps to\
              \ this table."
          fillGeometry:
            description: Only specified if parameter `geometry=paths` is used. An
              array of paths representing the object fill.
            items:
              $ref: '#/components/schemas/Path'
            type: array
          strokeGeometry:
            description: Only specified if parameter `geometry=paths` is used. An
              array of paths representing the object stroke.
            items:
              $ref: '#/components/schemas/Path'
            type: array
          strokeCap:
            default: NONE
            description: A string enum describing the end caps of vector paths.
            enum:
            - NONE
            - ROUND
            - SQUARE
            - LINE_ARROW
            - TRIANGLE_ARROW
            - DIAMOND_FILLED
            - CIRCLE_FILLED
            - TRIANGLE_FILLED
            - WASHI_TAPE_1
            - WASHI_TAPE_2
            - WASHI_TAPE_3
            - WASHI_TAPE_4
            - WASHI_TAPE_5
            - WASHI_TAPE_6
            type: string
          strokeMiterAngle:
            default: 28.96
            description: "Only valid if `strokeJoin` is \"MITER\". The corner angle,\
              \ in degrees, below which `strokeJoin` will be set to \"BEVEL\" to avoid\
              \ super sharp corners. By default this is 28.96 degrees."
            type: number
    MinimalFillsTrait:
      properties:
        fills:
          description: An array of fill paints applied to the node.
          items:
            $ref: '#/components/schemas/Paint'
          type: array
        styles:
          additionalProperties:
            type: string
          description: A mapping of a StyleType to style ID (see Style) of styles
            present on this node. The style ID can be used to look up more information
            about the style in the top-level styles field.
      required:
      - fills
    MinimalStrokesTrait:
      properties:
        strokes:
          description: An array of stroke paints applied to the node.
          items:
            $ref: '#/components/schemas/Paint'
          type: array
        strokeWeight:
          default: 1
          description: The weight of strokes on the node.
          type: number
        strokeAlign:
          description: |-
            Position of stroke relative to vector outline, as a string enum

            - `INSIDE`: stroke drawn inside the shape boundary
            - `OUTSIDE`: stroke drawn outside the shape boundary
            - `CENTER`: stroke drawn centered along the shape boundary
          enum:
          - INSIDE
          - OUTSIDE
          - CENTER
          type: string
        strokeJoin:
          default: MITER
          description: "A string enum with value of \"MITER\", \"BEVEL\", or \"ROUND\"\
            , describing how corners in vector paths are rendered."
          enum:
          - MITER
          - BEVEL
          - ROUND
          type: string
        strokeDashes:
          description: |-
            An array of floating point numbers describing the pattern of dash length and gap lengths that the vector stroke will use when drawn.

            For example a value of [1, 2] indicates that the stroke will be drawn with a dash of length 1 followed by a gap of length 2, repeated.
          items:
            type: number
          type: array
    IndividualStrokesTrait:
      properties:
        individualStrokeWeights:
          $ref: '#/components/schemas/StrokeWeights'
    CornerTrait:
      properties:
        cornerRadius:
          default: 0
          description: Radius of each corner if a single radius is set for all corners
          type: number
        cornerSmoothing:
          description: A value that lets you control how "smooth" the corners are.
            Ranges from 0 to 1. 0 is the default and means that the corner is perfectly
            circular. A value of 0.6 means the corner matches the iOS 7 "squircle"
            icon shape. Other values produce various other curves.
          type: number
        rectangleCornerRadii:
          description: |-
            Array of length 4 of the radius of each corner of the frame, starting in the top left and proceeding clockwise.

            Values are given in the order top-left, top-right, bottom-right, bottom-left.
          items:
            type: number
          maxItems: 4
          minItems: 4
          type: array
    HasEffectsTrait:
      properties:
        effects:
          description: An array of effects attached to this node (see effects section
            for more details)
          items:
            $ref: '#/components/schemas/Effect'
          type: array
      required:
      - effects
    HasMaskTrait:
      properties:
        isMask:
          default: false
          description: Does this node mask sibling nodes in front of it?
          type: boolean
        maskType:
          description: |-
            If this layer is a mask, this property describes the operation used to mask the layer's siblings. The value may be one of the following:

            - ALPHA: the mask node's alpha channel will be used to determine the opacity of each pixel in the masked result.
            - VECTOR: if the mask node has visible fill paints, every pixel inside the node's fill regions will be fully visible in the masked result. If the mask has visible stroke paints, every pixel inside the node's stroke regions will be fully visible in the masked result.
            - LUMINANCE: the luminance value of each pixel of the mask node will be used to determine the opacity of that pixel in the masked result.
          enum:
          - ALPHA
          - VECTOR
          - LUMINANCE
          type: string
        isMaskOutline:
          default: false
          deprecated: true
          description: True if maskType is VECTOR. This field is deprecated; use maskType
            instead.
          type: boolean
    ComponentPropertiesTrait:
      properties:
        componentPropertyDefinitions:
          additionalProperties:
            $ref: '#/components/schemas/ComponentPropertyDefinition'
          description: "A mapping of name to `ComponentPropertyDefinition` for every\
            \ component property on this component. Each property has a type, defaultValue,\
            \ and other optional values."
    TypePropertiesTrait:
      properties:
        characters:
          description: The raw characters in the text node.
          type: string
        style:
          $ref: '#/components/schemas/TypeStyle'
        characterStyleOverrides:
          description: "The array corresponds to characters in the text box, where\
            \ each element references the 'styleOverrideTable' to apply specific styles\
            \ to each character. The array's length can be less than or equal to the\
            \ number of characters due to the removal of trailing zeros. Elements\
            \ with a value of 0 indicate characters that use the default type style.\
            \ If the array is shorter than the total number of characters, the characters\
            \ beyond the array's length also use the default style."
          items:
            type: number
          type: array
        layoutVersion:
          description: "Internal property, preserved for backward compatibility. Avoid\
            \ using this value."
          type: number
        styleOverrideTable:
          additionalProperties:
            $ref: '#/components/schemas/TypeStyle'
          description: Map from ID to TypeStyle for looking up style overrides.
        lineTypes:
          description: |-
            An array with the same number of elements as lines in the text node, where lines are delimited by newline or paragraph separator characters. Each element in the array corresponds to the list type of a specific line. List types are represented as string enums with one of these possible values:

            - `NONE`: Not a list item.
            - `ORDERED`: Text is an ordered list (numbered).
            - `UNORDERED`: Text is an unordered list (bulleted).
          items:
            enum:
            - NONE
            - ORDERED
            - UNORDERED
            type: string
          type: array
        lineIndentations:
          description: "An array with the same number of elements as lines in the\
            \ text node, where lines are delimited by newline or paragraph separator\
            \ characters. Each element in the array corresponds to the indentation\
            \ level of a specific line."
          items:
            type: number
          type: array
      required:
      - characterStyleOverrides
      - characters
      - lineIndentations
      - lineTypes
      - style
      - styleOverrideTable
    HasTextSublayerTrait:
      properties:
        characters:
          description: Text contained within a text box.
          type: string
      required:
      - characters
    TransitionSourceTrait:
      properties:
        transitionNodeID:
          description: Node ID of node to transition to in prototyping
          type: string
        transitionDuration:
          description: "The duration of the prototyping transition on this node (in\
            \ milliseconds). This will override the default transition duration on\
            \ the prototype, for this node."
          type: number
        transitionEasing:
          $ref: '#/components/schemas/EasingType'
        interactions:
          items:
            $ref: '#/components/schemas/Interaction'
          type: array
    DevStatusTrait:
      properties:
        devStatus:
          $ref: '#/components/schemas/DevStatusTrait_devStatus'
    AnnotationsTrait:
      properties: {}
      type: object
    FrameTraits:
      allOf:
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasBlendModeAndOpacityTrait'
      - $ref: '#/components/schemas/HasChildrenTrait'
      - $ref: '#/components/schemas/HasLayoutTrait'
      - $ref: '#/components/schemas/HasFramePropertiesTrait'
      - $ref: '#/components/schemas/CornerTrait'
      - $ref: '#/components/schemas/HasGeometryTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
      - $ref: '#/components/schemas/HasEffectsTrait'
      - $ref: '#/components/schemas/HasMaskTrait'
      - $ref: '#/components/schemas/TransitionSourceTrait'
      - $ref: '#/components/schemas/IndividualStrokesTrait'
      - $ref: '#/components/schemas/DevStatusTrait'
      - $ref: '#/components/schemas/AnnotationsTrait'
    DefaultShapeTraits:
      allOf:
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasBlendModeAndOpacityTrait'
      - $ref: '#/components/schemas/HasLayoutTrait'
      - $ref: '#/components/schemas/HasGeometryTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
      - $ref: '#/components/schemas/HasEffectsTrait'
      - $ref: '#/components/schemas/HasMaskTrait'
      - $ref: '#/components/schemas/TransitionSourceTrait'
    CornerRadiusShapeTraits:
      allOf:
      - $ref: '#/components/schemas/DefaultShapeTraits'
      - $ref: '#/components/schemas/CornerTrait'
    RectangularShapeTraits:
      allOf:
      - $ref: '#/components/schemas/DefaultShapeTraits'
      - $ref: '#/components/schemas/CornerTrait'
      - $ref: '#/components/schemas/IndividualStrokesTrait'
      - $ref: '#/components/schemas/AnnotationsTrait'
    Node:
      discriminator:
        mapping:
          BOOLEAN_OPERATION: '#/components/schemas/BooleanOperationNode'
          COMPONENT: '#/components/schemas/ComponentNode'
          COMPONENT_SET: '#/components/schemas/ComponentSetNode'
          CONNECTOR: '#/components/schemas/ConnectorNode'
          ELLIPSE: '#/components/schemas/EllipseNode'
          EMBED: '#/components/schemas/EmbedNode'
          FRAME: '#/components/schemas/FrameNode'
          GROUP: '#/components/schemas/GroupNode'
          INSTANCE: '#/components/schemas/InstanceNode'
          LINE: '#/components/schemas/LineNode'
          LINK_UNFURL: '#/components/schemas/LinkUnfurlNode'
          RECTANGLE: '#/components/schemas/RectangleNode'
          REGULAR_POLYGON: '#/components/schemas/RegularPolygonNode'
          SECTION: '#/components/schemas/SectionNode'
          SHAPE_WITH_TEXT: '#/components/schemas/ShapeWithTextNode'
          SLICE: '#/components/schemas/SliceNode'
          STAR: '#/components/schemas/StarNode'
          STICKY: '#/components/schemas/StickyNode'
          TABLE: '#/components/schemas/TableNode'
          TABLE_CELL: '#/components/schemas/TableCellNode'
          TEXT: '#/components/schemas/TextNode'
          VECTOR: '#/components/schemas/VectorNode'
          WASHI_TAPE: '#/components/schemas/WashiTapeNode'
          WIDGET: '#/components/schemas/WidgetNode'
          DOCUMENT: '#/components/schemas/DocumentNode'
          CANVAS: '#/components/schemas/CanvasNode'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/BooleanOperationNode'
      - $ref: '#/components/schemas/ComponentNode'
      - $ref: '#/components/schemas/ComponentSetNode'
      - $ref: '#/components/schemas/ConnectorNode'
      - $ref: '#/components/schemas/EllipseNode'
      - $ref: '#/components/schemas/EmbedNode'
      - $ref: '#/components/schemas/FrameNode'
      - $ref: '#/components/schemas/GroupNode'
      - $ref: '#/components/schemas/InstanceNode'
      - $ref: '#/components/schemas/LineNode'
      - $ref: '#/components/schemas/LinkUnfurlNode'
      - $ref: '#/components/schemas/RectangleNode'
      - $ref: '#/components/schemas/RegularPolygonNode'
      - $ref: '#/components/schemas/SectionNode'
      - $ref: '#/components/schemas/ShapeWithTextNode'
      - $ref: '#/components/schemas/SliceNode'
      - $ref: '#/components/schemas/StarNode'
      - $ref: '#/components/schemas/StickyNode'
      - $ref: '#/components/schemas/TableNode'
      - $ref: '#/components/schemas/TableCellNode'
      - $ref: '#/components/schemas/TextNode'
      - $ref: '#/components/schemas/VectorNode'
      - $ref: '#/components/schemas/WashiTapeNode'
      - $ref: '#/components/schemas/WidgetNode'
      - $ref: '#/components/schemas/DocumentNode'
      - $ref: '#/components/schemas/CanvasNode'
    DocumentNode:
      allOf:
      - properties:
          type:
            enum:
            - DOCUMENT
            type: string
          children:
            items:
              $ref: '#/components/schemas/CanvasNode'
            type: array
        required:
        - children
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
    CanvasNode:
      allOf:
      - properties:
          type:
            enum:
            - CANVAS
            type: string
          children:
            items:
              $ref: '#/components/schemas/SubcanvasNode'
            type: array
          backgroundColor:
            $ref: '#/components/schemas/RGBA'
          prototypeStartNodeID:
            deprecated: true
            description: Node ID that corresponds to the start frame for prototypes.
              This is deprecated with the introduction of multiple flows. Please use
              the `flowStartingPoints` field.
            nullable: true
            type: string
          flowStartingPoints:
            description: An array of flow starting points sorted by its position in
              the prototype settings panel.
            items:
              $ref: '#/components/schemas/FlowStartingPoint'
            type: array
          prototypeDevice:
            $ref: '#/components/schemas/PrototypeDevice'
          measurements:
            items:
              $ref: '#/components/schemas/Measurement'
            type: array
        required:
        - backgroundColor
        - children
        - flowStartingPoints
        - prototypeDevice
        - prototypeStartNodeID
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
    SubcanvasNode:
      discriminator:
        mapping:
          BOOLEAN_OPERATION: '#/components/schemas/BooleanOperationNode'
          COMPONENT: '#/components/schemas/ComponentNode'
          COMPONENT_SET: '#/components/schemas/ComponentSetNode'
          CONNECTOR: '#/components/schemas/ConnectorNode'
          ELLIPSE: '#/components/schemas/EllipseNode'
          EMBED: '#/components/schemas/EmbedNode'
          FRAME: '#/components/schemas/FrameNode'
          GROUP: '#/components/schemas/GroupNode'
          INSTANCE: '#/components/schemas/InstanceNode'
          LINE: '#/components/schemas/LineNode'
          LINK_UNFURL: '#/components/schemas/LinkUnfurlNode'
          RECTANGLE: '#/components/schemas/RectangleNode'
          REGULAR_POLYGON: '#/components/schemas/RegularPolygonNode'
          SECTION: '#/components/schemas/SectionNode'
          SHAPE_WITH_TEXT: '#/components/schemas/ShapeWithTextNode'
          SLICE: '#/components/schemas/SliceNode'
          STAR: '#/components/schemas/StarNode'
          STICKY: '#/components/schemas/StickyNode'
          TABLE: '#/components/schemas/TableNode'
          TABLE_CELL: '#/components/schemas/TableCellNode'
          TEXT: '#/components/schemas/TextNode'
          VECTOR: '#/components/schemas/VectorNode'
          WASHI_TAPE: '#/components/schemas/WashiTapeNode'
          WIDGET: '#/components/schemas/WidgetNode'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/BooleanOperationNode'
      - $ref: '#/components/schemas/ComponentNode'
      - $ref: '#/components/schemas/ComponentSetNode'
      - $ref: '#/components/schemas/ConnectorNode'
      - $ref: '#/components/schemas/EllipseNode'
      - $ref: '#/components/schemas/EmbedNode'
      - $ref: '#/components/schemas/FrameNode'
      - $ref: '#/components/schemas/GroupNode'
      - $ref: '#/components/schemas/InstanceNode'
      - $ref: '#/components/schemas/LineNode'
      - $ref: '#/components/schemas/LinkUnfurlNode'
      - $ref: '#/components/schemas/RectangleNode'
      - $ref: '#/components/schemas/RegularPolygonNode'
      - $ref: '#/components/schemas/SectionNode'
      - $ref: '#/components/schemas/ShapeWithTextNode'
      - $ref: '#/components/schemas/SliceNode'
      - $ref: '#/components/schemas/StarNode'
      - $ref: '#/components/schemas/StickyNode'
      - $ref: '#/components/schemas/TableNode'
      - $ref: '#/components/schemas/TableCellNode'
      - $ref: '#/components/schemas/TextNode'
      - $ref: '#/components/schemas/VectorNode'
      - $ref: '#/components/schemas/WashiTapeNode'
      - $ref: '#/components/schemas/WidgetNode'
    BooleanOperationNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"BOOLEAN_OPERATION\""
            enum:
            - BOOLEAN_OPERATION
            type: string
          booleanOperation:
            description: A string enum indicating the type of boolean operation applied.
            enum:
            - UNION
            - INTERSECT
            - SUBTRACT
            - EXCLUDE
            type: string
        required:
        - booleanOperation
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasBlendModeAndOpacityTrait'
      - $ref: '#/components/schemas/HasChildrenTrait'
      - $ref: '#/components/schemas/HasLayoutTrait'
      - $ref: '#/components/schemas/HasGeometryTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
      - $ref: '#/components/schemas/HasEffectsTrait'
      - $ref: '#/components/schemas/HasMaskTrait'
      - $ref: '#/components/schemas/TransitionSourceTrait'
    SectionNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"SECTION\""
            enum:
            - SECTION
            type: string
          sectionContentsHidden:
            default: false
            description: Whether the contents of the section are visible
            type: boolean
        required:
        - sectionContentsHidden
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasGeometryTrait'
      - $ref: '#/components/schemas/HasChildrenTrait'
      - $ref: '#/components/schemas/HasLayoutTrait'
      - $ref: '#/components/schemas/DevStatusTrait'
    FrameNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"FRAME\""
            enum:
            - FRAME
            type: string
        required:
        - type
      - $ref: '#/components/schemas/FrameTraits'
    GroupNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"GROUP\""
            enum:
            - GROUP
            type: string
        required:
        - type
      - $ref: '#/components/schemas/FrameTraits'
    ComponentNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"COMPONENT\""
            enum:
            - COMPONENT
            type: string
        required:
        - type
      - $ref: '#/components/schemas/FrameTraits'
      - $ref: '#/components/schemas/ComponentPropertiesTrait'
    ComponentSetNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"COMPONENT_SET\""
            enum:
            - COMPONENT_SET
            type: string
        required:
        - type
      - $ref: '#/components/schemas/FrameTraits'
      - $ref: '#/components/schemas/ComponentPropertiesTrait'
    VectorNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"VECTOR\""
            enum:
            - VECTOR
            type: string
        required:
        - type
      - $ref: '#/components/schemas/CornerRadiusShapeTraits'
      - $ref: '#/components/schemas/AnnotationsTrait'
    StarNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"STAR\""
            enum:
            - STAR
            type: string
        required:
        - type
      - $ref: '#/components/schemas/CornerRadiusShapeTraits'
      - $ref: '#/components/schemas/AnnotationsTrait'
    LineNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"LINE\""
            enum:
            - LINE
            type: string
        required:
        - type
      - $ref: '#/components/schemas/DefaultShapeTraits'
      - $ref: '#/components/schemas/AnnotationsTrait'
    EllipseNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"ELLIPSE\""
            enum:
            - ELLIPSE
            type: string
          arcData:
            $ref: '#/components/schemas/ArcData'
        required:
        - arcData
        - type
      - $ref: '#/components/schemas/DefaultShapeTraits'
      - $ref: '#/components/schemas/AnnotationsTrait'
    RegularPolygonNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"REGULAR_POLYGON\""
            enum:
            - REGULAR_POLYGON
            type: string
        required:
        - type
      - $ref: '#/components/schemas/CornerRadiusShapeTraits'
      - $ref: '#/components/schemas/AnnotationsTrait'
    RectangleNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"RECTANGLE\""
            enum:
            - RECTANGLE
            type: string
        required:
        - type
      - $ref: '#/components/schemas/RectangularShapeTraits'
    TextNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"TEXT\""
            enum:
            - TEXT
            type: string
        required:
        - type
      - $ref: '#/components/schemas/DefaultShapeTraits'
      - $ref: '#/components/schemas/TypePropertiesTrait'
      - $ref: '#/components/schemas/AnnotationsTrait'
    TableNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"TABLE\""
            enum:
            - TABLE
            type: string
        required:
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasChildrenTrait'
      - $ref: '#/components/schemas/HasLayoutTrait'
      - $ref: '#/components/schemas/MinimalStrokesTrait'
      - $ref: '#/components/schemas/HasEffectsTrait'
      - $ref: '#/components/schemas/HasBlendModeAndOpacityTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
    TableCellNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"TABLE_CELL\""
            enum:
            - TABLE_CELL
            type: string
        required:
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/MinimalFillsTrait'
      - $ref: '#/components/schemas/HasLayoutTrait'
      - $ref: '#/components/schemas/HasTextSublayerTrait'
    SliceNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"SLICE\""
            enum:
            - SLICE
            type: string
        required:
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
    InstanceNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"INSTANCE\""
            enum:
            - INSTANCE
            type: string
          componentId:
            description: ID of component that this instance came from.
            type: string
          isExposedInstance:
            default: false
            description: "If true, this node has been marked as exposed to its containing\
              \ component or component set."
            type: boolean
          exposedInstances:
            description: IDs of instances that have been exposed to this node's level.
            items:
              type: string
            type: array
          componentProperties:
            additionalProperties:
              $ref: '#/components/schemas/ComponentProperty'
            description: "A mapping of name to `ComponentProperty` for all component\
              \ properties on this instance. Each property has a type, value, and\
              \ other optional values."
          overrides:
            description: An array of all of the fields directly overridden on this
              instance. Inherited overrides are not included.
            items:
              $ref: '#/components/schemas/Overrides'
            type: array
        required:
        - componentId
        - overrides
        - type
      - $ref: '#/components/schemas/FrameTraits'
    EmbedNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"EMBED\""
            enum:
            - EMBED
            type: string
        required:
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
    LinkUnfurlNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"LINK_UNFURL\""
            enum:
            - LINK_UNFURL
            type: string
        required:
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
    StickyNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"STICKY\""
            enum:
            - STICKY
            type: string
          authorVisible:
            default: false
            description: "If true, author name is visible."
            type: boolean
        required:
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasLayoutTrait'
      - $ref: '#/components/schemas/HasBlendModeAndOpacityTrait'
      - $ref: '#/components/schemas/MinimalFillsTrait'
      - $ref: '#/components/schemas/HasMaskTrait'
      - $ref: '#/components/schemas/HasEffectsTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
      - $ref: '#/components/schemas/HasTextSublayerTrait'
    ShapeWithTextNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"SHAPE_WITH_TEXT\""
            enum:
            - SHAPE_WITH_TEXT
            type: string
          shapeType:
            $ref: '#/components/schemas/ShapeType'
        required:
        - shapeType
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasLayoutTrait'
      - $ref: '#/components/schemas/HasBlendModeAndOpacityTrait'
      - $ref: '#/components/schemas/MinimalFillsTrait'
      - $ref: '#/components/schemas/HasMaskTrait'
      - $ref: '#/components/schemas/HasEffectsTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
      - $ref: '#/components/schemas/HasTextSublayerTrait'
      - $ref: '#/components/schemas/CornerTrait'
      - $ref: '#/components/schemas/MinimalStrokesTrait'
    ConnectorNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"CONNECTOR\""
            enum:
            - CONNECTOR
            type: string
          connectorStart:
            $ref: '#/components/schemas/ConnectorEndpoint'
          connectorEnd:
            $ref: '#/components/schemas/ConnectorEndpoint'
          connectorStartStrokeCap:
            default: NONE
            description: A string enum describing the end cap of the start of the
              connector.
            enum:
            - NONE
            - LINE_ARROW
            - TRIANGLE_ARROW
            - DIAMOND_FILLED
            - CIRCLE_FILLED
            - TRIANGLE_FILLED
            type: string
          connectorEndStrokeCap:
            default: NONE
            description: A string enum describing the end cap of the end of the connector.
            enum:
            - NONE
            - LINE_ARROW
            - TRIANGLE_ARROW
            - DIAMOND_FILLED
            - CIRCLE_FILLED
            - TRIANGLE_FILLED
            type: string
          connectorLineType:
            $ref: '#/components/schemas/ConnectorLineType'
          textBackground:
            $ref: '#/components/schemas/ConnectorTextBackground'
        required:
        - connectorEnd
        - connectorEndStrokeCap
        - connectorLineType
        - connectorStart
        - connectorStartStrokeCap
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasLayoutTrait'
      - $ref: '#/components/schemas/HasBlendModeAndOpacityTrait'
      - $ref: '#/components/schemas/HasEffectsTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
      - $ref: '#/components/schemas/HasTextSublayerTrait'
      - $ref: '#/components/schemas/MinimalStrokesTrait'
    WashiTapeNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"WASHI_TAPE\""
            enum:
            - WASHI_TAPE
            type: string
        required:
        - type
      - $ref: '#/components/schemas/DefaultShapeTraits'
    WidgetNode:
      allOf:
      - properties:
          type:
            description: "The type of this node, represented by the string literal\
              \ \"WIDGET\""
            enum:
            - WIDGET
            type: string
        required:
        - type
      - $ref: '#/components/schemas/IsLayerTrait'
      - $ref: '#/components/schemas/HasExportSettingsTrait'
      - $ref: '#/components/schemas/HasChildrenTrait'
    RGB:
      description: An RGB color
      properties:
        r:
          description: "Red channel value, between 0 and 1."
          maximum: 1
          minimum: 0
          type: number
        g:
          description: "Green channel value, between 0 and 1."
          maximum: 1
          minimum: 0
          type: number
        b:
          description: "Blue channel value, between 0 and 1."
          maximum: 1
          minimum: 0
          type: number
      required:
      - b
      - g
      - r
    RGBA:
      description: An RGBA color
      properties:
        r:
          description: "Red channel value, between 0 and 1."
          maximum: 1
          minimum: 0
          type: number
        g:
          description: "Green channel value, between 0 and 1."
          maximum: 1
          minimum: 0
          type: number
        b:
          description: "Blue channel value, between 0 and 1."
          maximum: 1
          minimum: 0
          type: number
        a:
          description: "Alpha channel value, between 0 and 1."
          maximum: 1
          minimum: 0
          type: number
      required:
      - a
      - b
      - g
      - r
    FlowStartingPoint:
      description: A flow starting point used when launching a prototype to enter
        Presentation view.
      properties:
        nodeId:
          description: Unique identifier specifying the frame.
          type: string
        name:
          description: Name of flow.
          type: string
      required:
      - name
      - nodeId
    Size:
      description: A width and a height.
      properties:
        width:
          description: The width of a size.
          type: number
        height:
          description: the height of a size.
          type: number
      required:
      - height
      - width
    PrototypeDevice:
      description: The device used to view a prototype.
      properties:
        type:
          enum:
          - NONE
          - PRESET
          - CUSTOM
          - PRESENTATION
          type: string
        size:
          $ref: '#/components/schemas/Size'
        presetIdentifier:
          type: string
        rotation:
          enum:
          - NONE
          - CCW_90
          type: string
      required:
      - rotation
      - type
    Constraint:
      description: Sizing constraint for exports.
      properties:
        type:
          description: |-
            Type of constraint to apply:

            - `SCALE`: Scale by `value`.
            - `WIDTH`: Scale proportionally and set width to `value`.
            - `HEIGHT`: Scale proportionally and set height to `value`.
          enum:
          - SCALE
          - WIDTH
          - HEIGHT
          type: string
        value:
          description: See type property for effect of this field.
          type: number
      required:
      - type
      - value
    ExportSetting:
      description: An export setting.
      properties:
        suffix:
          type: string
        format:
          enum:
          - JPG
          - PNG
          - SVG
          - PDF
          type: string
        constraint:
          $ref: '#/components/schemas/Constraint'
      required:
      - constraint
      - format
      - suffix
    BlendMode:
      description: |-
        This type is a string enum with the following possible values

        Normal blends:
        - `PASS_THROUGH` (only applicable to objects with children)
        - `NORMAL`

        Darken:
        - `DARKEN`
        - `MULTIPLY`
        - `LINEAR_BURN`
        - `COLOR_BURN`

        Lighten:
        - `LIGHTEN`
        - `SCREEN`
        - `LINEAR_DODGE`
        - `COLOR_DODGE`

        Contrast:
        - `OVERLAY`
        - `SOFT_LIGHT`
        - `HARD_LIGHT`

        Inversion:
        - `DIFFERENCE`
        - `EXCLUSION`

        Component:
        - `HUE`
        - `SATURATION`
        - `COLOR`
        - `LUMINOSITY`
      enum:
      - PASS_THROUGH
      - NORMAL
      - DARKEN
      - MULTIPLY
      - LINEAR_BURN
      - COLOR_BURN
      - LIGHTEN
      - SCREEN
      - LINEAR_DODGE
      - COLOR_DODGE
      - OVERLAY
      - SOFT_LIGHT
      - HARD_LIGHT
      - DIFFERENCE
      - EXCLUSION
      - HUE
      - SATURATION
      - COLOR
      - LUMINOSITY
      type: string
    Vector:
      description: A 2d vector.
      properties:
        x:
          description: X coordinate of the vector.
          type: number
        "y":
          description: Y coordinate of the vector.
          type: number
      required:
      - x
      - "y"
    ColorStop:
      description: "A single color stop with its position along the gradient axis,\
        \ color, and bound variables if any"
      properties:
        position:
          description: Value between 0 and 1 representing position along gradient
            axis.
          type: number
        color:
          $ref: '#/components/schemas/RGBA'
        boundVariables:
          $ref: '#/components/schemas/ColorStop_boundVariables'
      required:
      - color
      - position
    Transform:
      description: |-
        A transformation matrix is standard way in computer graphics to represent translation and rotation. These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1]. This is known as an affine transform and is enough to represent translation, rotation, and skew.

        The identity transform is [[1, 0, 0], [0, 1, 0]].

        A translation matrix will typically look like:

        ```
        [[1, 0, tx],
          [0, 1, ty]]
        ```

        and a rotation matrix will typically look like:

        ```
        [[cos(angle), sin(angle), 0],
          [-sin(angle), cos(angle), 0]]
        ```

        Another way to think about this transform is as three vectors:

        - The x axis (t[0][0], t[1][0])
        - The y axis (t[0][1], t[1][1])
        - The translation offset (t[0][2], t[1][2])

        The most common usage of the Transform matrix is the `relativeTransform property`. This particular usage of the matrix has a few additional restrictions. The translation offset can take on any value but we do enforce that the axis vectors are unit vectors (i.e. have length 1). The axes are not required to be at 90° angles to each other.
      items:
        items:
          type: number
        maxItems: 3
        minItems: 3
        type: array
      maxItems: 2
      minItems: 2
      type: array
    ImageFilters:
      description: Image filters to apply to the node.
      properties:
        exposure:
          default: 0
          type: number
        contrast:
          default: 0
          type: number
        saturation:
          default: 0
          type: number
        temperature:
          default: 0
          type: number
        tint:
          default: 0
          type: number
        highlights:
          default: 0
          type: number
        shadows:
          default: 0
          type: number
    BasePaint:
      properties:
        visible:
          default: true
          description: Is the paint enabled?
          type: boolean
        opacity:
          default: 1
          description: Overall opacity of paint (colors within the paint can also
            have opacity values which would blend with this)
          maximum: 1
          minimum: 0
          type: number
        blendMode:
          $ref: '#/components/schemas/BlendMode'
      required:
      - blendMode
    SolidPaint:
      allOf:
      - description: A solid color
        properties:
          type:
            description: The string literal "SOLID" representing the paint's type.
              Always check the `type` before reading other properties.
            enum:
            - SOLID
            type: string
          color:
            $ref: '#/components/schemas/RGBA'
          boundVariables:
            $ref: '#/components/schemas/SolidPaint_allOf_boundVariables'
        required:
        - color
        - type
      - $ref: '#/components/schemas/BasePaint'
    GradientPaint:
      allOf:
      - description: A gradient
        properties:
          type:
            description: The string literal representing the paint's type. Always
              check the `type` before reading other properties.
            enum:
            - GRADIENT_LINEAR
            - GRADIENT_RADIAL
            - GRADIENT_ANGULAR
            - GRADIENT_DIAMOND
            type: string
          gradientHandlePositions:
            description: "This field contains three vectors, each of which are a position\
              \ in normalized object space (normalized object space is if the top\
              \ left corner of the bounding box of the object is (0, 0) and the bottom\
              \ right is (1,1)). The first position corresponds to the start of the\
              \ gradient (value 0 for the purposes of calculating gradient stops),\
              \ the second position is the end of the gradient (value 1), and the\
              \ third handle position determines the width of the gradient."
            items:
              $ref: '#/components/schemas/Vector'
            type: array
          gradientStops:
            description: Positions of key points along the gradient axis with the
              colors anchored there. Colors along the gradient are interpolated smoothly
              between neighboring gradient stops.
            items:
              $ref: '#/components/schemas/ColorStop'
            type: array
        required:
        - gradientHandlePositions
        - gradientStops
        - type
      - $ref: '#/components/schemas/BasePaint'
    ImagePaint:
      allOf:
      - description: An image
        properties:
          type:
            description: The string literal "IMAGE" representing the paint's type.
              Always check the `type` before reading other properties.
            enum:
            - IMAGE
            type: string
          scaleMode:
            description: Image scaling mode.
            enum:
            - FILL
            - FIT
            - TILE
            - STRETCH
            type: string
          imageRef:
            description: "A reference to an image embedded in this node. To download\
              \ the image using this reference, use the `GET file images` endpoint\
              \ to retrieve the mapping from image references to image URLs."
            type: string
          imageTransform:
            $ref: '#/components/schemas/Transform'
          scalingFactor:
            description: "Amount image is scaled by in tiling, only present if scaleMode\
              \ is `TILE`."
            type: number
          filters:
            $ref: '#/components/schemas/ImageFilters'
          rotation:
            default: 0
            description: "Image rotation, in degrees."
            type: number
          gifRef:
            description: "A reference to an animated GIF embedded in this node. To\
              \ download the image using this reference, use the `GET file images`\
              \ endpoint to retrieve the mapping from image references to image URLs."
            type: string
        required:
        - imageRef
        - scaleMode
        - type
      - $ref: '#/components/schemas/BasePaint'
    Paint:
      oneOf:
      - $ref: '#/components/schemas/SolidPaint'
      - $ref: '#/components/schemas/GradientPaint'
      - $ref: '#/components/schemas/ImagePaint'
    LayoutConstraint:
      description: Layout constraint relative to containing Frame
      properties:
        vertical:
          description: |-
            Vertical constraint (relative to containing frame) as an enum:

            - `TOP`: Node is laid out relative to top of the containing frame
            - `BOTTOM`: Node is laid out relative to bottom of the containing frame
            - `CENTER`: Node is vertically centered relative to containing frame
            - `TOP_BOTTOM`: Both top and bottom of node are constrained relative to containing frame (node stretches with frame)
            - `SCALE`: Node scales vertically with containing frame
          enum:
          - TOP
          - BOTTOM
          - CENTER
          - TOP_BOTTOM
          - SCALE
          type: string
        horizontal:
          description: |-
            Horizontal constraint (relative to containing frame) as an enum:

            - `LEFT`: Node is laid out relative to left of the containing frame
            - `RIGHT`: Node is laid out relative to right of the containing frame
            - `CENTER`: Node is horizontally centered relative to containing frame
            - `LEFT_RIGHT`: Both left and right of node are constrained relative to containing frame (node stretches with frame)
            - `SCALE`: Node scales horizontally with containing frame
          enum:
          - LEFT
          - RIGHT
          - CENTER
          - LEFT_RIGHT
          - SCALE
          type: string
      required:
      - horizontal
      - vertical
    Rectangle:
      description: A rectangle that expresses a bounding box in absolute coordinates.
      properties:
        x:
          description: X coordinate of top left corner of the rectangle.
          type: number
        "y":
          description: Y coordinate of top left corner of the rectangle.
          type: number
        width:
          description: Width of the rectangle.
          type: number
        height:
          description: Height of the rectangle.
          type: number
      required:
      - height
      - width
      - x
      - "y"
    LayoutGrid:
      description: Guides to align and place objects within a frames.
      properties:
        pattern:
          description: |-
            Orientation of the grid as a string enum

            - `COLUMNS`: Vertical grid
            - `ROWS`: Horizontal grid
            - `GRID`: Square grid
          enum:
          - COLUMNS
          - ROWS
          - GRID
          type: string
        sectionSize:
          description: Width of column grid or height of row grid or square grid spacing.
          type: number
        visible:
          description: Is the grid currently visible?
          type: boolean
        color:
          $ref: '#/components/schemas/RGBA'
        alignment:
          description: |-
            Positioning of grid as a string enum

            - `MIN`: Grid starts at the left or top of the frame
            - `MAX`: Grid starts at the right or bottom of the frame
            - `STRETCH`: Grid is stretched to fit the frame
            - `CENTER`: Grid is center aligned
          enum:
          - MIN
          - MAX
          - STRETCH
          - CENTER
          type: string
        gutterSize:
          description: Spacing in between columns and rows
          type: number
        offset:
          description: Spacing before the first column or row
          type: number
        count:
          description: Number of columns or rows
          type: number
        boundVariables:
          $ref: '#/components/schemas/LayoutGrid_boundVariables'
      required:
      - alignment
      - color
      - count
      - gutterSize
      - offset
      - pattern
      - sectionSize
      - visible
    BaseShadowEffect:
      description: Base properties shared by all shadow effects
      properties:
        color:
          $ref: '#/components/schemas/RGBA'
        blendMode:
          $ref: '#/components/schemas/BlendMode'
        offset:
          $ref: '#/components/schemas/Vector'
        radius:
          description: Radius of the blur effect (applies to shadows as well)
          minimum: 0
          type: number
        spread:
          default: 0
          description: |-
            The distance by which to expand (or contract) the shadow.

            For drop shadows, a positive `spread` value creates a shadow larger than the node, whereas a negative value creates a shadow smaller than the node.

            For inner shadows, a positive `spread` value contracts the shadow. Spread values are only accepted on rectangles and ellipses, or on frames, components, and instances with visible fill paints and `clipsContent` enabled. When left unspecified, the default value is 0.
          type: number
        visible:
          description: Whether this shadow is visible.
          type: boolean
        boundVariables:
          $ref: '#/components/schemas/BaseShadowEffect_boundVariables'
      required:
      - blendMode
      - color
      - offset
      - radius
      - visible
    DropShadowEffect:
      allOf:
      - description: A drop shadow effect
        properties:
          type:
            description: A string literal representing the effect's type. Always check
              the type before reading other properties.
            enum:
            - DROP_SHADOW
            type: string
          showShadowBehindNode:
            default: false
            description: Whether to show the shadow behind translucent or transparent
              pixels
            type: boolean
        required:
        - showShadowBehindNode
        - type
      - $ref: '#/components/schemas/BaseShadowEffect'
    InnerShadowEffect:
      allOf:
      - description: An inner shadow effect
        properties:
          type:
            description: A string literal representing the effect's type. Always check
              the type before reading other properties.
            enum:
            - INNER_SHADOW
            type: string
      - $ref: '#/components/schemas/BaseShadowEffect'
    BlurEffect:
      description: A blur effect
      properties:
        type:
          description: A string literal representing the effect's type. Always check
            the type before reading other properties.
          enum:
          - LAYER_BLUR
          - BACKGROUND_BLUR
          type: string
        visible:
          description: Whether this blur is active.
          type: boolean
        radius:
          description: Radius of the blur effect
          minimum: 0
          type: number
        boundVariables:
          $ref: '#/components/schemas/BlurEffect_boundVariables'
      required:
      - radius
      - type
      - visible
    Effect:
      discriminator:
        mapping:
          DROP_SHADOW: '#/components/schemas/DropShadowEffect'
          INNER_SHADOW: '#/components/schemas/InnerShadowEffect'
          LAYER_BLUR: '#/components/schemas/BlurEffect'
          BACKGROUND_BLUR: '#/components/schemas/BlurEffect'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/DropShadowEffect'
      - $ref: '#/components/schemas/InnerShadowEffect'
      - $ref: '#/components/schemas/BlurEffect'
    Style:
      description: A set of properties that can be applied to nodes and published.
        Styles for a property can be created in the corresponding property's panel
        while editing a file.
      properties:
        key:
          description: The key of the style
          type: string
        name:
          description: Name of the style
          type: string
        description:
          description: Description of the style
          type: string
        remote:
          description: Whether this style is a remote style that doesn't live in this
            file
          type: boolean
        styleType:
          $ref: '#/components/schemas/StyleType'
      required:
      - description
      - key
      - name
      - remote
      - styleType
    EasingType:
      description: |-
        This type is a string enum with the following possible values:

        - `EASE_IN`: Ease in with an animation curve similar to CSS ease-in.
        - `EASE_OUT`: Ease out with an animation curve similar to CSS ease-out.
        - `EASE_IN_AND_OUT`: Ease in and then out with an animation curve similar to CSS ease-in-out.
        - `LINEAR`: No easing, similar to CSS linear.
        - `EASE_IN_BACK`: Ease in with an animation curve that moves past the initial keyframe's value and then accelerates as it reaches the end.
        - `EASE_OUT_BACK`: Ease out with an animation curve that starts fast, then slows and goes past the ending keyframe's value.
        - `EASE_IN_AND_OUT_BACK`: Ease in and then out with an animation curve that overshoots the initial keyframe's value, then accelerates quickly before it slows and overshoots the ending keyframes value.
        - `CUSTOM_CUBIC_BEZIER`: User-defined cubic bezier curve.
        - `GENTLE`: Gentle animation similar to react-spring.
        - `QUICK`: Quick spring animation, great for toasts and notifications.
        - `BOUNCY`: Bouncy spring, for delightful animations like a heart bounce.
        - `SLOW`: Slow spring, useful as a steady, natural way to scale up fullscreen content.
        - `CUSTOM_SPRING`: User-defined spring animation.
      enum:
      - EASE_IN
      - EASE_OUT
      - EASE_IN_AND_OUT
      - LINEAR
      - EASE_IN_BACK
      - EASE_OUT_BACK
      - EASE_IN_AND_OUT_BACK
      - CUSTOM_CUBIC_BEZIER
      - GENTLE
      - QUICK
      - BOUNCY
      - SLOW
      - CUSTOM_SPRING
      type: string
    StrokeWeights:
      description: Individual stroke weights
      properties:
        top:
          description: The top stroke weight.
          type: number
        right:
          description: The right stroke weight.
          type: number
        bottom:
          description: The bottom stroke weight.
          type: number
        left:
          description: The left stroke weight.
          type: number
      required:
      - bottom
      - left
      - right
      - top
    PaintOverride:
      description: Paint metadata to override default paints.
      properties:
        fills:
          description: Paints applied to characters.
          items:
            $ref: '#/components/schemas/Paint'
          type: array
        inheritFillStyleId:
          description: "ID of style node, if any, that this inherits fill data from."
          type: string
    Path:
      description: Defines a single path
      properties:
        path:
          description: A series of path commands that encodes how to draw the path.
          type: string
        windingRule:
          description: The winding rule for the path (same as in SVGs). This determines
            whether a given point in space is inside or outside the path.
          enum:
          - NONZERO
          - EVENODD
          type: string
        overrideID:
          description: "If there is a per-region fill, this refers to an ID in the\
            \ `fillOverrideTable`."
          type: number
      required:
      - path
      - windingRule
    ArcData:
      description: Information about the arc properties of an ellipse. 0° is the x
        axis and increasing angles rotate clockwise.
      properties:
        startingAngle:
          default: 0
          description: Start of the sweep in radians.
          type: number
        endingAngle:
          default: 0
          description: End of the sweep in radians.
          type: number
        innerRadius:
          default: 0
          description: Inner radius value between 0 and 1
          maximum: 1
          minimum: 0
          type: number
      required:
      - endingAngle
      - innerRadius
      - startingAngle
    Hyperlink:
      description: A link to either a URL or another frame (node) in the document.
      properties:
        type:
          description: The type of hyperlink. Can be either `URL` or `NODE`.
          enum:
          - URL
          - NODE
          type: string
        url:
          description: "The URL that the hyperlink points to, if `type` is `URL`."
          type: string
        nodeID:
          description: "The ID of the node that the hyperlink points to, if `type`\
            \ is `NODE`."
          type: string
      required:
      - type
    TypeStyle:
      description: Metadata for character formatting.
      properties:
        fontFamily:
          description: Font family of text (standard name).
          type: string
        fontPostScriptName:
          description: PostScript font name.
          nullable: true
          type: string
        paragraphSpacing:
          default: 0
          description: "Space between paragraphs in px, 0 if not present."
          type: number
        paragraphIndent:
          default: 0
          description: "Paragraph indentation in px, 0 if not present."
          type: number
        listSpacing:
          default: 0
          description: "Space between list items in px, 0 if not present."
          type: number
        italic:
          default: false
          description: Whether or not text is italicized.
          type: boolean
        fontWeight:
          description: Numeric font weight.
          type: number
        fontSize:
          description: Font size in px.
          type: number
        textCase:
          description: "Text casing applied to the node, default is the original casing."
          enum:
          - UPPER
          - LOWER
          - TITLE
          - SMALL_CAPS
          - SMALL_CAPS_FORCED
          type: string
        textDecoration:
          default: NONE
          description: "Text decoration applied to the node, default is none."
          enum:
          - NONE
          - STRIKETHROUGH
          - UNDERLINE
          type: string
        textAutoResize:
          default: NONE
          description: "Dimensions along which text will auto resize, default is that\
            \ the text does not auto-resize. TRUNCATE means that the text will be\
            \ shortened and trailing text will be replaced with \"…\" if the text\
            \ contents is larger than the bounds. `TRUNCATE` as a return value is\
            \ deprecated and will be removed in a future version. Read from `textTruncation`\
            \ instead."
          enum:
          - NONE
          - WIDTH_AND_HEIGHT
          - HEIGHT
          - TRUNCATE
          type: string
        textTruncation:
          default: DISABLED
          description: Whether this text node will truncate with an ellipsis when
            the text contents is larger than the text node.
          enum:
          - DISABLED
          - ENDING
          type: string
        maxLines:
          description: "When `textTruncation: \"ENDING\"` is set, `maxLines` determines\
            \ how many lines a text node can grow to before it truncates."
          type: number
        textAlignHorizontal:
          description: Horizontal text alignment as string enum.
          enum:
          - LEFT
          - RIGHT
          - CENTER
          - JUSTIFIED
          type: string
        textAlignVertical:
          description: Vertical text alignment as string enum.
          enum:
          - TOP
          - CENTER
          - BOTTOM
          type: string
        letterSpacing:
          description: Space between characters in px.
          type: number
        fills:
          description: An array of fill paints applied to the characters.
          items:
            $ref: '#/components/schemas/Paint'
          type: array
        hyperlink:
          $ref: '#/components/schemas/Hyperlink'
        opentypeFlags:
          additionalProperties:
            type: number
          description: "A map of OpenType feature flags to 1 or 0, 1 if it is enabled\
            \ and 0 if it is disabled. Note that some flags aren't reflected here.\
            \ For example, SMCP (small caps) is still represented by the `textCase`\
            \ field."
        lineHeightPx:
          description: Line height in px.
          type: number
        lineHeightPercent:
          default: 100
          description: Line height as a percentage of normal line height. This is
            deprecated; in a future version of the API only lineHeightPx and lineHeightPercentFontSize
            will be returned.
          type: number
        lineHeightPercentFontSize:
          description: Line height as a percentage of the font size. Only returned
            when `lineHeightPercent` (deprecated) is not 100.
          type: number
        lineHeightUnit:
          description: The unit of the line height value specified by the user.
          enum:
          - PIXELS
          - FONT_SIZE_%
          - INTRINSIC_%
          type: string
        boundVariables:
          $ref: '#/components/schemas/TypeStyle_boundVariables'
        isOverrideOverTextStyle:
          description: " Whether or not this style has overrides over a text style.\
            \ The possible fields to override are semanticWeight, semanticItalic,\
            \ hyperlink, and textDecoration. If this is true, then those fields are\
            \ overrides if present."
          type: boolean
        semanticWeight:
          description: Indicates how the font weight was overridden when there is
            a text style override.
          enum:
          - BOLD
          - NORMAL
          type: string
        semanticItalic:
          description: Indicates how the font style was overridden when there is a
            text style override.
          enum:
          - ITALIC
          - NORMAL
          type: string
    ComponentPropertyType:
      description: Component property type.
      enum:
      - BOOLEAN
      - INSTANCE_SWAP
      - TEXT
      - VARIANT
      type: string
    InstanceSwapPreferredValue:
      description: Instance swap preferred value.
      properties:
        type:
          description: Type of node for this preferred value.
          enum:
          - COMPONENT
          - COMPONENT_SET
          type: string
        key:
          description: Key of this component or component set.
          type: string
      required:
      - key
      - type
    ComponentPropertyDefinition:
      description: A property of a component.
      properties:
        type:
          $ref: '#/components/schemas/ComponentPropertyType'
        defaultValue:
          $ref: '#/components/schemas/ComponentPropertyDefinition_defaultValue'
        variantOptions:
          description: All possible values for this property. Only exists on VARIANT
            properties.
          items:
            type: string
          type: array
        preferredValues:
          description: Preferred values for this property. Only applicable if type
            is `INSTANCE_SWAP`.
          items:
            $ref: '#/components/schemas/InstanceSwapPreferredValue'
          type: array
      required:
      - defaultValue
      - type
    ComponentProperty:
      description: A property of a component.
      properties:
        type:
          $ref: '#/components/schemas/ComponentPropertyType'
        value:
          $ref: '#/components/schemas/ComponentProperty_value'
        preferredValues:
          description: Preferred values for this property. Only applicable if type
            is `INSTANCE_SWAP`.
          items:
            $ref: '#/components/schemas/InstanceSwapPreferredValue'
          type: array
        boundVariables:
          $ref: '#/components/schemas/ComponentProperty_boundVariables'
      required:
      - type
      - value
    Overrides:
      description: Fields directly overridden on an instance. Inherited overrides
        are not included.
      properties:
        id:
          description: A unique ID for a node.
          type: string
        overriddenFields:
          description: An array of properties.
          items:
            type: string
          type: array
      required:
      - id
      - overriddenFields
    ShapeType:
      description: Geometric shape type.
      enum:
      - SQUARE
      - ELLIPSE
      - ROUNDED_RECTANGLE
      - DIAMOND
      - TRIANGLE_UP
      - TRIANGLE_DOWN
      - PARALLELOGRAM_RIGHT
      - PARALLELOGRAM_LEFT
      - ENG_DATABASE
      - ENG_QUEUE
      - ENG_FILE
      - ENG_FOLDER
      - TRAPEZOID
      - PREDEFINED_PROCESS
      - SHIELD
      - DOCUMENT_SINGLE
      - DOCUMENT_MULTIPLE
      - MANUAL_INPUT
      - HEXAGON
      - CHEVRON
      - PENTAGON
      - OCTAGON
      - STAR
      - PLUS
      - ARROW_LEFT
      - ARROW_RIGHT
      - SUMMING_JUNCTION
      - OR
      - SPEECH_BUBBLE
      - INTERNAL_STORAGE
      type: string
    ConnectorEndpoint:
      description: Stores canvas location for a connector start/end point.
      oneOf:
      - $ref: '#/components/schemas/ConnectorEndpoint_oneOf'
      - $ref: '#/components/schemas/ConnectorEndpoint_oneOf_1'
    ConnectorLineType:
      description: Connector line type.
      enum:
      - STRAIGHT
      - ELBOWED
      type: string
    ConnectorTextBackground:
      allOf:
      - $ref: '#/components/schemas/CornerTrait'
      - $ref: '#/components/schemas/MinimalFillsTrait'
    Component:
      description: A description of a main component. Helps you identify which component
        instances are attached to.
      properties:
        key:
          description: The key of the component
          type: string
        name:
          description: Name of the component
          type: string
        description:
          description: The description of the component as entered in the editor
          type: string
        componentSetId:
          description: The ID of the component set if the component belongs to one
          type: string
        documentationLinks:
          description: An array of documentation links attached to this component
          items:
            $ref: '#/components/schemas/DocumentationLink'
          type: array
        remote:
          description: Whether this component is a remote component that doesn't live
            in this file
          type: boolean
      required:
      - description
      - documentationLinks
      - key
      - name
      - remote
    ComponentSet:
      description: "A description of a component set, which is a node containing a\
        \ set of variants of a component."
      properties:
        key:
          description: The key of the component set
          type: string
        name:
          description: Name of the component set
          type: string
        description:
          description: The description of the component set as entered in the editor
          type: string
        documentationLinks:
          description: An array of documentation links attached to this component
            set
          items:
            $ref: '#/components/schemas/DocumentationLink'
          type: array
        remote:
          description: Whether this component set is a remote component set that doesn't
            live in this file
          type: boolean
      required:
      - description
      - key
      - name
    DocumentationLink:
      description: Represents a link to documentation for a component or component
        set.
      properties:
        uri:
          description: Should be a valid URI (e.g. https://www.figma.com).
          type: string
      required:
      - uri
    VariableAlias:
      description: Contains a variable alias
      properties:
        type:
          enum:
          - VARIABLE_ALIAS
          type: string
        id:
          description: "The id of the variable that the current variable is aliased\
            \ to. This variable can be a local or remote variable, and both can be\
            \ retrieved via the GET /v1/files/:file_key/variables/local endpoint."
          type: string
      required:
      - id
      - type
    Interaction:
      description: "An interaction in the Figma viewer, containing a trigger and one\
        \ or more actions."
      properties:
        trigger:
          $ref: '#/components/schemas/Trigger'
        actions:
          description: The actions that are performed when the trigger is activated.
          items:
            $ref: '#/components/schemas/Action'
          type: array
      required:
      - trigger
    Trigger:
      description: "The `\"ON_HOVER\"` and `\"ON_PRESS\"` trigger types revert the\
        \ navigation when the trigger is finished (the result is temporary). \n`\"\
        MOUSE_ENTER\"`, `\"MOUSE_LEAVE\"`, `\"MOUSE_UP\"` and `\"MOUSE_DOWN\"` are\
        \ permanent, one-way navigation.\nThe `delay` parameter requires the trigger\
        \ to be held for a certain duration of time before the action occurs.\nBoth\
        \ `timeout` and `delay` values are in milliseconds.\nThe `\"ON_MEDIA_HIT\"\
        ` and `\"ON_MEDIA_END\"` trigger types can only trigger from a video. \nThey\
        \ fire when a video reaches a certain time or ends. The `timestamp` value\
        \ is in seconds."
      oneOf:
      - $ref: '#/components/schemas/Trigger_oneOf'
      - $ref: '#/components/schemas/AfterTimeoutTrigger'
      - $ref: '#/components/schemas/Trigger_oneOf_1'
      - $ref: '#/components/schemas/OnKeyDownTrigger'
      - $ref: '#/components/schemas/OnMediaHitTrigger'
      - $ref: '#/components/schemas/Trigger_oneOf_2'
    AfterTimeoutTrigger:
      properties:
        type:
          enum:
          - AFTER_TIMEOUT
          type: string
        timeout:
          type: number
      required:
      - timeout
      - type
    OnKeyDownTrigger:
      properties:
        type:
          enum:
          - ON_KEY_DOWN
          type: string
        device:
          enum:
          - KEYBOARD
          - XBOX_ONE
          - PS4
          - SWITCH_PRO
          - UNKNOWN_CONTROLLER
          type: string
        keyCodes:
          items:
            type: number
          type: array
      required:
      - device
      - keyCodes
      - type
    OnMediaHitTrigger:
      properties:
        type:
          enum:
          - ON_MEDIA_HIT
          type: string
        mediaHitTime:
          type: number
      required:
      - mediaHitTime
      - type
    Action:
      description: An action that is performed when a trigger is activated.
      oneOf:
      - $ref: '#/components/schemas/Action_oneOf'
      - $ref: '#/components/schemas/OpenURLAction'
      - $ref: '#/components/schemas/UpdateMediaRuntimeAction'
      - $ref: '#/components/schemas/SetVariableAction'
      - $ref: '#/components/schemas/SetVariableModeAction'
      - $ref: '#/components/schemas/ConditionalAction'
      - $ref: '#/components/schemas/NodeAction'
    OpenURLAction:
      description: An action that opens a URL.
      properties:
        type:
          enum:
          - URL
          type: string
        url:
          type: string
      required:
      - type
      - url
    UpdateMediaRuntimeAction:
      description: "An action that affects a video node in the Figma viewer. For example,\
        \ to play, pause, or skip."
      oneOf:
      - $ref: '#/components/schemas/UpdateMediaRuntimeAction_oneOf'
      - $ref: '#/components/schemas/UpdateMediaRuntimeAction_oneOf_1'
      - $ref: '#/components/schemas/UpdateMediaRuntimeAction_oneOf_2'
    NodeAction:
      description: An action that navigates to a specific node in the Figma viewer.
      properties:
        type:
          enum:
          - NODE
          type: string
        destinationId:
          nullable: true
          type: string
        navigation:
          $ref: '#/components/schemas/Navigation'
        transition:
          $ref: '#/components/schemas/Transition'
        preserveScrollPosition:
          description: Whether the scroll offsets of any scrollable elements in the
            current screen or overlay are preserved when navigating to the destination.
            This is applicable only if the layout of both the current frame and its
            destination are the same.
          type: boolean
        overlayRelativePosition:
          $ref: '#/components/schemas/Vector'
        resetVideoPosition:
          description: "When true, all videos within the destination frame will reset\
            \ their memorized playback position to 00:00 before starting to play."
          type: boolean
        resetScrollPosition:
          description: Whether the scroll offsets of any scrollable elements in the
            current screen or overlay reset when navigating to the destination. This
            is applicable only if the layout of both the current frame and its destination
            are the same.
          type: boolean
        resetInteractiveComponents:
          description: Whether the state of any interactive components in the current
            screen or overlay reset when navigating to the destination. This is applicable
            if there are interactive components in the destination frame.
          type: boolean
      required:
      - destinationId
      - navigation
      - transition
      - type
    Navigation:
      description: "The method of navigation. The possible values are:\n- `\"NAVIGATE\"\
        `: Replaces the current screen with the destination, also closing all overlays.\n\
        - `\"OVERLAY\"`: Opens the destination as an overlay on the current screen.\n\
        - `\"SWAP\"`: On an overlay, replaces the current (topmost) overlay with the\
        \ destination. On a top-level frame, \n  behaves the same as `\"NAVIGATE\"\
        ` except that no entry is added to the navigation history.\n- `\"SCROLL_TO\"\
        `: Scrolls to the destination on the current screen.\n- `\"CHANGE_TO\"`: Changes\
        \ the closest ancestor instance of source node to the specified variant."
      enum:
      - NAVIGATE
      - SWAP
      - OVERLAY
      - SCROLL_TO
      - CHANGE_TO
      type: string
    Transition:
      oneOf:
      - $ref: '#/components/schemas/SimpleTransition'
      - $ref: '#/components/schemas/DirectionalTransition'
    SimpleTransition:
      description: Describes an animation used when navigating in a prototype.
      properties:
        type:
          enum:
          - DISSOLVE
          - SMART_ANIMATE
          - SCROLL_ANIMATE
          type: string
        duration:
          description: The duration of the transition in milliseconds.
          type: number
        easing:
          $ref: '#/components/schemas/Easing'
      required:
      - duration
      - easing
      - type
    DirectionalTransition:
      description: Describes an animation used when navigating in a prototype.
      properties:
        type:
          enum:
          - MOVE_IN
          - MOVE_OUT
          - PUSH
          - SLIDE_IN
          - SLIDE_OUT
          type: string
        direction:
          enum:
          - LEFT
          - RIGHT
          - TOP
          - BOTTOM
          type: string
        duration:
          description: The duration of the transition in milliseconds.
          type: number
        easing:
          $ref: '#/components/schemas/Easing'
        matchLayers:
          description: "When the transition `type` is `\"SMART_ANIMATE\"` or when\
            \ `matchLayers` is `true`, then the transition will be performed using\
            \ smart animate, which attempts to match corresponding layers an interpolate\
            \ other properties during the animation."
          type: boolean
      required:
      - direction
      - duration
      - easing
      - type
    Easing:
      description: Describes an easing curve.
      properties:
        type:
          $ref: '#/components/schemas/EasingType'
        easingFunctionCubicBezier:
          $ref: '#/components/schemas/Easing_easingFunctionCubicBezier'
        easingFunctionSpring:
          $ref: '#/components/schemas/Easing_easingFunctionSpring'
      required:
      - type
    SetVariableAction:
      description: Sets a variable to a specific value.
      properties:
        type:
          enum:
          - SET_VARIABLE
          type: string
        variableId:
          nullable: true
          type: string
        variableValue:
          $ref: '#/components/schemas/VariableData'
      required:
      - type
      - variableId
    SetVariableModeAction:
      description: Sets a variable to a specific mode.
      properties:
        type:
          enum:
          - SET_VARIABLE_MODE
          type: string
        variableCollectionId:
          nullable: true
          type: string
        variableModeId:
          nullable: true
          type: string
      required:
      - type
    ConditionalAction:
      description: Checks if a condition is met before performing certain actions
        by using an if/else conditional statement.
      properties:
        type:
          enum:
          - CONDITIONAL
          type: string
        conditionalBlocks:
          items:
            $ref: '#/components/schemas/ConditionalBlock'
          type: array
      required:
      - conditionalBlocks
      - type
    VariableData:
      description: A value to set a variable to during prototyping.
      properties:
        type:
          $ref: '#/components/schemas/VariableDataType'
        resolvedType:
          $ref: '#/components/schemas/VariableResolvedDataType'
        value:
          $ref: '#/components/schemas/VariableData_value'
    VariableDataType:
      description: Defines the types of data a VariableData object can hold
      enum:
      - BOOLEAN
      - FLOAT
      - STRING
      - COLOR
      - VARIABLE_ALIAS
      - EXPRESSION
      type: string
    VariableResolvedDataType:
      description: Defines the types of data a VariableData object can eventually
        equal
      enum:
      - BOOLEAN
      - FLOAT
      - STRING
      - COLOR
      type: string
    Expression:
      description: "Defines the [Expression](https://help.figma.com/hc/en-us/articles/15253194385943)\
        \ object, which contains a list of `VariableData` objects strung together\
        \ by operators (`ExpressionFunction`)."
      properties:
        expressionFunction:
          $ref: '#/components/schemas/ExpressionFunction'
        expressionArguments:
          items:
            $ref: '#/components/schemas/VariableData'
          type: array
      required:
      - expressionArguments
      - expressionFunction
    ExpressionFunction:
      description: Defines the list of operators available to use in an Expression.
      enum:
      - ADDITION
      - SUBTRACTION
      - MULTIPLICATION
      - DIVISION
      - EQUALS
      - NOT_EQUAL
      - LESS_THAN
      - LESS_THAN_OR_EQUAL
      - GREATER_THAN
      - GREATER_THAN_OR_EQUAL
      - AND
      - OR
      - VAR_MODE_LOOKUP
      - NEGATE
      - NOT
      type: string
    ConditionalBlock:
      description: "Either the if or else conditional blocks. The if block contains\
        \ a condition to check. If that condition is met then it will run those list\
        \ of actions, else it will run the actions in the else block."
      properties:
        condition:
          $ref: '#/components/schemas/VariableData'
        actions:
          items:
            $ref: '#/components/schemas/Action'
          type: array
      required:
      - actions
    Measurement:
      description: A pinned distance between two nodes in Dev Mode
      properties:
        id:
          type: string
        start:
          $ref: '#/components/schemas/MeasurementStartEnd'
        end:
          $ref: '#/components/schemas/MeasurementStartEnd'
        offset:
          $ref: '#/components/schemas/Measurement_offset'
        freeText:
          description: "When manually overridden, the displayed value of the measurement"
          type: string
      required:
      - end
      - id
      - offset
      - start
    MeasurementStartEnd:
      description: The node and side a measurement is pinned to
      properties:
        nodeId:
          type: string
        side:
          enum:
          - TOP
          - RIGHT
          - BOTTOM
          - LEFT
          type: string
      required:
      - nodeId
      - side
    MeasurementOffsetInner:
      description: Measurement offset relative to the inside of the start node
      properties:
        type:
          enum:
          - INNER
          type: string
        relative:
          type: number
      required:
      - relative
      - type
    MeasurementOffsetOuter:
      description: Measurement offset relative to the outside of the start node
      properties:
        type:
          enum:
          - OUTER
          type: string
        fixed:
          type: number
      required:
      - fixed
      - type
    FrameOffset:
      description: Position of a comment relative to the frame to which it is attached.
      properties:
        node_id:
          description: Unique id specifying the frame.
          type: string
        node_offset:
          $ref: '#/components/schemas/Vector'
      required:
      - node_id
      - node_offset
    Region:
      description: Position of a region comment on the canvas.
      properties:
        x:
          description: X coordinate of the position.
          type: number
        "y":
          description: Y coordinate of the position.
          type: number
        region_height:
          description: The height of the comment region. Must be greater than 0.
          type: number
        region_width:
          description: The width of the comment region. Must be greater than 0.
          type: number
        comment_pin_corner:
          default: bottom-right
          description: The corner of the comment region to pin to the node's corner
            as a string enum.
          enum:
          - top-left
          - top-right
          - bottom-left
          - bottom-right
          type: string
      required:
      - region_height
      - region_width
      - x
      - "y"
    FrameOffsetRegion:
      description: Position of a region comment relative to the frame to which it
        is attached.
      properties:
        node_id:
          description: Unique id specifying the frame.
          type: string
        node_offset:
          $ref: '#/components/schemas/Vector'
        region_height:
          description: The height of the comment region. Must be greater than 0.
          type: number
        region_width:
          description: The width of the comment region. Must be greater than 0.
          type: number
        comment_pin_corner:
          default: bottom-right
          description: The corner of the comment region to pin to the node's corner
            as a string enum.
          enum:
          - top-left
          - top-right
          - bottom-left
          - bottom-right
          type: string
      required:
      - node_id
      - node_offset
      - region_height
      - region_width
    Comment:
      description: A comment or reply left by a user.
      properties:
        id:
          description: Unique identifier for comment.
          type: string
        client_meta:
          $ref: '#/components/schemas/Comment_client_meta'
        file_key:
          description: The file in which the comment lives
          type: string
        parent_id:
          description: "If present, the id of the comment to which this is the reply"
          type: string
        user:
          $ref: '#/components/schemas/User'
        created_at:
          description: The UTC ISO 8601 time at which the comment was left
          format: date-time
          type: string
        resolved_at:
          description: "If set, the UTC ISO 8601 time the comment was resolved"
          format: date-time
          nullable: true
          type: string
        message:
          description: The content of the comment
          type: string
        order_id:
          description: Only set for top level comments. The number displayed with
            the comment in the UI
          nullable: true
          type: string
        reactions:
          description: An array of reactions to the comment
          items:
            $ref: '#/components/schemas/Reaction'
          type: array
      required:
      - client_meta
      - created_at
      - file_key
      - id
      - message
      - order_id
      - reactions
      - user
    Reaction:
      description: A reaction left by a user.
      properties:
        user:
          $ref: '#/components/schemas/User'
        emoji:
          description: "The emoji type of reaction as shortcode (e.g. `:heart:`, `:+1::skin-tone-2:`).\
            \ The list of accepted emoji shortcodes can be found in [this file](https://raw.githubusercontent.com/missive/emoji-mart/main/packages/emoji-mart-data/sets/14/native.json)\
            \ under the top-level emojis and aliases fields, with optional skin tone\
            \ modifiers when applicable."
          type: string
        created_at:
          description: The UTC ISO 8601 time at which the reaction was left.
          format: date-time
          type: string
      required:
      - created_at
      - emoji
      - user
    Emoji:
      description: "The emoji type of reaction as shortcode (e.g. `:heart:`, `:+1::skin-tone-2:`).\
        \ The list of accepted emoji shortcodes can be found in [this file](https://raw.githubusercontent.com/missive/emoji-mart/main/packages/emoji-mart-data/sets/14/native.json)\
        \ under the top-level emojis and aliases fields, with optional skin tone modifiers\
        \ when applicable."
      type: string
    User:
      description: A description of a user.
      example:
        img_url: img_url
        handle: handle
        id: id
      properties:
        id:
          description: Unique stable id of the user.
          type: string
        handle:
          description: Name of the user.
          type: string
        img_url:
          description: URL link to the user's profile image.
          type: string
      required:
      - handle
      - id
      - img_url
    FrameInfo:
      description: Data on the frame a component resides in.
      properties:
        nodeId:
          description: The ID of the frame node within the file.
          type: string
        name:
          description: The name of the frame node.
          type: string
        backgroundColor:
          description: The background color of the frame node.
          type: string
        pageId:
          description: The ID of the page containing the frame node.
          type: string
        pageName:
          description: The name of the page containing the frame node.
          type: string
      required:
      - pageId
      - pageName
    PublishedComponent:
      description: An arrangement of published UI elements that can be instantiated
        across figma files.
      properties:
        key:
          description: The unique identifier for the component.
          type: string
        file_key:
          description: The unique identifier of the Figma file that contains the component.
          type: string
        node_id:
          description: The unique identifier of the component node within the Figma
            file.
          type: string
        thumbnail_url:
          description: A URL to a thumbnail image of the component.
          type: string
        name:
          description: The name of the component.
          type: string
        description:
          description: The description of the component as entered by the publisher.
          type: string
        created_at:
          description: The UTC ISO 8601 time when the component was created.
          format: date-time
          type: string
        updated_at:
          description: The UTC ISO 8601 time when the component was last updated.
          format: date-time
          type: string
        user:
          $ref: '#/components/schemas/User'
        containing_frame:
          $ref: '#/components/schemas/FrameInfo'
      required:
      - created_at
      - description
      - file_key
      - key
      - name
      - node_id
      - updated_at
      - user
    PublishedComponentSet:
      description: A node containing a set of variants of a component.
      properties:
        key:
          description: The unique identifier for the component set.
          type: string
        file_key:
          description: The unique identifier of the Figma file that contains the component
            set.
          type: string
        node_id:
          description: The unique identifier of the component set node within the
            Figma file.
          type: string
        thumbnail_url:
          description: A URL to a thumbnail image of the component set.
          type: string
        name:
          description: The name of the component set.
          type: string
        description:
          description: The description of the component set as entered by the publisher.
          type: string
        created_at:
          description: The UTC ISO 8601 time when the component set was created.
          format: date-time
          type: string
        updated_at:
          description: The UTC ISO 8601 time when the component set was last updated.
          format: date-time
          type: string
        user:
          $ref: '#/components/schemas/User'
        containing_frame:
          $ref: '#/components/schemas/FrameInfo'
      required:
      - created_at
      - description
      - file_key
      - key
      - name
      - node_id
      - updated_at
      - user
    StyleType:
      description: The type of style
      enum:
      - FILL
      - TEXT
      - EFFECT
      - GRID
      type: string
    PublishedStyle:
      description: A set of published properties that can be applied to nodes.
      properties:
        key:
          description: The unique identifier for the style
          type: string
        file_key:
          description: The unique identifier of the Figma file that contains the style.
          type: string
        node_id:
          description: ID of the style node within the figma file
          type: string
        style_type:
          $ref: '#/components/schemas/StyleType'
        thumbnail_url:
          description: A URL to a thumbnail image of the style.
          type: string
        name:
          description: The name of the style.
          type: string
        description:
          description: The description of the style as entered by the publisher.
          type: string
        created_at:
          description: The UTC ISO 8601 time when the style was created.
          format: date-time
          type: string
        updated_at:
          description: The UTC ISO 8601 time when the style was last updated.
          format: date-time
          type: string
        user:
          $ref: '#/components/schemas/User'
        sort_position:
          description: A user specified order number by which the style can be sorted.
          type: string
      required:
      - created_at
      - description
      - file_key
      - key
      - name
      - node_id
      - sort_position
      - style_type
      - updated_at
      - user
    Project:
      description: "A Project can be identified by both the Project name, and the\
        \ Project ID."
      properties:
        id:
          description: The ID of the project.
          type: string
        name:
          description: The name of the project.
          type: string
      required:
      - id
      - name
    Version:
      description: A version of a file
      properties:
        id:
          description: Unique identifier for version
          type: string
        created_at:
          description: The UTC ISO 8601 time at which the version was created
          format: date-time
          type: string
        label:
          description: The label given to the version in the editor
          nullable: true
          type: string
        description:
          description: The description of the version as entered in the editor
          nullable: true
          type: string
        user:
          $ref: '#/components/schemas/User'
        thumbnail_url:
          description: A URL to a thumbnail image of the file version.
          type: string
      required:
      - created_at
      - description
      - id
      - label
      - user
    WebhookV2:
      description: A description of an HTTP webhook (from Figma back to your application)
      properties:
        id:
          description: The ID of the webhook
          type: string
        event_type:
          $ref: '#/components/schemas/WebhookV2Event'
        team_id:
          description: The team id you are subscribed to for updates
          type: string
        status:
          $ref: '#/components/schemas/WebhookV2Status'
        client_id:
          description: "The client ID of the OAuth application that registered this\
            \ webhook, if any"
          nullable: true
          type: string
        passcode:
          description: The passcode that will be passed back to the webhook endpoint
          type: string
        endpoint:
          description: The endpoint that will be hit when the webhook is triggered
          type: string
        description:
          description: Optional user-provided description or name for the webhook.
            This is provided to help make maintaining a number of webhooks more convenient.
            Max length 140 characters.
          nullable: true
          type: string
      required:
      - client_id
      - description
      - endpoint
      - event_type
      - id
      - passcode
      - status
      - team_id
    WebhookV2Event:
      description: An enum representing the possible events that a webhook can subscribe
        to
      enum:
      - PING
      - FILE_UPDATE
      - FILE_VERSION_UPDATE
      - FILE_DELETE
      - LIBRARY_PUBLISH
      - FILE_COMMENT
      type: string
    WebhookV2Status:
      description: |-
        An enum representing the possible statuses you can set a webhook to:
        - `ACTIVE`: The webhook is healthy and receive all events
        - `PAUSED`: The webhook is paused and will not receive any events
      enum:
      - ACTIVE
      - PAUSED
      type: string
    WebhookV2Request:
      description: Information regarding the most recent interactions sent to a webhook
        endpoint
      properties:
        webhook_id:
          description: The ID of the webhook the requests were sent to
          type: string
        request_info:
          $ref: '#/components/schemas/WebhookV2RequestInfo'
        response_info:
          $ref: '#/components/schemas/WebhookV2ResponseInfo'
        error_msg:
          description: Error message for this request. NULL if no error occurred
          nullable: true
          type: string
      required:
      - error_msg
      - request_info
      - response_info
      - webhook_id
    WebhookV2RequestInfo:
      description: Information regarding the request sent to a webhook endpoint
      properties:
        id:
          description: The ID of the webhook
          type: string
        endpoint:
          description: The actual endpoint the request was sent to
          type: string
        payload:
          description: The contents of the request that was sent to the endpoint
          type: object
        sent_at:
          description: UTC ISO 8601 timestamp of when the request was sent
          format: date-time
          type: string
      required:
      - endpoint
      - id
      - payload
      - sent_at
    WebhookV2ResponseInfo:
      description: Information regarding the reply sent back from a webhook endpoint
      properties:
        status:
          description: HTTP status code of the response
          type: string
        received_at:
          description: UTC ISO 8601 timestamp of when the response was received
          format: date-time
          type: string
      required:
      - received_at
      - status
    LibraryItemData:
      description: An object representing the library item information in the payload
        of the `LIBRARY_PUBLISH` event
      example:
        name: name
        key: key
      properties:
        key:
          description: Unique identifier for the library item
          type: string
        name:
          description: Name of the library item
          type: string
      required:
      - key
      - name
    CommentFragment:
      description: "An object representing a fragment of a comment left by a user,\
        \ used in the payload of the `FILE_COMMENT` event. Note only ONE of the fields\
        \ below will be set"
      example:
        text: text
        mention: mention
      properties:
        text:
          description: Comment text that is set if a fragment is text based
          type: string
        mention:
          description: User id that is set if a fragment refers to a user mention
          type: string
    WebhookBasePayload:
      properties:
        passcode:
          description: "The passcode specified when the webhook was created, should\
            \ match what was initially provided"
          type: string
        timestamp:
          description: UTC ISO 8601 timestamp of when the event was triggered.
          format: date-time
          type: string
        webhook_id:
          description: The id of the webhook that caused the callback
          type: string
      required:
      - passcode
      - timestamp
      - webhook_id
    WebhookPingPayload:
      allOf:
      - $ref: '#/components/schemas/WebhookBasePayload'
      - properties:
          event_type:
            enum:
            - PING
            type: string
        required:
        - event_type
      example:
        event_type: PING
        webhook_id: webhook_id
        passcode: passcode
        timestamp: 2000-01-23T04:56:07.000+00:00
    WebhookFileUpdatePayload:
      allOf:
      - $ref: '#/components/schemas/WebhookBasePayload'
      - properties:
          event_type:
            enum:
            - FILE_UPDATE
            type: string
          file_key:
            description: The key of the file that was updated
            type: string
          file_name:
            description: The name of the file that was updated
            type: string
        required:
        - event_type
        - file_key
        - file_name
      example:
        file_key: file_key
        event_type: FILE_UPDATE
        webhook_id: webhook_id
        file_name: file_name
        passcode: passcode
        timestamp: 2000-01-23T04:56:07.000+00:00
    WebhookFileDeletePayload:
      allOf:
      - $ref: '#/components/schemas/WebhookBasePayload'
      - properties:
          event_type:
            enum:
            - FILE_DELETE
            type: string
          file_key:
            description: The key of the file that was deleted
            type: string
          file_name:
            description: The name of the file that was deleted
            type: string
          triggered_by:
            $ref: '#/components/schemas/User'
        required:
        - event_type
        - file_key
        - file_name
        - triggered_by
      example:
        file_key: file_key
        event_type: FILE_DELETE
        webhook_id: webhook_id
        file_name: file_name
        triggered_by:
          img_url: img_url
          handle: handle
          id: id
        passcode: passcode
        timestamp: 2000-01-23T04:56:07.000+00:00
    WebhookFileVersionUpdatePayload:
      allOf:
      - $ref: '#/components/schemas/WebhookBasePayload'
      - properties:
          event_type:
            enum:
            - FILE_VERSION_UPDATE
            type: string
          created_at:
            description: UTC ISO 8601 timestamp of when the version was created
            format: date-time
            type: string
          description:
            description: Description of the version in the version history
            type: string
          file_key:
            description: The key of the file that was updated
            type: string
          file_name:
            description: The name of the file that was updated
            type: string
          triggered_by:
            $ref: '#/components/schemas/User'
          version_id:
            description: ID of the published version
            type: string
        required:
        - created_at
        - event_type
        - file_key
        - file_name
        - triggered_by
        - version_id
      example:
        file_key: file_key
        event_type: FILE_VERSION_UPDATE
        webhook_id: webhook_id
        file_name: file_name
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        version_id: version_id
        triggered_by:
          img_url: img_url
          handle: handle
          id: id
        passcode: passcode
        timestamp: 2000-01-23T04:56:07.000+00:00
    WebhookLibraryPublishPayload:
      allOf:
      - $ref: '#/components/schemas/WebhookBasePayload'
      - properties:
          event_type:
            enum:
            - LIBRARY_PUBLISH
            type: string
          created_components:
            description: Components that were created by the library publish
            items:
              $ref: '#/components/schemas/LibraryItemData'
            type: array
          created_styles:
            description: Styles that were created by the library publish
            items:
              $ref: '#/components/schemas/LibraryItemData'
            type: array
          created_variables:
            description: Variables that were created by the library publish
            items:
              $ref: '#/components/schemas/LibraryItemData'
            type: array
          modified_components:
            description: Components that were modified by the library publish
            items:
              $ref: '#/components/schemas/LibraryItemData'
            type: array
          modified_styles:
            description: Styles that were modified by the library publish
            items:
              $ref: '#/components/schemas/LibraryItemData'
            type: array
          modified_variables:
            description: Variables that were modified by the library publish
            items:
              $ref: '#/components/schemas/LibraryItemData'
            type: array
          deleted_components:
            description: Components that were deleted by the library publish
            items:
              $ref: '#/components/schemas/LibraryItemData'
            type: array
          deleted_styles:
            description: Styles that were deleted by the library publish
            items:
              $ref: '#/components/schemas/LibraryItemData'
            type: array
          deleted_variables:
            description: Variables that were deleted by the library publish
            items:
              $ref: '#/components/schemas/LibraryItemData'
            type: array
          description:
            description: Description of the library publish
            type: string
          file_key:
            description: The key of the file that was published
            type: string
          file_name:
            description: The name of the file that was published
            type: string
          library_item:
            $ref: '#/components/schemas/LibraryItemData'
          triggered_by:
            $ref: '#/components/schemas/User'
        required:
        - created_components
        - created_styles
        - created_variables
        - deleted_components
        - deleted_styles
        - deleted_variables
        - event_type
        - file_key
        - file_name
        - library_item
        - modified_components
        - modified_styles
        - modified_variables
        - triggered_by
      example:
        created_variables:
        - name: name
          key: key
        - name: name
          key: key
        library_item:
          name: name
          key: key
        modified_components:
        - name: name
          key: key
        - name: name
          key: key
        modified_styles:
        - name: name
          key: key
        - name: name
          key: key
        file_name: file_name
        description: description
        created_components:
        - name: name
          key: key
        - name: name
          key: key
        deleted_variables:
        - name: name
          key: key
        - name: name
          key: key
        triggered_by:
          img_url: img_url
          handle: handle
          id: id
        deleted_styles:
        - name: name
          key: key
        - name: name
          key: key
        file_key: file_key
        event_type: LIBRARY_PUBLISH
        webhook_id: webhook_id
        created_styles:
        - name: name
          key: key
        - name: name
          key: key
        modified_variables:
        - name: name
          key: key
        - name: name
          key: key
        passcode: passcode
        timestamp: 2000-01-23T04:56:07.000+00:00
        deleted_components:
        - name: name
          key: key
        - name: name
          key: key
    WebhookFileCommentPayload:
      allOf:
      - $ref: '#/components/schemas/WebhookBasePayload'
      - properties:
          event_type:
            enum:
            - FILE_COMMENT
            type: string
          comment:
            description: Contents of the comment itself
            items:
              $ref: '#/components/schemas/CommentFragment'
            type: array
          comment_id:
            description: Unique identifier for comment
            type: string
          created_at:
            description: The UTC ISO 8601 time at which the comment was left
            format: date-time
            type: string
          file_key:
            description: The key of the file that was commented on
            type: string
          file_name:
            description: The name of the file that was commented on
            type: string
          mentions:
            description: Users that were mentioned in the comment
            items:
              $ref: '#/components/schemas/User'
            type: array
          triggered_by:
            $ref: '#/components/schemas/User'
        required:
        - comment
        - comment_id
        - created_at
        - event_type
        - file_key
        - file_name
        - triggered_by
      example:
        file_key: file_key
        event_type: FILE_COMMENT
        webhook_id: webhook_id
        file_name: file_name
        mentions:
        - img_url: img_url
          handle: handle
          id: id
        - img_url: img_url
          handle: handle
          id: id
        created_at: 2000-01-23T04:56:07.000+00:00
        comment:
        - text: text
          mention: mention
        - text: text
          mention: mention
        comment_id: comment_id
        triggered_by:
          img_url: img_url
          handle: handle
          id: id
        passcode: passcode
        timestamp: 2000-01-23T04:56:07.000+00:00
    ActivityLogUserEntity:
      description: A Figma user
      properties:
        type:
          description: The type of entity.
          enum:
          - user
          type: string
        id:
          description: Unique stable id of the user.
          type: string
        name:
          description: Name of the user.
          type: string
        email:
          description: Email associated with the user's account.
          type: string
      required:
      - email
      - id
      - name
      - type
    ActivityLogFileEntity:
      description: A Figma Design or FigJam file
      properties:
        type:
          description: The type of entity.
          enum:
          - file
          type: string
        key:
          description: Unique identifier of the file.
          type: string
        name:
          description: Name of the file.
          type: string
        editor_type:
          description: Indicates if the object is a file on Figma Design or FigJam.
          enum:
          - figma
          - figjam
          type: string
        link_access:
          description: Access policy for users who have the link to the file.
          enum:
          - view
          - edit
          - org_view
          - org_edit
          - inherit
          type: string
        proto_link_access:
          description: Access policy for users who have the link to the file's prototype.
          enum:
          - view
          - org_view
          - inherit
          type: string
      required:
      - editor_type
      - key
      - link_access
      - name
      - proto_link_access
      - type
    ActivityLogFileRepoEntity:
      description: A file branch that diverges from and can be merged back into the
        main file
      properties:
        type:
          description: The type of entity.
          enum:
          - file_repo
          type: string
        id:
          description: Unique identifier of the file branch.
          type: string
        name:
          description: Name of the file.
          type: string
        main_file_key:
          description: Key of the main file.
          type: string
      required:
      - id
      - main_file_key
      - name
      - type
    ActivityLogProjectEntity:
      description: A project that a collection of Figma files are grouped under
      properties:
        type:
          description: The type of entity.
          enum:
          - project
          type: string
        id:
          description: Unique identifier of the project.
          type: string
        name:
          description: Name of the project.
          type: string
      required:
      - id
      - name
      - type
    ActivityLogTeamEntity:
      description: A Figma team that contains multiple users and projects
      properties:
        type:
          description: The type of entity.
          enum:
          - team
          type: string
        id:
          description: Unique identifier of the team.
          type: string
        name:
          description: Name of the team.
          type: string
      required:
      - id
      - name
      - type
    ActivityLogWorkspaceEntity:
      description: "Part of the organizational hierarchy of managing files and users\
        \ within Figma, only available on the Enterprise Plan"
      properties:
        type:
          description: The type of entity.
          enum:
          - workspace
          type: string
        id:
          description: Unique identifier of the workspace.
          type: string
        name:
          description: Name of the workspace.
          type: string
      required:
      - id
      - name
      - type
    ActivityLogOrgEntity:
      description: A Figma organization
      properties:
        type:
          description: The type of entity.
          enum:
          - org
          type: string
        id:
          description: Unique identifier of the organization.
          type: string
        name:
          description: Name of the organization.
          type: string
      required:
      - id
      - name
      - type
    ActivityLogPluginEntity:
      description: A Figma plugin
      properties:
        type:
          description: The type of entity.
          enum:
          - plugin
          type: string
        id:
          description: Unique identifier of the plugin.
          type: string
        name:
          description: Name of the plugin.
          type: string
        editor_type:
          description: Indicates if the object is a plugin is available on Figma Design
            or FigJam.
          enum:
          - figma
          - figjam
          type: string
      required:
      - editor_type
      - id
      - name
      - type
    ActivityLogWidgetEntity:
      description: A Figma widget
      properties:
        type:
          description: The type of entity.
          enum:
          - widget
          type: string
        id:
          description: Unique identifier of the widget.
          type: string
        name:
          description: Name of the widget.
          type: string
        editor_type:
          description: Indicates if the object is a widget available on Figma Design
            or FigJam.
          enum:
          - figma
          - figjam
          type: string
      required:
      - editor_type
      - id
      - name
      - type
    ActivityLog:
      description: An event returned by the Activity Logs API.
      properties:
        id:
          description: The ID of the event.
          type: string
        timestamp:
          description: The timestamp of the event in seconds since the Unix epoch.
          type: number
        actor:
          $ref: '#/components/schemas/ActivityLog_actor'
        action:
          $ref: '#/components/schemas/ActivityLog_action'
        entity:
          $ref: '#/components/schemas/ActivityLog_entity'
        context:
          $ref: '#/components/schemas/ActivityLog_context'
      required:
      - action
      - actor
      - context
      - entity
      - id
      - timestamp
    PaymentStatus:
      description: An object describing the user's payment status.
      properties:
        type:
          description: "The current payment status of the user on the resource, as\
            \ a string enum:\n  \n- `UNPAID`: user has not paid for the resource\n\
            - `PAID`: user has an active purchase on the resource\n- `TRIAL`: user\
            \ is in the trial period for a subscription resource"
          enum:
          - UNPAID
          - PAID
          - TRIAL
          type: string
    PaymentInformation:
      description: "An object describing a user's payment information for a plugin,\
        \ widget, or Community file."
      properties:
        user_id:
          description: The ID of the user whose payment information was queried. Can
            be used to verify the validity of a response.
          type: string
        resource_id:
          description: "The ID of the plugin, widget, or Community file that was queried.\
            \ Can be used to verify the validity of a response."
          type: string
        resource_type:
          description: The type of the resource.
          enum:
          - PLUGIN
          - WIDGET
          - COMMUNITY_FILE
          type: string
        payment_status:
          $ref: '#/components/schemas/PaymentStatus'
        date_of_purchase:
          description: "The UTC ISO 8601 timestamp indicating when the user purchased\
            \ the resource. No value is given if the user has never purchased the\
            \ resource.\n  \nNote that a value will still be returned if the user\
            \ had purchased the resource, but no longer has active access to it (e.g.\
            \ purchase refunded, subscription ended)."
          format: date-time
          type: string
      required:
      - payment_status
      - resource_id
      - resource_type
      - user_id
    VariableScope:
      description: |-
        Scopes allow a variable to be shown or hidden in the variable picker for various fields. This declutters the Figma UI if you have a large number of variables. Variable scopes are currently supported on `FLOAT`, `STRING`, and `COLOR` variables.

        `ALL_SCOPES` is a special scope that means that the variable will be shown in the variable picker for all variable fields. If `ALL_SCOPES` is set, no additional scopes can be set.

        `ALL_FILLS` is a special scope that means that the variable will be shown in the variable picker for all fill fields. If `ALL_FILLS` is set, no additional fill scopes can be set.

        Valid scopes for `FLOAT` variables:
        - `ALL_SCOPES`
        - `TEXT_CONTENT`
        - `WIDTH_HEIGHT`
        - `GAP`
        - `STROKE_FLOAT`
        - `EFFECT_FLOAT`
        - `OPACITY`
        - `FONT_WEIGHT`
        - `FONT_SIZE`
        - `LINE_HEIGHT`
        - `LETTER_SPACING`
        - `PARAGRAPH_SPACING`
        - `PARAGRAPH_INDENT`

        Valid scopes for `STRING` variables:
        - `ALL_SCOPES`
        - `TEXT_CONTENT`
        - `FONT_FAMILY`
        - `FONT_STYLE`

        Valid scopes for `COLOR` variables:
        - `ALL_SCOPES`
        - `ALL_FILLS`
        - `FRAME_FILL`
        - `SHAPE_FILL`
        - `TEXT_FILL`
        - `STROKE_COLOR`
        - `EFFECT_COLOR`
      enum:
      - ALL_SCOPES
      - TEXT_CONTENT
      - CORNER_RADIUS
      - WIDTH_HEIGHT
      - GAP
      - ALL_FILLS
      - FRAME_FILL
      - SHAPE_FILL
      - TEXT_FILL
      - STROKE_COLOR
      - STROKE_FLOAT
      - EFFECT_FLOAT
      - EFFECT_COLOR
      - OPACITY
      - FONT_FAMILY
      - FONT_STYLE
      - FONT_WEIGHT
      - FONT_SIZE
      - LINE_HEIGHT
      - LETTER_SPACING
      - PARAGRAPH_SPACING
      - PARAGRAPH_INDENT
      type: string
    VariableCodeSyntax:
      description: An object containing platform-specific code syntax definitions
        for a variable. All platforms are optional.
      properties:
        WEB:
          type: string
        ANDROID:
          type: string
        iOS:
          type: string
    LocalVariableCollection:
      description: A grouping of related Variable objects each with the same modes.
      properties:
        id:
          description: The unique identifier of this variable collection.
          type: string
        name:
          description: The name of this variable collection.
          type: string
        key:
          description: The key of this variable collection.
          type: string
        modes:
          description: The modes of this variable collection.
          items:
            $ref: '#/components/schemas/LocalVariableCollection_modes_inner'
          type: array
        defaultModeId:
          description: The id of the default mode.
          type: string
        remote:
          description: Whether this variable collection is remote.
          type: boolean
        hiddenFromPublishing:
          default: false
          description: Whether this variable collection is hidden when publishing
            the current file as a library.
          type: boolean
        variableIds:
          description: "The ids of the variables in the collection. Note that the\
            \ order of these variables is roughly the same as what is shown in Figma\
            \ Design, however it does not account for groups. As a result, the order\
            \ of these variables may not exactly reflect the exact ordering and grouping\
            \ shown in the authoring UI."
          items:
            type: string
          type: array
      required:
      - defaultModeId
      - hiddenFromPublishing
      - id
      - key
      - modes
      - name
      - remote
      - variableIds
    LocalVariable:
      description: A Variable is a single design token that defines values for each
        of the modes in its VariableCollection. These values can be applied to various
        kinds of design properties.
      properties:
        id:
          description: The unique identifier of this variable.
          type: string
        name:
          description: The name of this variable.
          type: string
        key:
          description: The key of this variable.
          type: string
        variableCollectionId:
          description: The id of the variable collection that contains this variable.
          type: string
        resolvedType:
          description: The resolved type of the variable.
          enum:
          - BOOLEAN
          - FLOAT
          - STRING
          - COLOR
          type: string
        valuesByMode:
          additionalProperties:
            $ref: '#/components/schemas/LocalVariable_valuesByMode_value'
          description: The values for each mode of this variable.
        remote:
          description: Whether this variable is remote.
          type: boolean
        description:
          description: The description of this variable.
          type: string
        hiddenFromPublishing:
          description: |-
            Whether this variable is hidden when publishing the current file as a library.

            If the parent `VariableCollection` is marked as `hiddenFromPublishing`, then this variable will also be hidden from publishing via the UI. `hiddenFromPublishing` is independently toggled for a variable and collection. However, both must be true for a given variable to be publishable.
          type: boolean
        scopes:
          description: |-
            An array of scopes in the UI where this variable is shown. Setting this property will show/hide this variable in the variable picker UI for different fields.

            Setting scopes for a variable does not prevent that variable from being bound in other scopes (for example, via the Plugin API). This only limits the variables that are shown in pickers within the Figma UI.
          items:
            $ref: '#/components/schemas/VariableScope'
          type: array
        codeSyntax:
          $ref: '#/components/schemas/VariableCodeSyntax'
        deletedButReferenced:
          default: false
          description: "Indicates that the variable was deleted in the editor, but\
            \ the document may still contain references to the variable. References\
            \ to the variable may exist through bound values or variable aliases."
          type: boolean
      required:
      - codeSyntax
      - description
      - hiddenFromPublishing
      - id
      - key
      - name
      - remote
      - resolvedType
      - scopes
      - valuesByMode
      - variableCollectionId
    PublishedVariableCollection:
      description: A grouping of related Variable objects each with the same modes.
      properties:
        id:
          description: The unique identifier of this variable collection.
          type: string
        subscribed_id:
          description: The ID of the variable collection that is used by subscribing
            files. This ID changes every time the variable collection is modified
            and published.
          type: string
        name:
          description: The name of this variable collection.
          type: string
        key:
          description: The key of this variable collection.
          type: string
        updatedAt:
          description: |-
            The UTC ISO 8601 time at which the variable collection was last updated.

            This timestamp will change any time a variable in the collection is changed.
          format: date-time
          type: string
      required:
      - id
      - key
      - name
      - subscribed_id
      - updatedAt
    PublishedVariable:
      description: A Variable is a single design token that defines values for each
        of the modes in its VariableCollection. These values can be applied to various
        kinds of design properties.
      properties:
        id:
          description: The unique identifier of this variable.
          type: string
        subscribed_id:
          description: The ID of the variable that is used by subscribing files. This
            ID changes every time the variable is modified and published.
          type: string
        name:
          description: The name of this variable.
          type: string
        key:
          description: The key of this variable.
          type: string
        variableCollectionId:
          description: The id of the variable collection that contains this variable.
          type: string
        resolvedDataType:
          description: The resolved type of the variable.
          enum:
          - BOOLEAN
          - FLOAT
          - STRING
          - COLOR
          type: string
        updatedAt:
          description: The UTC ISO 8601 time at which the variable was last updated.
          format: date-time
          type: string
      required:
      - id
      - key
      - name
      - resolvedDataType
      - subscribed_id
      - updatedAt
      - variableCollectionId
    VariableCollectionCreate:
      description: An object that contains details about creating a `VariableCollection`.
      properties:
        action:
          description: The action to perform for the variable collection.
          enum:
          - CREATE
          type: string
        id:
          description: A temporary id for this variable collection.
          type: string
        name:
          description: The name of this variable collection.
          type: string
        initialModeId:
          description: "The initial mode refers to the mode that is created by default.\
            \ You can set a temporary id here, in order to reference this mode later\
            \ in this request."
          type: string
        hiddenFromPublishing:
          default: false
          description: Whether this variable collection is hidden when publishing
            the current file as a library.
          type: boolean
      required:
      - action
      - name
    VariableCollectionUpdate:
      description: An object that contains details about updating a `VariableCollection`.
      properties:
        action:
          description: The action to perform for the variable collection.
          enum:
          - UPDATE
          type: string
        id:
          description: The id of the variable collection to update.
          type: string
        name:
          description: The name of this variable collection.
          type: string
        hiddenFromPublishing:
          default: false
          description: Whether this variable collection is hidden when publishing
            the current file as a library.
          type: boolean
      required:
      - action
      - id
    VariableCollectionDelete:
      description: An object that contains details about deleting a `VariableCollection`.
      properties:
        action:
          description: The action to perform for the variable collection.
          enum:
          - DELETE
          type: string
        id:
          description: The id of the variable collection to delete.
          type: string
      required:
      - action
      - id
    VariableCollectionChange:
      discriminator:
        mapping:
          CREATE: '#/components/schemas/VariableCollectionCreate'
          UPDATE: '#/components/schemas/VariableCollectionUpdate'
          DELETE: '#/components/schemas/VariableCollectionDelete'
        propertyName: action
      oneOf:
      - $ref: '#/components/schemas/VariableCollectionCreate'
      - $ref: '#/components/schemas/VariableCollectionUpdate'
      - $ref: '#/components/schemas/VariableCollectionDelete'
    VariableModeCreate:
      description: An object that contains details about creating a `VariableMode`.
      properties:
        action:
          description: The action to perform for the variable mode.
          enum:
          - CREATE
          type: string
        id:
          description: A temporary id for this variable mode.
          type: string
        name:
          description: The name of this variable mode.
          type: string
        variableCollectionId:
          description: The variable collection that will contain the mode. You can
            use the temporary id of a variable collection.
          type: string
      required:
      - action
      - name
      - variableCollectionId
    VariableModeUpdate:
      description: An object that contains details about updating a `VariableMode`.
      properties:
        action:
          description: The action to perform for the variable mode.
          enum:
          - UPDATE
          type: string
        id:
          description: The id of the variable mode to update.
          type: string
        name:
          description: The name of this variable mode.
          type: string
        variableCollectionId:
          description: The variable collection that contains the mode.
          type: string
      required:
      - action
      - id
      - variableCollectionId
    VariableModeDelete:
      description: An object that contains details about deleting a `VariableMode`.
      properties:
        action:
          description: The action to perform for the variable mode.
          enum:
          - DELETE
          type: string
        id:
          description: The id of the variable mode to delete.
          type: string
      required:
      - action
      - id
    VariableModeChange:
      discriminator:
        mapping:
          CREATE: '#/components/schemas/VariableModeCreate'
          UPDATE: '#/components/schemas/VariableModeUpdate'
          DELETE: '#/components/schemas/VariableModeDelete'
        propertyName: action
      oneOf:
      - $ref: '#/components/schemas/VariableModeCreate'
      - $ref: '#/components/schemas/VariableModeUpdate'
      - $ref: '#/components/schemas/VariableModeDelete'
    VariableCreate:
      description: An object that contains details about creating a `Variable`.
      properties:
        action:
          description: The action to perform for the variable.
          enum:
          - CREATE
          type: string
        id:
          description: A temporary id for this variable.
          type: string
        name:
          description: The name of this variable.
          type: string
        variableCollectionId:
          description: The variable collection that will contain the variable. You
            can use the temporary id of a variable collection.
          type: string
        resolvedType:
          description: The resolved type of the variable.
          enum:
          - BOOLEAN
          - FLOAT
          - STRING
          - COLOR
          type: string
        description:
          description: The description of this variable.
          type: string
        hiddenFromPublishing:
          default: false
          description: Whether this variable is hidden when publishing the current
            file as a library.
          type: boolean
        scopes:
          description: An array of scopes in the UI where this variable is shown.
            Setting this property will show/hide this variable in the variable picker
            UI for different fields.
          items:
            $ref: '#/components/schemas/VariableScope'
          type: array
        codeSyntax:
          $ref: '#/components/schemas/VariableCodeSyntax'
      required:
      - action
      - name
      - resolvedType
      - variableCollectionId
    VariableUpdate:
      description: An object that contains details about updating a `Variable`.
      properties:
        action:
          description: The action to perform for the variable.
          enum:
          - UPDATE
          type: string
        id:
          description: The id of the variable to update.
          type: string
        name:
          description: The name of this variable.
          type: string
        description:
          description: The description of this variable.
          type: string
        hiddenFromPublishing:
          default: false
          description: Whether this variable is hidden when publishing the current
            file as a library.
          type: boolean
        scopes:
          description: An array of scopes in the UI where this variable is shown.
            Setting this property will show/hide this variable in the variable picker
            UI for different fields.
          items:
            $ref: '#/components/schemas/VariableScope'
          type: array
        codeSyntax:
          $ref: '#/components/schemas/VariableCodeSyntax'
      required:
      - action
      - id
    VariableDelete:
      description: An object that contains details about deleting a `Variable`.
      properties:
        action:
          description: The action to perform for the variable.
          enum:
          - DELETE
          type: string
        id:
          description: The id of the variable to delete.
          type: string
      required:
      - action
      - id
    VariableChange:
      discriminator:
        mapping:
          CREATE: '#/components/schemas/VariableCreate'
          UPDATE: '#/components/schemas/VariableUpdate'
          DELETE: '#/components/schemas/VariableDelete'
        propertyName: action
      oneOf:
      - $ref: '#/components/schemas/VariableCreate'
      - $ref: '#/components/schemas/VariableUpdate'
      - $ref: '#/components/schemas/VariableDelete'
    VariableModeValue:
      description: An object that represents a value for a given mode of a variable.
        All properties are required.
      properties:
        variableId:
          description: The target variable. You can use the temporary id of a variable.
          type: string
        modeId:
          description: Must correspond to a mode in the variable collection that contains
            the target variable.
          type: string
        value:
          $ref: '#/components/schemas/VariableValue'
      required:
      - modeId
      - value
      - variableId
    VariableValue:
      description: "The value for the variable. The value must match the variable's\
        \ type. If setting to a variable alias, the alias must resolve to this type."
      oneOf:
      - type: boolean
      - type: number
      - type: string
      - $ref: '#/components/schemas/RGB'
      - $ref: '#/components/schemas/RGBA'
      - $ref: '#/components/schemas/VariableAlias'
    DevResource:
      description: A dev resource in a file
      properties:
        id:
          description: Unique identifier of the dev resource
          type: string
        name:
          description: The name of the dev resource.
          type: string
        url:
          description: The URL of the dev resource.
          type: string
        file_key:
          description: The file key where the dev resource belongs.
          type: string
        node_id:
          description: The target node to attach the dev resource to.
          type: string
      required:
      - file_key
      - id
      - name
      - node_id
      - url
    LibraryAnalyticsActionsByComponent:
      description: Library analytics actions data broken down by component.
      properties:
        week:
          description: The date in ISO 8601 format. e.g. 2023-12-13
          type: string
        component_key:
          description: "Unique, stable id of the component."
          type: string
        component_name:
          description: Name of the component.
          type: string
        detachments:
          description: The number of detach events for this period.
          type: number
        insertions:
          description: The number of insertion events for this period.
          type: number
      required:
      - component_key
      - component_name
      - detachments
      - insertions
      - week
    LibraryAnalyticsActionsByTeam:
      description: Library analytics action data broken down by team.
      properties:
        week:
          description: The date in ISO 8601 format. e.g. 2023-12-13
          type: string
        team_name:
          description: The name of the team using the library.
          type: string
        workspace_name:
          description: The name of the workspace that the team belongs to.
          type: string
        detachments:
          description: The number of detach events for this period.
          type: number
        insertions:
          description: The number of insertion events for this period.
          type: number
      required:
      - detachments
      - insertions
      - team_name
      - week
    LibraryAnalyticsUsagesByComponent:
      description: Library analytics usage data broken down by component.
      properties:
        component_key:
          description: "Unique, stable id of the component."
          type: string
        component_name:
          description: Name of the component.
          type: string
        num_instances:
          description: The number of instances of the component within the organization.
          type: number
        num_teams_using:
          description: The number of teams using the component within the organization.
          type: number
        num_files_using:
          description: The number of files using the component within the organization.
          type: number
      required:
      - component_key
      - component_name
      - num_files_using
      - num_instances
      - num_teams_using
    LibraryAnalyticsUsagesByFile:
      description: Library analytics usage data broken down by file.
      properties:
        file_name:
          description: The name of the file using the library.
          type: string
        team_name:
          description: The name of the team the file belongs to.
          type: string
        workspace_name:
          description: The name of the workspace that the file belongs to.
          type: string
        num_instances:
          description: The number of component instances from the library used within
            the file.
          type: number
      required:
      - file_name
      - num_instances
      - team_name
    ResponsePagination:
      description: "If pagination is needed due to the length of the response, identifies\
        \ the next and previous pages."
      properties:
        prev_page:
          description: A URL that calls the previous page of the response.
          type: string
        next_page:
          description: A URL that calls the next page of the response.
          type: string
    ResponseCursor:
      description: Pagination cursor
      properties:
        before:
          type: number
        after:
          type: number
    ErrorResponsePayloadWithErrMessage:
      description: A response indicating an error occurred.
      properties:
        status:
          description: Status code
          type: number
        err:
          description: A string describing the error
          type: string
      required:
      - err
      - status
    ErrorResponsePayloadWithErrorBoolean:
      description: A response indicating an error occurred.
      properties:
        error:
          description: "For erroneous requests, this value is always `true`."
          enum:
          - true
          type: boolean
        status:
          description: Status code
          type: number
        message:
          description: A string describing the error
          type: string
      required:
      - error
      - message
      - status
    postComment_request_client_meta:
      description: The position where to place the comment.
      oneOf:
      - $ref: '#/components/schemas/Vector'
      - $ref: '#/components/schemas/FrameOffset'
      - $ref: '#/components/schemas/Region'
      - $ref: '#/components/schemas/FrameOffsetRegion'
    postComment_request:
      properties:
        message:
          description: The text contents of the comment to post.
          type: string
        comment_id:
          description: "The ID of the comment to reply to, if any. This must be a\
            \ root comment. You cannot reply to other replies (a comment that has\
            \ a parent_id)."
          type: string
        client_meta:
          $ref: '#/components/schemas/postComment_request_client_meta'
      required:
      - message
    postCommentReaction_request:
      properties:
        emoji:
          description: "The emoji type of reaction as shortcode (e.g. `:heart:`, `:+1::skin-tone-2:`).\
            \ The list of accepted emoji shortcodes can be found in [this file](https://raw.githubusercontent.com/missive/emoji-mart/main/packages/emoji-mart-data/sets/14/native.json)\
            \ under the top-level emojis and aliases fields, with optional skin tone\
            \ modifiers when applicable."
          type: string
      required:
      - emoji
    postWebhook_request:
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookV2Event'
        team_id:
          description: Team id to receive updates about
          type: string
        endpoint:
          description: The HTTP endpoint that will receive a POST request when the
            event triggers. Max length 2048 characters.
          type: string
        passcode:
          description: String that will be passed back to your webhook endpoint to
            verify that it is being called by Figma. Max length 100 characters.
          type: string
        status:
          $ref: '#/components/schemas/WebhookV2Status'
        description:
          description: User provided description or name for the webhook. Max length
            150 characters.
          type: string
      required:
      - endpoint
      - event_type
      - passcode
      - team_id
    putWebhook_request:
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookV2Event'
        endpoint:
          description: The HTTP endpoint that will receive a POST request when the
            event triggers. Max length 2048 characters.
          type: string
        passcode:
          description: String that will be passed back to your webhook endpoint to
            verify that it is being called by Figma. Max length 100 characters.
          type: string
        status:
          $ref: '#/components/schemas/WebhookV2Status'
        description:
          description: User provided description or name for the webhook. Max length
            150 characters.
          type: string
      required:
      - endpoint
      - event_type
      - passcode
      - team_id
    postVariables_request:
      minProperties: 1
      properties:
        variableCollections:
          description: "For creating, updating, and deleting variable collections."
          items:
            $ref: '#/components/schemas/VariableCollectionChange'
          type: array
        variableModes:
          description: "For creating, updating, and deleting modes within variable\
            \ collections."
          items:
            $ref: '#/components/schemas/VariableModeChange'
          type: array
        variables:
          description: "For creating, updating, and deleting variables."
          items:
            $ref: '#/components/schemas/VariableChange'
          type: array
        variableModeValues:
          description: "For setting a specific value, given a variable and a mode."
          items:
            $ref: '#/components/schemas/VariableModeValue'
          type: array
    putDevResources_request_dev_resources_inner:
      properties:
        id:
          description: Unique identifier of the dev resource
          type: string
        name:
          description: The name of the dev resource.
          type: string
        url:
          description: The URL of the dev resource.
          type: string
      required:
      - id
    putDevResources_request:
      properties:
        dev_resources:
          description: An array of dev resources.
          items:
            $ref: '#/components/schemas/putDevResources_request_dev_resources_inner'
          type: array
      required:
      - dev_resources
    postDevResources_request_dev_resources_inner:
      properties:
        name:
          description: The name of the dev resource.
          type: string
        url:
          description: The URL of the dev resource.
          type: string
        file_key:
          description: The file key where the dev resource belongs.
          type: string
        node_id:
          description: The target node to attach the dev resource to.
          type: string
      required:
      - file_key
      - name
      - node_id
      - url
    postDevResources_request:
      properties:
        dev_resources:
          description: An array of dev resources.
          items:
            $ref: '#/components/schemas/postDevResources_request_dev_resources_inner'
          type: array
      required:
      - dev_resources
    IsLayerTrait_boundVariables_size:
      properties:
        x:
          $ref: '#/components/schemas/VariableAlias'
        "y":
          $ref: '#/components/schemas/VariableAlias'
    IsLayerTrait_boundVariables_individualStrokeWeights:
      properties:
        top:
          $ref: '#/components/schemas/VariableAlias'
        bottom:
          $ref: '#/components/schemas/VariableAlias'
        left:
          $ref: '#/components/schemas/VariableAlias'
        right:
          $ref: '#/components/schemas/VariableAlias'
    IsLayerTrait_boundVariables:
      description: "A mapping of field to the variables applied to this field. Most\
        \ fields will only map to a single `VariableAlias`. However, for properties\
        \ like `fills`, `strokes`, `size`, `componentProperties`, and `textRangeFills`,\
        \ it is possible to have multiple variables bound to the field."
      properties:
        size:
          $ref: '#/components/schemas/IsLayerTrait_boundVariables_size'
        individualStrokeWeights:
          $ref: '#/components/schemas/IsLayerTrait_boundVariables_individualStrokeWeights'
        characters:
          $ref: '#/components/schemas/VariableAlias'
        itemSpacing:
          $ref: '#/components/schemas/VariableAlias'
        paddingLeft:
          $ref: '#/components/schemas/VariableAlias'
        paddingRight:
          $ref: '#/components/schemas/VariableAlias'
        paddingTop:
          $ref: '#/components/schemas/VariableAlias'
        paddingBottom:
          $ref: '#/components/schemas/VariableAlias'
        visible:
          $ref: '#/components/schemas/VariableAlias'
        topLeftRadius:
          $ref: '#/components/schemas/VariableAlias'
        topRightRadius:
          $ref: '#/components/schemas/VariableAlias'
        bottomLeftRadius:
          $ref: '#/components/schemas/VariableAlias'
        bottomRightRadius:
          $ref: '#/components/schemas/VariableAlias'
        minWidth:
          $ref: '#/components/schemas/VariableAlias'
        maxWidth:
          $ref: '#/components/schemas/VariableAlias'
        minHeight:
          $ref: '#/components/schemas/VariableAlias'
        maxHeight:
          $ref: '#/components/schemas/VariableAlias'
        counterAxisSpacing:
          $ref: '#/components/schemas/VariableAlias'
        opacity:
          $ref: '#/components/schemas/VariableAlias'
        fontFamily:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        fontSize:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        fontStyle:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        fontWeight:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        letterSpacing:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        lineHeight:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        paragraphSpacing:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        paragraphIndent:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        fills:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        strokes:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        componentProperties:
          additionalProperties:
            $ref: '#/components/schemas/VariableAlias'
        textRangeFills:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        effects:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
        layoutGrids:
          items:
            $ref: '#/components/schemas/VariableAlias'
          type: array
    HasGeometryTrait_allOf_fillOverrideTable:
      nullable: true
      oneOf:
      - $ref: '#/components/schemas/PaintOverride'
    DevStatusTrait_devStatus:
      description: Represents whether or not a node has a particular handoff (or dev)
        status applied to it.
      properties:
        type:
          enum:
          - NONE
          - READY_FOR_DEV
          - COMPLETED
          type: string
        description:
          description: An optional field where the designer can add more information
            about the design and what has changed.
          type: string
      required:
      - type
    ColorStop_boundVariables:
      description: The variables bound to a particular gradient stop
      properties:
        color:
          $ref: '#/components/schemas/VariableAlias'
    SolidPaint_allOf_boundVariables:
      description: The variables bound to a particular field on this paint
      properties:
        color:
          $ref: '#/components/schemas/VariableAlias'
    LayoutGrid_boundVariables:
      description: The variables bound to a particular field on this layout grid
      properties:
        gutterSize:
          $ref: '#/components/schemas/VariableAlias'
        numSections:
          $ref: '#/components/schemas/VariableAlias'
        sectionSize:
          $ref: '#/components/schemas/VariableAlias'
        offset:
          $ref: '#/components/schemas/VariableAlias'
    BaseShadowEffect_boundVariables:
      description: The variables bound to a particular field on this shadow effect
      properties:
        radius:
          $ref: '#/components/schemas/VariableAlias'
        spread:
          $ref: '#/components/schemas/VariableAlias'
        color:
          $ref: '#/components/schemas/VariableAlias'
        offsetX:
          $ref: '#/components/schemas/VariableAlias'
        offsetY:
          $ref: '#/components/schemas/VariableAlias'
    BlurEffect_boundVariables:
      description: The variables bound to a particular field on this blur effect
      properties:
        radius:
          $ref: '#/components/schemas/VariableAlias'
    TypeStyle_boundVariables:
      description: The variables bound to a particular field on this style
      properties:
        fontFamily:
          $ref: '#/components/schemas/VariableAlias'
        fontSize:
          $ref: '#/components/schemas/VariableAlias'
        fontStyle:
          $ref: '#/components/schemas/VariableAlias'
        fontWeight:
          $ref: '#/components/schemas/VariableAlias'
        letterSpacing:
          $ref: '#/components/schemas/VariableAlias'
        lineHeight:
          $ref: '#/components/schemas/VariableAlias'
        paragraphSpacing:
          $ref: '#/components/schemas/VariableAlias'
        paragraphIndent:
          $ref: '#/components/schemas/VariableAlias'
    ComponentPropertyDefinition_defaultValue:
      description: Initial value of this property for instances.
      oneOf:
      - type: boolean
      - type: string
    ComponentProperty_value:
      description: Value of the property for this component instance.
      oneOf:
      - type: boolean
      - type: string
    ComponentProperty_boundVariables:
      description: The variables bound to a particular field on this component property
      properties:
        value:
          $ref: '#/components/schemas/VariableAlias'
    ConnectorEndpoint_oneOf:
      properties:
        endpointNodeId:
          description: Node ID that this endpoint attaches to.
          type: string
        position:
          $ref: '#/components/schemas/Vector'
    ConnectorEndpoint_oneOf_1:
      properties:
        endpointNodeId:
          description: Node ID that this endpoint attaches to.
          type: string
        magnet:
          description: The magnet type is a string enum.
          enum:
          - AUTO
          - TOP
          - BOTTOM
          - LEFT
          - RIGHT
          - CENTER
          type: string
    Trigger_oneOf:
      properties:
        type:
          enum:
          - ON_CLICK
          - ON_HOVER
          - ON_PRESS
          - ON_DRAG
          type: string
      required:
      - type
    Trigger_oneOf_1:
      properties:
        type:
          enum:
          - MOUSE_ENTER
          - MOUSE_LEAVE
          - MOUSE_UP
          - MOUSE_DOWN
          type: string
        delay:
          type: number
        deprecatedVersion:
          description: |-
            Whether this is a [deprecated version](https://help.figma.com/hc/en-us/articles/360040035834-Prototype-triggers#h_01HHN04REHJNP168R26P1CMP0A) of the trigger that was left unchanged for backwards compatibility.
            If not present, the trigger is the latest version.
          type: boolean
      required:
      - delay
      - type
    Trigger_oneOf_2:
      properties:
        type:
          enum:
          - ON_MEDIA_END
          type: string
      required:
      - type
    Action_oneOf:
      properties:
        type:
          enum:
          - BACK
          - CLOSE
          type: string
      required:
      - type
    UpdateMediaRuntimeAction_oneOf:
      description: "An action that updates the runtime of a media node by playing,\
        \ pausing, toggling play/pause, \nmuting, unmuting, or toggling mute/unmute.\n\
        \nThe `destinationId` is the node ID of the media node to update. If `destinationId`\
        \ is `null`, the action will \nupdate the media node that contains the action.\n\
        \nThe `mediaAction` is the action to perform on the media node."
      properties:
        type:
          enum:
          - UPDATE_MEDIA_RUNTIME
          type: string
        destinationId:
          nullable: true
          type: string
        mediaAction:
          enum:
          - PLAY
          - PAUSE
          - TOGGLE_PLAY_PAUSE
          - MUTE
          - UNMUTE
          - TOGGLE_MUTE_UNMUTE
          type: string
      required:
      - destinationId
      - mediaAction
      - type
    UpdateMediaRuntimeAction_oneOf_1:
      description: "An action that updates the runtime of a media node by skipping\
        \ forward or backward.\n\nThe `destinationId` is the node ID of the media\
        \ node to update. If `destinationId` is `null`, the action will \nupdate the\
        \ media node that contains the action.\n\nThe `mediaAction` is the action\
        \ to perform on the media node.\n\nThe `amountToSkip` is the amount of time\
        \ to skip in seconds."
      properties:
        type:
          enum:
          - UPDATE_MEDIA_RUNTIME
          type: string
        destinationId:
          nullable: true
          type: string
        mediaAction:
          enum:
          - SKIP_FORWARD
          - SKIP_BACKWARD
          type: string
        amountToSkip:
          type: number
      required:
      - amountToSkip
      - mediaAction
      - type
    UpdateMediaRuntimeAction_oneOf_2:
      description: "An action that updates the runtime of a media node by skipping\
        \ to a specific time.\n\nThe `destinationId` is the node ID of the media node\
        \ to update. If `destinationId` is `null`, the action will \nupdate the media\
        \ node that contains the action.\n\nThe `mediaAction` is the action to perform\
        \ on the media node.\n\nThe `newTimestamp` is the new time to skip to in seconds."
      properties:
        type:
          enum:
          - UPDATE_MEDIA_RUNTIME
          type: string
        destinationId:
          nullable: true
          type: string
        mediaAction:
          enum:
          - SKIP_TO
          type: string
        newTimestamp:
          type: number
      required:
      - mediaAction
      - newTimestamp
      - type
    Easing_easingFunctionCubicBezier:
      description: A cubic bezier curve that defines the easing.
      properties:
        x1:
          description: The x component of the first control point.
          type: number
        y1:
          description: The y component of the first control point.
          type: number
        x2:
          description: The x component of the second control point.
          type: number
        y2:
          description: The y component of the second control point.
          type: number
      required:
      - x1
      - x2
      - y1
      - y2
    Easing_easingFunctionSpring:
      description: A spring function that defines the easing.
      properties:
        mass:
          type: number
        stiffness:
          type: number
        damping:
          type: number
      required:
      - damping
      - mass
      - stiffness
    VariableData_value:
      oneOf:
      - type: boolean
      - type: number
      - type: string
      - $ref: '#/components/schemas/RGB'
      - $ref: '#/components/schemas/RGBA'
      - $ref: '#/components/schemas/VariableAlias'
      - $ref: '#/components/schemas/Expression'
    Measurement_offset:
      oneOf:
      - $ref: '#/components/schemas/MeasurementOffsetInner'
      - $ref: '#/components/schemas/MeasurementOffsetOuter'
    Comment_client_meta:
      description: "Positioning information of the comment. Includes information on\
        \ the location of the comment pin, which is either the absolute coordinates\
        \ on the canvas or a relative offset within a frame. If the comment is a region,\
        \ it will also contain the region height, width, and position of the anchor\
        \ in regards to the region."
      oneOf:
      - $ref: '#/components/schemas/Vector'
      - $ref: '#/components/schemas/FrameOffset'
      - $ref: '#/components/schemas/Region'
      - $ref: '#/components/schemas/FrameOffsetRegion'
    ActivityLog_actor:
      description: The user who performed the action.
      properties:
        type:
          description: The type of the user.
          enum:
          - user
          type: string
        id:
          description: The ID of the user.
          type: string
        name:
          description: "The name of the user. For SCIM events, the value is \"SCIM\
            \ Provider\". For official support actions, the value is \"Figma Support\"\
            ."
          type: string
        email:
          description: The email of the user.
          type: string
      required:
      - name
    ActivityLog_action:
      description: The task or activity the actor performed.
      properties:
        type:
          description: The type of the action.
          type: string
        details:
          additionalProperties: true
          description: Metadata of the action. Each action type supports its own metadata
            attributes.
          nullable: true
          type: object
      required:
      - details
      - type
    ActivityLog_entity:
      description: "The resource the actor took the action on. It can be a user, file,\
        \ project or other resource types."
      discriminator:
        mapping:
          user: '#/components/schemas/ActivityLogUserEntity'
          file: '#/components/schemas/ActivityLogFileEntity'
          file_repo: '#/components/schemas/ActivityLogFileRepoEntity'
          project: '#/components/schemas/ActivityLogProjectEntity'
          team: '#/components/schemas/ActivityLogTeamEntity'
          workspace: '#/components/schemas/ActivityLogWorkspaceEntity'
          org: '#/components/schemas/ActivityLogOrgEntity'
          plugin: '#/components/schemas/ActivityLogPluginEntity'
          widget: '#/components/schemas/ActivityLogWidgetEntity'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/ActivityLogUserEntity'
      - $ref: '#/components/schemas/ActivityLogFileEntity'
      - $ref: '#/components/schemas/ActivityLogFileRepoEntity'
      - $ref: '#/components/schemas/ActivityLogProjectEntity'
      - $ref: '#/components/schemas/ActivityLogTeamEntity'
      - $ref: '#/components/schemas/ActivityLogWorkspaceEntity'
      - $ref: '#/components/schemas/ActivityLogOrgEntity'
      - $ref: '#/components/schemas/ActivityLogPluginEntity'
      - $ref: '#/components/schemas/ActivityLogWidgetEntity'
    ActivityLog_context:
      description: Contextual information about the event.
      properties:
        client_name:
          description: "The third-party application that triggered the event, if applicable."
          nullable: true
          type: string
        ip_address:
          description: The IP address from of the client that sent the event request.
          type: string
        is_figma_support_team_action:
          description: If Figma's Support team triggered the event. This is either
            true or false.
          type: boolean
        org_id:
          description: The id of the organization where the event took place.
          type: string
        team_id:
          description: The id of the team where the event took place -- if this took
            place in a specific team.
          nullable: true
          type: string
      required:
      - client_name
      - ip_address
      - is_figma_support_team_action
      - org_id
      - team_id
    LocalVariableCollection_modes_inner:
      properties:
        modeId:
          description: The unique identifier of this mode.
          type: string
        name:
          description: The name of this mode.
          type: string
      required:
      - modeId
      - name
    LocalVariable_valuesByMode_value:
      oneOf:
      - type: boolean
      - type: number
      - type: string
      - $ref: '#/components/schemas/RGBA'
      - $ref: '#/components/schemas/VariableAlias'
  securitySchemes:
    PersonalAccessToken:
      in: header
      name: X-Figma-Token
      type: apiKey
    OAuth2:
      flows:
        authorizationCode:
          authorizationUrl: https://www.figma.com/oauth
          refreshUrl: https://www.figma.com/api/oauth/refresh
          scopes:
            files:read: "Read files, projects, users, versions, comments, components\
              \ & styles, and webhooks."
            file_variables:read: "Read variables in Figma file. Note: this is only\
              \ available to members in Enterprise organizations."
            file_variables:write: "Write to variables in Figma file. Note: this is\
              \ only available to members in Enterprise organizations."
            file_comments:write: Post and delete comments and comment reactions in
              files.
            file_dev_resources:read: Read dev resources in files.
            file_dev_resources:write: Write to dev resources in files.
            library_analytics:read: Read library analytics data.
            webhooks:write: Create and manage webhooks.
          tokenUrl: https://www.figma.com/api/oauth/token
      type: oauth2
    OrgOAuth2:
      flows:
        authorizationCode:
          authorizationUrl: https://www.figma.com/oauth
          refreshUrl: https://www.figma.com/api/oauth/refresh
          scopes:
            org:activity_log_read: Read activity logs in the organization.
          tokenUrl: https://www.figma.com/api/oauth/token
      type: oauth2

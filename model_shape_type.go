/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ShapeType Geometric shape type.
type ShapeType string

// List of ShapeType
const (
	SQUARE ShapeType = "SQUARE"
	ELLIPSE ShapeType = "ELLIPSE"
	ROUNDED_RECTANGLE ShapeType = "ROUNDED_RECTANGLE"
	DIAMOND ShapeType = "DIAMOND"
	TRIANGLE_UP ShapeType = "TRIANGLE_UP"
	TRIANGLE_DOWN ShapeType = "TRIANGLE_DOWN"
	PARALLELOGRAM_RIGHT ShapeType = "PARALLELOGRAM_RIGHT"
	PARALLELOGRAM_LEFT ShapeType = "PARALLELOGRAM_LEFT"
	ENG_DATABASE ShapeType = "ENG_DATABASE"
	ENG_QUEUE ShapeType = "ENG_QUEUE"
	ENG_FILE ShapeType = "ENG_FILE"
	ENG_FOLDER ShapeType = "ENG_FOLDER"
	TRAPEZOID ShapeType = "TRAPEZOID"
	PREDEFINED_PROCESS ShapeType = "PREDEFINED_PROCESS"
	SHIELD ShapeType = "SHIELD"
	DOCUMENT_SINGLE ShapeType = "DOCUMENT_SINGLE"
	DOCUMENT_MULTIPLE ShapeType = "DOCUMENT_MULTIPLE"
	MANUAL_INPUT ShapeType = "MANUAL_INPUT"
	HEXAGON ShapeType = "HEXAGON"
	CHEVRON ShapeType = "CHEVRON"
	PENTAGON ShapeType = "PENTAGON"
	OCTAGON ShapeType = "OCTAGON"
	STAR ShapeType = "STAR"
	PLUS ShapeType = "PLUS"
	ARROW_LEFT ShapeType = "ARROW_LEFT"
	ARROW_RIGHT ShapeType = "ARROW_RIGHT"
	SUMMING_JUNCTION ShapeType = "SUMMING_JUNCTION"
	OR ShapeType = "OR"
	SPEECH_BUBBLE ShapeType = "SPEECH_BUBBLE"
	INTERNAL_STORAGE ShapeType = "INTERNAL_STORAGE"
)

// All allowed values of ShapeType enum
var AllowedShapeTypeEnumValues = []ShapeType{
	"SQUARE",
	"ELLIPSE",
	"ROUNDED_RECTANGLE",
	"DIAMOND",
	"TRIANGLE_UP",
	"TRIANGLE_DOWN",
	"PARALLELOGRAM_RIGHT",
	"PARALLELOGRAM_LEFT",
	"ENG_DATABASE",
	"ENG_QUEUE",
	"ENG_FILE",
	"ENG_FOLDER",
	"TRAPEZOID",
	"PREDEFINED_PROCESS",
	"SHIELD",
	"DOCUMENT_SINGLE",
	"DOCUMENT_MULTIPLE",
	"MANUAL_INPUT",
	"HEXAGON",
	"CHEVRON",
	"PENTAGON",
	"OCTAGON",
	"STAR",
	"PLUS",
	"ARROW_LEFT",
	"ARROW_RIGHT",
	"SUMMING_JUNCTION",
	"OR",
	"SPEECH_BUBBLE",
	"INTERNAL_STORAGE",
}

func (v *ShapeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShapeType(value)
	for _, existing := range AllowedShapeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShapeType", value)
}

// NewShapeTypeFromValue returns a pointer to a valid ShapeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShapeTypeFromValue(v string) (*ShapeType, error) {
	ev := ShapeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShapeType: valid values are %v", v, AllowedShapeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShapeType) IsValid() bool {
	for _, existing := range AllowedShapeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShapeType value
func (v ShapeType) Ptr() *ShapeType {
	return &v
}

type NullableShapeType struct {
	value *ShapeType
	isSet bool
}

func (v NullableShapeType) Get() *ShapeType {
	return v.value
}

func (v *NullableShapeType) Set(val *ShapeType) {
	v.value = val
	v.isSet = true
}

func (v NullableShapeType) IsSet() bool {
	return v.isSet
}

func (v *NullableShapeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShapeType(val *ShapeType) *NullableShapeType {
	return &NullableShapeType{value: val, isSet: true}
}

func (v NullableShapeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShapeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EasingEasingFunctionCubicBezier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EasingEasingFunctionCubicBezier{}

// EasingEasingFunctionCubicBezier A cubic bezier curve that defines the easing.
type EasingEasingFunctionCubicBezier struct {
	// The x component of the first control point.
	X1 float32 `json:"x1"`
	// The y component of the first control point.
	Y1 float32 `json:"y1"`
	// The x component of the second control point.
	X2 float32 `json:"x2"`
	// The y component of the second control point.
	Y2 float32 `json:"y2"`
}

type _EasingEasingFunctionCubicBezier EasingEasingFunctionCubicBezier

// NewEasingEasingFunctionCubicBezier instantiates a new EasingEasingFunctionCubicBezier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEasingEasingFunctionCubicBezier(x1 float32, y1 float32, x2 float32, y2 float32) *EasingEasingFunctionCubicBezier {
	this := EasingEasingFunctionCubicBezier{}
	this.X1 = x1
	this.Y1 = y1
	this.X2 = x2
	this.Y2 = y2
	return &this
}

// NewEasingEasingFunctionCubicBezierWithDefaults instantiates a new EasingEasingFunctionCubicBezier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEasingEasingFunctionCubicBezierWithDefaults() *EasingEasingFunctionCubicBezier {
	this := EasingEasingFunctionCubicBezier{}
	return &this
}

// GetX1 returns the X1 field value
func (o *EasingEasingFunctionCubicBezier) GetX1() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.X1
}

// GetX1Ok returns a tuple with the X1 field value
// and a boolean to check if the value has been set.
func (o *EasingEasingFunctionCubicBezier) GetX1Ok() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X1, true
}

// SetX1 sets field value
func (o *EasingEasingFunctionCubicBezier) SetX1(v float32) {
	o.X1 = v
}

// GetY1 returns the Y1 field value
func (o *EasingEasingFunctionCubicBezier) GetY1() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Y1
}

// GetY1Ok returns a tuple with the Y1 field value
// and a boolean to check if the value has been set.
func (o *EasingEasingFunctionCubicBezier) GetY1Ok() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y1, true
}

// SetY1 sets field value
func (o *EasingEasingFunctionCubicBezier) SetY1(v float32) {
	o.Y1 = v
}

// GetX2 returns the X2 field value
func (o *EasingEasingFunctionCubicBezier) GetX2() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.X2
}

// GetX2Ok returns a tuple with the X2 field value
// and a boolean to check if the value has been set.
func (o *EasingEasingFunctionCubicBezier) GetX2Ok() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X2, true
}

// SetX2 sets field value
func (o *EasingEasingFunctionCubicBezier) SetX2(v float32) {
	o.X2 = v
}

// GetY2 returns the Y2 field value
func (o *EasingEasingFunctionCubicBezier) GetY2() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Y2
}

// GetY2Ok returns a tuple with the Y2 field value
// and a boolean to check if the value has been set.
func (o *EasingEasingFunctionCubicBezier) GetY2Ok() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y2, true
}

// SetY2 sets field value
func (o *EasingEasingFunctionCubicBezier) SetY2(v float32) {
	o.Y2 = v
}

func (o EasingEasingFunctionCubicBezier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EasingEasingFunctionCubicBezier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["x1"] = o.X1
	toSerialize["y1"] = o.Y1
	toSerialize["x2"] = o.X2
	toSerialize["y2"] = o.Y2
	return toSerialize, nil
}

func (o *EasingEasingFunctionCubicBezier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"x1",
		"y1",
		"x2",
		"y2",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEasingEasingFunctionCubicBezier := _EasingEasingFunctionCubicBezier{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEasingEasingFunctionCubicBezier)

	if err != nil {
		return err
	}

	*o = EasingEasingFunctionCubicBezier(varEasingEasingFunctionCubicBezier)

	return err
}

type NullableEasingEasingFunctionCubicBezier struct {
	value *EasingEasingFunctionCubicBezier
	isSet bool
}

func (v NullableEasingEasingFunctionCubicBezier) Get() *EasingEasingFunctionCubicBezier {
	return v.value
}

func (v *NullableEasingEasingFunctionCubicBezier) Set(val *EasingEasingFunctionCubicBezier) {
	v.value = val
	v.isSet = true
}

func (v NullableEasingEasingFunctionCubicBezier) IsSet() bool {
	return v.isSet
}

func (v *NullableEasingEasingFunctionCubicBezier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEasingEasingFunctionCubicBezier(val *EasingEasingFunctionCubicBezier) *NullableEasingEasingFunctionCubicBezier {
	return &NullableEasingEasingFunctionCubicBezier{value: val, isSet: true}
}

func (v NullableEasingEasingFunctionCubicBezier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEasingEasingFunctionCubicBezier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



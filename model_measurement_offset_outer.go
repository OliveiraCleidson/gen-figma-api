/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MeasurementOffsetOuter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeasurementOffsetOuter{}

// MeasurementOffsetOuter Measurement offset relative to the outside of the start node
type MeasurementOffsetOuter struct {
	Type string `json:"type"`
	Fixed float32 `json:"fixed"`
}

type _MeasurementOffsetOuter MeasurementOffsetOuter

// NewMeasurementOffsetOuter instantiates a new MeasurementOffsetOuter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeasurementOffsetOuter(type_ string, fixed float32) *MeasurementOffsetOuter {
	this := MeasurementOffsetOuter{}
	this.Type = type_
	this.Fixed = fixed
	return &this
}

// NewMeasurementOffsetOuterWithDefaults instantiates a new MeasurementOffsetOuter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeasurementOffsetOuterWithDefaults() *MeasurementOffsetOuter {
	this := MeasurementOffsetOuter{}
	return &this
}

// GetType returns the Type field value
func (o *MeasurementOffsetOuter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MeasurementOffsetOuter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MeasurementOffsetOuter) SetType(v string) {
	o.Type = v
}

// GetFixed returns the Fixed field value
func (o *MeasurementOffsetOuter) GetFixed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Fixed
}

// GetFixedOk returns a tuple with the Fixed field value
// and a boolean to check if the value has been set.
func (o *MeasurementOffsetOuter) GetFixedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fixed, true
}

// SetFixed sets field value
func (o *MeasurementOffsetOuter) SetFixed(v float32) {
	o.Fixed = v
}

func (o MeasurementOffsetOuter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeasurementOffsetOuter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["fixed"] = o.Fixed
	return toSerialize, nil
}

func (o *MeasurementOffsetOuter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"fixed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeasurementOffsetOuter := _MeasurementOffsetOuter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeasurementOffsetOuter)

	if err != nil {
		return err
	}

	*o = MeasurementOffsetOuter(varMeasurementOffsetOuter)

	return err
}

type NullableMeasurementOffsetOuter struct {
	value *MeasurementOffsetOuter
	isSet bool
}

func (v NullableMeasurementOffsetOuter) Get() *MeasurementOffsetOuter {
	return v.value
}

func (v *NullableMeasurementOffsetOuter) Set(val *MeasurementOffsetOuter) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurementOffsetOuter) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurementOffsetOuter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurementOffsetOuter(val *MeasurementOffsetOuter) *NullableMeasurementOffsetOuter {
	return &NullableMeasurementOffsetOuter{value: val, isSet: true}
}

func (v NullableMeasurementOffsetOuter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurementOffsetOuter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



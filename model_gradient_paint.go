/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GradientPaint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GradientPaint{}

// GradientPaint struct for GradientPaint
type GradientPaint struct {
	// Is the paint enabled?
	Visible *bool `json:"visible,omitempty"`
	// Overall opacity of paint (colors within the paint can also have opacity values which would blend with this)
	Opacity *float32 `json:"opacity,omitempty"`
	// How this node blends with nodes behind it in the scene
	BlendMode BlendMode `json:"blendMode"`
	// The string literal representing the paint's type. Always check the `type` before reading other properties.
	Type string `json:"type"`
	// This field contains three vectors, each of which are a position in normalized object space (normalized object space is if the top left corner of the bounding box of the object is (0, 0) and the bottom right is (1,1)). The first position corresponds to the start of the gradient (value 0 for the purposes of calculating gradient stops), the second position is the end of the gradient (value 1), and the third handle position determines the width of the gradient.
	GradientHandlePositions []Vector `json:"gradientHandlePositions"`
	// Positions of key points along the gradient axis with the colors anchored there. Colors along the gradient are interpolated smoothly between neighboring gradient stops.
	GradientStops []ColorStop `json:"gradientStops"`
}

type _GradientPaint GradientPaint

// NewGradientPaint instantiates a new GradientPaint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGradientPaint(blendMode BlendMode, type_ string, gradientHandlePositions []Vector, gradientStops []ColorStop) *GradientPaint {
	this := GradientPaint{}
	var visible bool = true
	this.Visible = &visible
	var opacity float32 = 1
	this.Opacity = &opacity
	this.BlendMode = blendMode
	this.Type = type_
	this.GradientHandlePositions = gradientHandlePositions
	this.GradientStops = gradientStops
	return &this
}

// NewGradientPaintWithDefaults instantiates a new GradientPaint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGradientPaintWithDefaults() *GradientPaint {
	this := GradientPaint{}
	var visible bool = true
	this.Visible = &visible
	var opacity float32 = 1
	this.Opacity = &opacity
	return &this
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *GradientPaint) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GradientPaint) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *GradientPaint) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *GradientPaint) SetVisible(v bool) {
	o.Visible = &v
}

// GetOpacity returns the Opacity field value if set, zero value otherwise.
func (o *GradientPaint) GetOpacity() float32 {
	if o == nil || IsNil(o.Opacity) {
		var ret float32
		return ret
	}
	return *o.Opacity
}

// GetOpacityOk returns a tuple with the Opacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GradientPaint) GetOpacityOk() (*float32, bool) {
	if o == nil || IsNil(o.Opacity) {
		return nil, false
	}
	return o.Opacity, true
}

// HasOpacity returns a boolean if a field has been set.
func (o *GradientPaint) HasOpacity() bool {
	if o != nil && !IsNil(o.Opacity) {
		return true
	}

	return false
}

// SetOpacity gets a reference to the given float32 and assigns it to the Opacity field.
func (o *GradientPaint) SetOpacity(v float32) {
	o.Opacity = &v
}

// GetBlendMode returns the BlendMode field value
func (o *GradientPaint) GetBlendMode() BlendMode {
	if o == nil {
		var ret BlendMode
		return ret
	}

	return o.BlendMode
}

// GetBlendModeOk returns a tuple with the BlendMode field value
// and a boolean to check if the value has been set.
func (o *GradientPaint) GetBlendModeOk() (*BlendMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlendMode, true
}

// SetBlendMode sets field value
func (o *GradientPaint) SetBlendMode(v BlendMode) {
	o.BlendMode = v
}

// GetType returns the Type field value
func (o *GradientPaint) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GradientPaint) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GradientPaint) SetType(v string) {
	o.Type = v
}

// GetGradientHandlePositions returns the GradientHandlePositions field value
func (o *GradientPaint) GetGradientHandlePositions() []Vector {
	if o == nil {
		var ret []Vector
		return ret
	}

	return o.GradientHandlePositions
}

// GetGradientHandlePositionsOk returns a tuple with the GradientHandlePositions field value
// and a boolean to check if the value has been set.
func (o *GradientPaint) GetGradientHandlePositionsOk() ([]Vector, bool) {
	if o == nil {
		return nil, false
	}
	return o.GradientHandlePositions, true
}

// SetGradientHandlePositions sets field value
func (o *GradientPaint) SetGradientHandlePositions(v []Vector) {
	o.GradientHandlePositions = v
}

// GetGradientStops returns the GradientStops field value
func (o *GradientPaint) GetGradientStops() []ColorStop {
	if o == nil {
		var ret []ColorStop
		return ret
	}

	return o.GradientStops
}

// GetGradientStopsOk returns a tuple with the GradientStops field value
// and a boolean to check if the value has been set.
func (o *GradientPaint) GetGradientStopsOk() ([]ColorStop, bool) {
	if o == nil {
		return nil, false
	}
	return o.GradientStops, true
}

// SetGradientStops sets field value
func (o *GradientPaint) SetGradientStops(v []ColorStop) {
	o.GradientStops = v
}

func (o GradientPaint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GradientPaint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	if !IsNil(o.Opacity) {
		toSerialize["opacity"] = o.Opacity
	}
	toSerialize["blendMode"] = o.BlendMode
	toSerialize["type"] = o.Type
	toSerialize["gradientHandlePositions"] = o.GradientHandlePositions
	toSerialize["gradientStops"] = o.GradientStops
	return toSerialize, nil
}

func (o *GradientPaint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blendMode",
		"type",
		"gradientHandlePositions",
		"gradientStops",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGradientPaint := _GradientPaint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGradientPaint)

	if err != nil {
		return err
	}

	*o = GradientPaint(varGradientPaint)

	return err
}

type NullableGradientPaint struct {
	value *GradientPaint
	isSet bool
}

func (v NullableGradientPaint) Get() *GradientPaint {
	return v.value
}

func (v *NullableGradientPaint) Set(val *GradientPaint) {
	v.value = val
	v.isSet = true
}

func (v NullableGradientPaint) IsSet() bool {
	return v.isSet
}

func (v *NullableGradientPaint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGradientPaint(val *GradientPaint) *NullableGradientPaint {
	return &NullableGradientPaint{value: val, isSet: true}
}

func (v NullableGradientPaint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGradientPaint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateMediaRuntimeActionOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMediaRuntimeActionOneOf{}

// UpdateMediaRuntimeActionOneOf An action that updates the runtime of a media node by playing, pausing, toggling play/pause,  muting, unmuting, or toggling mute/unmute.  The `destinationId` is the node ID of the media node to update. If `destinationId` is `null`, the action will  update the media node that contains the action.  The `mediaAction` is the action to perform on the media node.
type UpdateMediaRuntimeActionOneOf struct {
	Type string `json:"type"`
	DestinationId NullableString `json:"destinationId"`
	MediaAction string `json:"mediaAction"`
}

type _UpdateMediaRuntimeActionOneOf UpdateMediaRuntimeActionOneOf

// NewUpdateMediaRuntimeActionOneOf instantiates a new UpdateMediaRuntimeActionOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMediaRuntimeActionOneOf(type_ string, destinationId NullableString, mediaAction string) *UpdateMediaRuntimeActionOneOf {
	this := UpdateMediaRuntimeActionOneOf{}
	this.Type = type_
	this.DestinationId = destinationId
	this.MediaAction = mediaAction
	return &this
}

// NewUpdateMediaRuntimeActionOneOfWithDefaults instantiates a new UpdateMediaRuntimeActionOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMediaRuntimeActionOneOfWithDefaults() *UpdateMediaRuntimeActionOneOf {
	this := UpdateMediaRuntimeActionOneOf{}
	return &this
}

// GetType returns the Type field value
func (o *UpdateMediaRuntimeActionOneOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UpdateMediaRuntimeActionOneOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UpdateMediaRuntimeActionOneOf) SetType(v string) {
	o.Type = v
}

// GetDestinationId returns the DestinationId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateMediaRuntimeActionOneOf) GetDestinationId() string {
	if o == nil || o.DestinationId.Get() == nil {
		var ret string
		return ret
	}

	return *o.DestinationId.Get()
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMediaRuntimeActionOneOf) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationId.Get(), o.DestinationId.IsSet()
}

// SetDestinationId sets field value
func (o *UpdateMediaRuntimeActionOneOf) SetDestinationId(v string) {
	o.DestinationId.Set(&v)
}

// GetMediaAction returns the MediaAction field value
func (o *UpdateMediaRuntimeActionOneOf) GetMediaAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaAction
}

// GetMediaActionOk returns a tuple with the MediaAction field value
// and a boolean to check if the value has been set.
func (o *UpdateMediaRuntimeActionOneOf) GetMediaActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaAction, true
}

// SetMediaAction sets field value
func (o *UpdateMediaRuntimeActionOneOf) SetMediaAction(v string) {
	o.MediaAction = v
}

func (o UpdateMediaRuntimeActionOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMediaRuntimeActionOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["destinationId"] = o.DestinationId.Get()
	toSerialize["mediaAction"] = o.MediaAction
	return toSerialize, nil
}

func (o *UpdateMediaRuntimeActionOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"destinationId",
		"mediaAction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateMediaRuntimeActionOneOf := _UpdateMediaRuntimeActionOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateMediaRuntimeActionOneOf)

	if err != nil {
		return err
	}

	*o = UpdateMediaRuntimeActionOneOf(varUpdateMediaRuntimeActionOneOf)

	return err
}

type NullableUpdateMediaRuntimeActionOneOf struct {
	value *UpdateMediaRuntimeActionOneOf
	isSet bool
}

func (v NullableUpdateMediaRuntimeActionOneOf) Get() *UpdateMediaRuntimeActionOneOf {
	return v.value
}

func (v *NullableUpdateMediaRuntimeActionOneOf) Set(val *UpdateMediaRuntimeActionOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMediaRuntimeActionOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMediaRuntimeActionOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMediaRuntimeActionOneOf(val *UpdateMediaRuntimeActionOneOf) *NullableUpdateMediaRuntimeActionOneOf {
	return &NullableUpdateMediaRuntimeActionOneOf{value: val, isSet: true}
}

func (v NullableUpdateMediaRuntimeActionOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMediaRuntimeActionOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VariableModeCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableModeCreate{}

// VariableModeCreate An object that contains details about creating a `VariableMode`.
type VariableModeCreate struct {
	// The action to perform for the variable mode.
	Action string `json:"action"`
	// A temporary id for this variable mode.
	Id *string `json:"id,omitempty"`
	// The name of this variable mode.
	Name string `json:"name"`
	// The variable collection that will contain the mode. You can use the temporary id of a variable collection.
	VariableCollectionId string `json:"variableCollectionId"`
}

type _VariableModeCreate VariableModeCreate

// NewVariableModeCreate instantiates a new VariableModeCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableModeCreate(action string, name string, variableCollectionId string) *VariableModeCreate {
	this := VariableModeCreate{}
	this.Action = action
	this.Name = name
	this.VariableCollectionId = variableCollectionId
	return &this
}

// NewVariableModeCreateWithDefaults instantiates a new VariableModeCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableModeCreateWithDefaults() *VariableModeCreate {
	this := VariableModeCreate{}
	return &this
}

// GetAction returns the Action field value
func (o *VariableModeCreate) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *VariableModeCreate) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *VariableModeCreate) SetAction(v string) {
	o.Action = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VariableModeCreate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableModeCreate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VariableModeCreate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VariableModeCreate) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *VariableModeCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VariableModeCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VariableModeCreate) SetName(v string) {
	o.Name = v
}

// GetVariableCollectionId returns the VariableCollectionId field value
func (o *VariableModeCreate) GetVariableCollectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VariableCollectionId
}

// GetVariableCollectionIdOk returns a tuple with the VariableCollectionId field value
// and a boolean to check if the value has been set.
func (o *VariableModeCreate) GetVariableCollectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VariableCollectionId, true
}

// SetVariableCollectionId sets field value
func (o *VariableModeCreate) SetVariableCollectionId(v string) {
	o.VariableCollectionId = v
}

func (o VariableModeCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableModeCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["variableCollectionId"] = o.VariableCollectionId
	return toSerialize, nil
}

func (o *VariableModeCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"name",
		"variableCollectionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVariableModeCreate := _VariableModeCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVariableModeCreate)

	if err != nil {
		return err
	}

	*o = VariableModeCreate(varVariableModeCreate)

	return err
}

type NullableVariableModeCreate struct {
	value *VariableModeCreate
	isSet bool
}

func (v NullableVariableModeCreate) Get() *VariableModeCreate {
	return v.value
}

func (v *NullableVariableModeCreate) Set(val *VariableModeCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableModeCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableModeCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableModeCreate(val *VariableModeCreate) *NullableVariableModeCreate {
	return &NullableVariableModeCreate{value: val, isSet: true}
}

func (v NullableVariableModeCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableModeCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



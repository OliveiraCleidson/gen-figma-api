/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConditionalAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionalAction{}

// ConditionalAction Checks if a condition is met before performing certain actions by using an if/else conditional statement.
type ConditionalAction struct {
	Type string `json:"type"`
	ConditionalBlocks []ConditionalBlock `json:"conditionalBlocks"`
}

type _ConditionalAction ConditionalAction

// NewConditionalAction instantiates a new ConditionalAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionalAction(type_ string, conditionalBlocks []ConditionalBlock) *ConditionalAction {
	this := ConditionalAction{}
	this.Type = type_
	this.ConditionalBlocks = conditionalBlocks
	return &this
}

// NewConditionalActionWithDefaults instantiates a new ConditionalAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionalActionWithDefaults() *ConditionalAction {
	this := ConditionalAction{}
	return &this
}

// GetType returns the Type field value
func (o *ConditionalAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConditionalAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConditionalAction) SetType(v string) {
	o.Type = v
}

// GetConditionalBlocks returns the ConditionalBlocks field value
func (o *ConditionalAction) GetConditionalBlocks() []ConditionalBlock {
	if o == nil {
		var ret []ConditionalBlock
		return ret
	}

	return o.ConditionalBlocks
}

// GetConditionalBlocksOk returns a tuple with the ConditionalBlocks field value
// and a boolean to check if the value has been set.
func (o *ConditionalAction) GetConditionalBlocksOk() ([]ConditionalBlock, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConditionalBlocks, true
}

// SetConditionalBlocks sets field value
func (o *ConditionalAction) SetConditionalBlocks(v []ConditionalBlock) {
	o.ConditionalBlocks = v
}

func (o ConditionalAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionalAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["conditionalBlocks"] = o.ConditionalBlocks
	return toSerialize, nil
}

func (o *ConditionalAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"conditionalBlocks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConditionalAction := _ConditionalAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConditionalAction)

	if err != nil {
		return err
	}

	*o = ConditionalAction(varConditionalAction)

	return err
}

type NullableConditionalAction struct {
	value *ConditionalAction
	isSet bool
}

func (v NullableConditionalAction) Get() *ConditionalAction {
	return v.value
}

func (v *NullableConditionalAction) Set(val *ConditionalAction) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionalAction) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionalAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionalAction(val *ConditionalAction) *NullableConditionalAction {
	return &NullableConditionalAction{value: val, isSet: true}
}

func (v NullableConditionalAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionalAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



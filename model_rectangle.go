/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Rectangle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rectangle{}

// Rectangle A rectangle that expresses a bounding box in absolute coordinates.
type Rectangle struct {
	// X coordinate of top left corner of the rectangle.
	X float32 `json:"x"`
	// Y coordinate of top left corner of the rectangle.
	Y float32 `json:"y"`
	// Width of the rectangle.
	Width float32 `json:"width"`
	// Height of the rectangle.
	Height float32 `json:"height"`
}

type _Rectangle Rectangle

// NewRectangle instantiates a new Rectangle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRectangle(x float32, y float32, width float32, height float32) *Rectangle {
	this := Rectangle{}
	this.X = x
	this.Y = y
	this.Width = width
	this.Height = height
	return &this
}

// NewRectangleWithDefaults instantiates a new Rectangle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRectangleWithDefaults() *Rectangle {
	this := Rectangle{}
	return &this
}

// GetX returns the X field value
func (o *Rectangle) GetX() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *Rectangle) GetXOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *Rectangle) SetX(v float32) {
	o.X = v
}

// GetY returns the Y field value
func (o *Rectangle) GetY() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *Rectangle) GetYOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *Rectangle) SetY(v float32) {
	o.Y = v
}

// GetWidth returns the Width field value
func (o *Rectangle) GetWidth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *Rectangle) GetWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *Rectangle) SetWidth(v float32) {
	o.Width = v
}

// GetHeight returns the Height field value
func (o *Rectangle) GetHeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *Rectangle) GetHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *Rectangle) SetHeight(v float32) {
	o.Height = v
}

func (o Rectangle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rectangle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	toSerialize["width"] = o.Width
	toSerialize["height"] = o.Height
	return toSerialize, nil
}

func (o *Rectangle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"x",
		"y",
		"width",
		"height",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRectangle := _Rectangle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRectangle)

	if err != nil {
		return err
	}

	*o = Rectangle(varRectangle)

	return err
}

type NullableRectangle struct {
	value *Rectangle
	isSet bool
}

func (v NullableRectangle) Get() *Rectangle {
	return v.value
}

func (v *NullableRectangle) Set(val *Rectangle) {
	v.value = val
	v.isSet = true
}

func (v NullableRectangle) IsSet() bool {
	return v.isSet
}

func (v *NullableRectangle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRectangle(val *Rectangle) *NullableRectangle {
	return &NullableRectangle{value: val, isSet: true}
}

func (v NullableRectangle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRectangle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



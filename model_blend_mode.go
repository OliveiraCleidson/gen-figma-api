/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BlendMode This type is a string enum with the following possible values  Normal blends: - `PASS_THROUGH` (only applicable to objects with children) - `NORMAL`  Darken: - `DARKEN` - `MULTIPLY` - `LINEAR_BURN` - `COLOR_BURN`  Lighten: - `LIGHTEN` - `SCREEN` - `LINEAR_DODGE` - `COLOR_DODGE`  Contrast: - `OVERLAY` - `SOFT_LIGHT` - `HARD_LIGHT`  Inversion: - `DIFFERENCE` - `EXCLUSION`  Component: - `HUE` - `SATURATION` - `COLOR` - `LUMINOSITY`
type BlendMode string

// List of BlendMode
const (
	PASS_THROUGH BlendMode = "PASS_THROUGH"
	NORMAL BlendMode = "NORMAL"
	DARKEN BlendMode = "DARKEN"
	MULTIPLY BlendMode = "MULTIPLY"
	LINEAR_BURN BlendMode = "LINEAR_BURN"
	COLOR_BURN BlendMode = "COLOR_BURN"
	LIGHTEN BlendMode = "LIGHTEN"
	SCREEN BlendMode = "SCREEN"
	LINEAR_DODGE BlendMode = "LINEAR_DODGE"
	COLOR_DODGE BlendMode = "COLOR_DODGE"
	OVERLAY BlendMode = "OVERLAY"
	SOFT_LIGHT BlendMode = "SOFT_LIGHT"
	HARD_LIGHT BlendMode = "HARD_LIGHT"
	DIFFERENCE BlendMode = "DIFFERENCE"
	EXCLUSION BlendMode = "EXCLUSION"
	HUE BlendMode = "HUE"
	SATURATION BlendMode = "SATURATION"
	COLOR BlendMode = "COLOR"
	LUMINOSITY BlendMode = "LUMINOSITY"
)

// All allowed values of BlendMode enum
var AllowedBlendModeEnumValues = []BlendMode{
	"PASS_THROUGH",
	"NORMAL",
	"DARKEN",
	"MULTIPLY",
	"LINEAR_BURN",
	"COLOR_BURN",
	"LIGHTEN",
	"SCREEN",
	"LINEAR_DODGE",
	"COLOR_DODGE",
	"OVERLAY",
	"SOFT_LIGHT",
	"HARD_LIGHT",
	"DIFFERENCE",
	"EXCLUSION",
	"HUE",
	"SATURATION",
	"COLOR",
	"LUMINOSITY",
}

func (v *BlendMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlendMode(value)
	for _, existing := range AllowedBlendModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlendMode", value)
}

// NewBlendModeFromValue returns a pointer to a valid BlendMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlendModeFromValue(v string) (*BlendMode, error) {
	ev := BlendMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlendMode: valid values are %v", v, AllowedBlendModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlendMode) IsValid() bool {
	for _, existing := range AllowedBlendModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BlendMode value
func (v BlendMode) Ptr() *BlendMode {
	return &v
}

type NullableBlendMode struct {
	value *BlendMode
	isSet bool
}

func (v NullableBlendMode) Get() *BlendMode {
	return v.value
}

func (v *NullableBlendMode) Set(val *BlendMode) {
	v.value = val
	v.isSet = true
}

func (v NullableBlendMode) IsSet() bool {
	return v.isSet
}

func (v *NullableBlendMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlendMode(val *BlendMode) *NullableBlendMode {
	return &NullableBlendMode{value: val, isSet: true}
}

func (v NullableBlendMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlendMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


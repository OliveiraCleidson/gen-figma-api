/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LocalVariableCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocalVariableCollection{}

// LocalVariableCollection A grouping of related Variable objects each with the same modes.
type LocalVariableCollection struct {
	// The unique identifier of this variable collection.
	Id string `json:"id"`
	// The name of this variable collection.
	Name string `json:"name"`
	// The key of this variable collection.
	Key string `json:"key"`
	// The modes of this variable collection.
	Modes []LocalVariableCollectionModesInner `json:"modes"`
	// The id of the default mode.
	DefaultModeId string `json:"defaultModeId"`
	// Whether this variable collection is remote.
	Remote bool `json:"remote"`
	// Whether this variable collection is hidden when publishing the current file as a library.
	HiddenFromPublishing bool `json:"hiddenFromPublishing"`
	// The ids of the variables in the collection. Note that the order of these variables is roughly the same as what is shown in Figma Design, however it does not account for groups. As a result, the order of these variables may not exactly reflect the exact ordering and grouping shown in the authoring UI.
	VariableIds []string `json:"variableIds"`
}

type _LocalVariableCollection LocalVariableCollection

// NewLocalVariableCollection instantiates a new LocalVariableCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalVariableCollection(id string, name string, key string, modes []LocalVariableCollectionModesInner, defaultModeId string, remote bool, hiddenFromPublishing bool, variableIds []string) *LocalVariableCollection {
	this := LocalVariableCollection{}
	this.Id = id
	this.Name = name
	this.Key = key
	this.Modes = modes
	this.DefaultModeId = defaultModeId
	this.Remote = remote
	this.HiddenFromPublishing = hiddenFromPublishing
	this.VariableIds = variableIds
	return &this
}

// NewLocalVariableCollectionWithDefaults instantiates a new LocalVariableCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalVariableCollectionWithDefaults() *LocalVariableCollection {
	this := LocalVariableCollection{}
	var hiddenFromPublishing bool = false
	this.HiddenFromPublishing = hiddenFromPublishing
	return &this
}

// GetId returns the Id field value
func (o *LocalVariableCollection) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LocalVariableCollection) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LocalVariableCollection) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *LocalVariableCollection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LocalVariableCollection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LocalVariableCollection) SetName(v string) {
	o.Name = v
}

// GetKey returns the Key field value
func (o *LocalVariableCollection) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *LocalVariableCollection) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *LocalVariableCollection) SetKey(v string) {
	o.Key = v
}

// GetModes returns the Modes field value
func (o *LocalVariableCollection) GetModes() []LocalVariableCollectionModesInner {
	if o == nil {
		var ret []LocalVariableCollectionModesInner
		return ret
	}

	return o.Modes
}

// GetModesOk returns a tuple with the Modes field value
// and a boolean to check if the value has been set.
func (o *LocalVariableCollection) GetModesOk() ([]LocalVariableCollectionModesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Modes, true
}

// SetModes sets field value
func (o *LocalVariableCollection) SetModes(v []LocalVariableCollectionModesInner) {
	o.Modes = v
}

// GetDefaultModeId returns the DefaultModeId field value
func (o *LocalVariableCollection) GetDefaultModeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultModeId
}

// GetDefaultModeIdOk returns a tuple with the DefaultModeId field value
// and a boolean to check if the value has been set.
func (o *LocalVariableCollection) GetDefaultModeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultModeId, true
}

// SetDefaultModeId sets field value
func (o *LocalVariableCollection) SetDefaultModeId(v string) {
	o.DefaultModeId = v
}

// GetRemote returns the Remote field value
func (o *LocalVariableCollection) GetRemote() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Remote
}

// GetRemoteOk returns a tuple with the Remote field value
// and a boolean to check if the value has been set.
func (o *LocalVariableCollection) GetRemoteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remote, true
}

// SetRemote sets field value
func (o *LocalVariableCollection) SetRemote(v bool) {
	o.Remote = v
}

// GetHiddenFromPublishing returns the HiddenFromPublishing field value
func (o *LocalVariableCollection) GetHiddenFromPublishing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HiddenFromPublishing
}

// GetHiddenFromPublishingOk returns a tuple with the HiddenFromPublishing field value
// and a boolean to check if the value has been set.
func (o *LocalVariableCollection) GetHiddenFromPublishingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HiddenFromPublishing, true
}

// SetHiddenFromPublishing sets field value
func (o *LocalVariableCollection) SetHiddenFromPublishing(v bool) {
	o.HiddenFromPublishing = v
}

// GetVariableIds returns the VariableIds field value
func (o *LocalVariableCollection) GetVariableIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.VariableIds
}

// GetVariableIdsOk returns a tuple with the VariableIds field value
// and a boolean to check if the value has been set.
func (o *LocalVariableCollection) GetVariableIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableIds, true
}

// SetVariableIds sets field value
func (o *LocalVariableCollection) SetVariableIds(v []string) {
	o.VariableIds = v
}

func (o LocalVariableCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalVariableCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["key"] = o.Key
	toSerialize["modes"] = o.Modes
	toSerialize["defaultModeId"] = o.DefaultModeId
	toSerialize["remote"] = o.Remote
	toSerialize["hiddenFromPublishing"] = o.HiddenFromPublishing
	toSerialize["variableIds"] = o.VariableIds
	return toSerialize, nil
}

func (o *LocalVariableCollection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"key",
		"modes",
		"defaultModeId",
		"remote",
		"hiddenFromPublishing",
		"variableIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocalVariableCollection := _LocalVariableCollection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLocalVariableCollection)

	if err != nil {
		return err
	}

	*o = LocalVariableCollection(varLocalVariableCollection)

	return err
}

type NullableLocalVariableCollection struct {
	value *LocalVariableCollection
	isSet bool
}

func (v NullableLocalVariableCollection) Get() *LocalVariableCollection {
	return v.value
}

func (v *NullableLocalVariableCollection) Set(val *LocalVariableCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalVariableCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalVariableCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalVariableCollection(val *LocalVariableCollection) *NullableLocalVariableCollection {
	return &NullableLocalVariableCollection{value: val, isSet: true}
}

func (v NullableLocalVariableCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalVariableCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// UpdateMediaRuntimeAction - An action that affects a video node in the Figma viewer. For example, to play, pause, or skip.
type UpdateMediaRuntimeAction struct {
	UpdateMediaRuntimeActionOneOf *UpdateMediaRuntimeActionOneOf
	UpdateMediaRuntimeActionOneOf1 *UpdateMediaRuntimeActionOneOf1
	UpdateMediaRuntimeActionOneOf2 *UpdateMediaRuntimeActionOneOf2
}

// UpdateMediaRuntimeActionOneOfAsUpdateMediaRuntimeAction is a convenience function that returns UpdateMediaRuntimeActionOneOf wrapped in UpdateMediaRuntimeAction
func UpdateMediaRuntimeActionOneOfAsUpdateMediaRuntimeAction(v *UpdateMediaRuntimeActionOneOf) UpdateMediaRuntimeAction {
	return UpdateMediaRuntimeAction{
		UpdateMediaRuntimeActionOneOf: v,
	}
}

// UpdateMediaRuntimeActionOneOf1AsUpdateMediaRuntimeAction is a convenience function that returns UpdateMediaRuntimeActionOneOf1 wrapped in UpdateMediaRuntimeAction
func UpdateMediaRuntimeActionOneOf1AsUpdateMediaRuntimeAction(v *UpdateMediaRuntimeActionOneOf1) UpdateMediaRuntimeAction {
	return UpdateMediaRuntimeAction{
		UpdateMediaRuntimeActionOneOf1: v,
	}
}

// UpdateMediaRuntimeActionOneOf2AsUpdateMediaRuntimeAction is a convenience function that returns UpdateMediaRuntimeActionOneOf2 wrapped in UpdateMediaRuntimeAction
func UpdateMediaRuntimeActionOneOf2AsUpdateMediaRuntimeAction(v *UpdateMediaRuntimeActionOneOf2) UpdateMediaRuntimeAction {
	return UpdateMediaRuntimeAction{
		UpdateMediaRuntimeActionOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateMediaRuntimeAction) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateMediaRuntimeActionOneOf
	err = newStrictDecoder(data).Decode(&dst.UpdateMediaRuntimeActionOneOf)
	if err == nil {
		jsonUpdateMediaRuntimeActionOneOf, _ := json.Marshal(dst.UpdateMediaRuntimeActionOneOf)
		if string(jsonUpdateMediaRuntimeActionOneOf) == "{}" { // empty struct
			dst.UpdateMediaRuntimeActionOneOf = nil
		} else {
			if err = validator.Validate(dst.UpdateMediaRuntimeActionOneOf); err != nil {
				dst.UpdateMediaRuntimeActionOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateMediaRuntimeActionOneOf = nil
	}

	// try to unmarshal data into UpdateMediaRuntimeActionOneOf1
	err = newStrictDecoder(data).Decode(&dst.UpdateMediaRuntimeActionOneOf1)
	if err == nil {
		jsonUpdateMediaRuntimeActionOneOf1, _ := json.Marshal(dst.UpdateMediaRuntimeActionOneOf1)
		if string(jsonUpdateMediaRuntimeActionOneOf1) == "{}" { // empty struct
			dst.UpdateMediaRuntimeActionOneOf1 = nil
		} else {
			if err = validator.Validate(dst.UpdateMediaRuntimeActionOneOf1); err != nil {
				dst.UpdateMediaRuntimeActionOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateMediaRuntimeActionOneOf1 = nil
	}

	// try to unmarshal data into UpdateMediaRuntimeActionOneOf2
	err = newStrictDecoder(data).Decode(&dst.UpdateMediaRuntimeActionOneOf2)
	if err == nil {
		jsonUpdateMediaRuntimeActionOneOf2, _ := json.Marshal(dst.UpdateMediaRuntimeActionOneOf2)
		if string(jsonUpdateMediaRuntimeActionOneOf2) == "{}" { // empty struct
			dst.UpdateMediaRuntimeActionOneOf2 = nil
		} else {
			if err = validator.Validate(dst.UpdateMediaRuntimeActionOneOf2); err != nil {
				dst.UpdateMediaRuntimeActionOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateMediaRuntimeActionOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateMediaRuntimeActionOneOf = nil
		dst.UpdateMediaRuntimeActionOneOf1 = nil
		dst.UpdateMediaRuntimeActionOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateMediaRuntimeAction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateMediaRuntimeAction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateMediaRuntimeAction) MarshalJSON() ([]byte, error) {
	if src.UpdateMediaRuntimeActionOneOf != nil {
		return json.Marshal(&src.UpdateMediaRuntimeActionOneOf)
	}

	if src.UpdateMediaRuntimeActionOneOf1 != nil {
		return json.Marshal(&src.UpdateMediaRuntimeActionOneOf1)
	}

	if src.UpdateMediaRuntimeActionOneOf2 != nil {
		return json.Marshal(&src.UpdateMediaRuntimeActionOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateMediaRuntimeAction) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UpdateMediaRuntimeActionOneOf != nil {
		return obj.UpdateMediaRuntimeActionOneOf
	}

	if obj.UpdateMediaRuntimeActionOneOf1 != nil {
		return obj.UpdateMediaRuntimeActionOneOf1
	}

	if obj.UpdateMediaRuntimeActionOneOf2 != nil {
		return obj.UpdateMediaRuntimeActionOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableUpdateMediaRuntimeAction struct {
	value *UpdateMediaRuntimeAction
	isSet bool
}

func (v NullableUpdateMediaRuntimeAction) Get() *UpdateMediaRuntimeAction {
	return v.value
}

func (v *NullableUpdateMediaRuntimeAction) Set(val *UpdateMediaRuntimeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMediaRuntimeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMediaRuntimeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMediaRuntimeAction(val *UpdateMediaRuntimeAction) *NullableUpdateMediaRuntimeAction {
	return &NullableUpdateMediaRuntimeAction{value: val, isSet: true}
}

func (v NullableUpdateMediaRuntimeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMediaRuntimeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



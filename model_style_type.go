/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StyleType The type of style
type StyleType string

// List of StyleType
const (
	FILL StyleType = "FILL"
	TEXT StyleType = "TEXT"
	EFFECT StyleType = "EFFECT"
	GRID StyleType = "GRID"
)

// All allowed values of StyleType enum
var AllowedStyleTypeEnumValues = []StyleType{
	"FILL",
	"TEXT",
	"EFFECT",
	"GRID",
}

func (v *StyleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StyleType(value)
	for _, existing := range AllowedStyleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StyleType", value)
}

// NewStyleTypeFromValue returns a pointer to a valid StyleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStyleTypeFromValue(v string) (*StyleType, error) {
	ev := StyleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StyleType: valid values are %v", v, AllowedStyleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StyleType) IsValid() bool {
	for _, existing := range AllowedStyleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StyleType value
func (v StyleType) Ptr() *StyleType {
	return &v
}

type NullableStyleType struct {
	value *StyleType
	isSet bool
}

func (v NullableStyleType) Get() *StyleType {
	return v.value
}

func (v *NullableStyleType) Set(val *StyleType) {
	v.value = val
	v.isSet = true
}

func (v NullableStyleType) IsSet() bool {
	return v.isSet
}

func (v *NullableStyleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStyleType(val *StyleType) *NullableStyleType {
	return &NullableStyleType{value: val, isSet: true}
}

func (v NullableStyleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStyleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


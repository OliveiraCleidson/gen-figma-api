/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VariableModeValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableModeValue{}

// VariableModeValue An object that represents a value for a given mode of a variable. All properties are required.
type VariableModeValue struct {
	// The target variable. You can use the temporary id of a variable.
	VariableId string `json:"variableId"`
	// Must correspond to a mode in the variable collection that contains the target variable.
	ModeId string `json:"modeId"`
	Value VariableValue `json:"value"`
}

type _VariableModeValue VariableModeValue

// NewVariableModeValue instantiates a new VariableModeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableModeValue(variableId string, modeId string, value VariableValue) *VariableModeValue {
	this := VariableModeValue{}
	this.VariableId = variableId
	this.ModeId = modeId
	this.Value = value
	return &this
}

// NewVariableModeValueWithDefaults instantiates a new VariableModeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableModeValueWithDefaults() *VariableModeValue {
	this := VariableModeValue{}
	return &this
}

// GetVariableId returns the VariableId field value
func (o *VariableModeValue) GetVariableId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VariableId
}

// GetVariableIdOk returns a tuple with the VariableId field value
// and a boolean to check if the value has been set.
func (o *VariableModeValue) GetVariableIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VariableId, true
}

// SetVariableId sets field value
func (o *VariableModeValue) SetVariableId(v string) {
	o.VariableId = v
}

// GetModeId returns the ModeId field value
func (o *VariableModeValue) GetModeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModeId
}

// GetModeIdOk returns a tuple with the ModeId field value
// and a boolean to check if the value has been set.
func (o *VariableModeValue) GetModeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModeId, true
}

// SetModeId sets field value
func (o *VariableModeValue) SetModeId(v string) {
	o.ModeId = v
}

// GetValue returns the Value field value
func (o *VariableModeValue) GetValue() VariableValue {
	if o == nil {
		var ret VariableValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *VariableModeValue) GetValueOk() (*VariableValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *VariableModeValue) SetValue(v VariableValue) {
	o.Value = v
}

func (o VariableModeValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableModeValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["variableId"] = o.VariableId
	toSerialize["modeId"] = o.ModeId
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *VariableModeValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"variableId",
		"modeId",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVariableModeValue := _VariableModeValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVariableModeValue)

	if err != nil {
		return err
	}

	*o = VariableModeValue(varVariableModeValue)

	return err
}

type NullableVariableModeValue struct {
	value *VariableModeValue
	isSet bool
}

func (v NullableVariableModeValue) Get() *VariableModeValue {
	return v.value
}

func (v *NullableVariableModeValue) Set(val *VariableModeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableModeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableModeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableModeValue(val *VariableModeValue) *NullableVariableModeValue {
	return &NullableVariableModeValue{value: val, isSet: true}
}

func (v NullableVariableModeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableModeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



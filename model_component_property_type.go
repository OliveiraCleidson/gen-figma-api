/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ComponentPropertyType Component property type.
type ComponentPropertyType string

// List of ComponentPropertyType
const (
	BOOLEAN ComponentPropertyType = "BOOLEAN"
	INSTANCE_SWAP ComponentPropertyType = "INSTANCE_SWAP"
	TEXT ComponentPropertyType = "TEXT"
	VARIANT ComponentPropertyType = "VARIANT"
)

// All allowed values of ComponentPropertyType enum
var AllowedComponentPropertyTypeEnumValues = []ComponentPropertyType{
	"BOOLEAN",
	"INSTANCE_SWAP",
	"TEXT",
	"VARIANT",
}

func (v *ComponentPropertyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ComponentPropertyType(value)
	for _, existing := range AllowedComponentPropertyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ComponentPropertyType", value)
}

// NewComponentPropertyTypeFromValue returns a pointer to a valid ComponentPropertyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComponentPropertyTypeFromValue(v string) (*ComponentPropertyType, error) {
	ev := ComponentPropertyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ComponentPropertyType: valid values are %v", v, AllowedComponentPropertyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComponentPropertyType) IsValid() bool {
	for _, existing := range AllowedComponentPropertyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ComponentPropertyType value
func (v ComponentPropertyType) Ptr() *ComponentPropertyType {
	return &v
}

type NullableComponentPropertyType struct {
	value *ComponentPropertyType
	isSet bool
}

func (v NullableComponentPropertyType) Get() *ComponentPropertyType {
	return v.value
}

func (v *NullableComponentPropertyType) Set(val *ComponentPropertyType) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentPropertyType) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentPropertyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentPropertyType(val *ComponentPropertyType) *NullableComponentPropertyType {
	return &NullableComponentPropertyType{value: val, isSet: true}
}

func (v NullableComponentPropertyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentPropertyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TransitionSourceTrait type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransitionSourceTrait{}

// TransitionSourceTrait struct for TransitionSourceTrait
type TransitionSourceTrait struct {
	// Node ID of node to transition to in prototyping
	TransitionNodeID *string `json:"transitionNodeID,omitempty"`
	// The duration of the prototyping transition on this node (in milliseconds). This will override the default transition duration on the prototype, for this node.
	TransitionDuration *float32 `json:"transitionDuration,omitempty"`
	// The easing curve used in the prototyping transition on this node.
	TransitionEasing *EasingType `json:"transitionEasing,omitempty"`
	Interactions []Interaction `json:"interactions,omitempty"`
}

// NewTransitionSourceTrait instantiates a new TransitionSourceTrait object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransitionSourceTrait() *TransitionSourceTrait {
	this := TransitionSourceTrait{}
	return &this
}

// NewTransitionSourceTraitWithDefaults instantiates a new TransitionSourceTrait object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransitionSourceTraitWithDefaults() *TransitionSourceTrait {
	this := TransitionSourceTrait{}
	return &this
}

// GetTransitionNodeID returns the TransitionNodeID field value if set, zero value otherwise.
func (o *TransitionSourceTrait) GetTransitionNodeID() string {
	if o == nil || IsNil(o.TransitionNodeID) {
		var ret string
		return ret
	}
	return *o.TransitionNodeID
}

// GetTransitionNodeIDOk returns a tuple with the TransitionNodeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitionSourceTrait) GetTransitionNodeIDOk() (*string, bool) {
	if o == nil || IsNil(o.TransitionNodeID) {
		return nil, false
	}
	return o.TransitionNodeID, true
}

// HasTransitionNodeID returns a boolean if a field has been set.
func (o *TransitionSourceTrait) HasTransitionNodeID() bool {
	if o != nil && !IsNil(o.TransitionNodeID) {
		return true
	}

	return false
}

// SetTransitionNodeID gets a reference to the given string and assigns it to the TransitionNodeID field.
func (o *TransitionSourceTrait) SetTransitionNodeID(v string) {
	o.TransitionNodeID = &v
}

// GetTransitionDuration returns the TransitionDuration field value if set, zero value otherwise.
func (o *TransitionSourceTrait) GetTransitionDuration() float32 {
	if o == nil || IsNil(o.TransitionDuration) {
		var ret float32
		return ret
	}
	return *o.TransitionDuration
}

// GetTransitionDurationOk returns a tuple with the TransitionDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitionSourceTrait) GetTransitionDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.TransitionDuration) {
		return nil, false
	}
	return o.TransitionDuration, true
}

// HasTransitionDuration returns a boolean if a field has been set.
func (o *TransitionSourceTrait) HasTransitionDuration() bool {
	if o != nil && !IsNil(o.TransitionDuration) {
		return true
	}

	return false
}

// SetTransitionDuration gets a reference to the given float32 and assigns it to the TransitionDuration field.
func (o *TransitionSourceTrait) SetTransitionDuration(v float32) {
	o.TransitionDuration = &v
}

// GetTransitionEasing returns the TransitionEasing field value if set, zero value otherwise.
func (o *TransitionSourceTrait) GetTransitionEasing() EasingType {
	if o == nil || IsNil(o.TransitionEasing) {
		var ret EasingType
		return ret
	}
	return *o.TransitionEasing
}

// GetTransitionEasingOk returns a tuple with the TransitionEasing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitionSourceTrait) GetTransitionEasingOk() (*EasingType, bool) {
	if o == nil || IsNil(o.TransitionEasing) {
		return nil, false
	}
	return o.TransitionEasing, true
}

// HasTransitionEasing returns a boolean if a field has been set.
func (o *TransitionSourceTrait) HasTransitionEasing() bool {
	if o != nil && !IsNil(o.TransitionEasing) {
		return true
	}

	return false
}

// SetTransitionEasing gets a reference to the given EasingType and assigns it to the TransitionEasing field.
func (o *TransitionSourceTrait) SetTransitionEasing(v EasingType) {
	o.TransitionEasing = &v
}

// GetInteractions returns the Interactions field value if set, zero value otherwise.
func (o *TransitionSourceTrait) GetInteractions() []Interaction {
	if o == nil || IsNil(o.Interactions) {
		var ret []Interaction
		return ret
	}
	return o.Interactions
}

// GetInteractionsOk returns a tuple with the Interactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitionSourceTrait) GetInteractionsOk() ([]Interaction, bool) {
	if o == nil || IsNil(o.Interactions) {
		return nil, false
	}
	return o.Interactions, true
}

// HasInteractions returns a boolean if a field has been set.
func (o *TransitionSourceTrait) HasInteractions() bool {
	if o != nil && !IsNil(o.Interactions) {
		return true
	}

	return false
}

// SetInteractions gets a reference to the given []Interaction and assigns it to the Interactions field.
func (o *TransitionSourceTrait) SetInteractions(v []Interaction) {
	o.Interactions = v
}

func (o TransitionSourceTrait) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransitionSourceTrait) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransitionNodeID) {
		toSerialize["transitionNodeID"] = o.TransitionNodeID
	}
	if !IsNil(o.TransitionDuration) {
		toSerialize["transitionDuration"] = o.TransitionDuration
	}
	if !IsNil(o.TransitionEasing) {
		toSerialize["transitionEasing"] = o.TransitionEasing
	}
	if !IsNil(o.Interactions) {
		toSerialize["interactions"] = o.Interactions
	}
	return toSerialize, nil
}

type NullableTransitionSourceTrait struct {
	value *TransitionSourceTrait
	isSet bool
}

func (v NullableTransitionSourceTrait) Get() *TransitionSourceTrait {
	return v.value
}

func (v *NullableTransitionSourceTrait) Set(val *TransitionSourceTrait) {
	v.value = val
	v.isSet = true
}

func (v NullableTransitionSourceTrait) IsSet() bool {
	return v.isSet
}

func (v *NullableTransitionSourceTrait) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransitionSourceTrait(val *TransitionSourceTrait) *NullableTransitionSourceTrait {
	return &NullableTransitionSourceTrait{value: val, isSet: true}
}

func (v NullableTransitionSourceTrait) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransitionSourceTrait) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



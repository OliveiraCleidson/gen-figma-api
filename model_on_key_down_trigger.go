/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OnKeyDownTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnKeyDownTrigger{}

// OnKeyDownTrigger struct for OnKeyDownTrigger
type OnKeyDownTrigger struct {
	Type string `json:"type"`
	Device string `json:"device"`
	KeyCodes []float32 `json:"keyCodes"`
}

type _OnKeyDownTrigger OnKeyDownTrigger

// NewOnKeyDownTrigger instantiates a new OnKeyDownTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnKeyDownTrigger(type_ string, device string, keyCodes []float32) *OnKeyDownTrigger {
	this := OnKeyDownTrigger{}
	this.Type = type_
	this.Device = device
	this.KeyCodes = keyCodes
	return &this
}

// NewOnKeyDownTriggerWithDefaults instantiates a new OnKeyDownTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnKeyDownTriggerWithDefaults() *OnKeyDownTrigger {
	this := OnKeyDownTrigger{}
	return &this
}

// GetType returns the Type field value
func (o *OnKeyDownTrigger) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OnKeyDownTrigger) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OnKeyDownTrigger) SetType(v string) {
	o.Type = v
}

// GetDevice returns the Device field value
func (o *OnKeyDownTrigger) GetDevice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *OnKeyDownTrigger) GetDeviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *OnKeyDownTrigger) SetDevice(v string) {
	o.Device = v
}

// GetKeyCodes returns the KeyCodes field value
func (o *OnKeyDownTrigger) GetKeyCodes() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.KeyCodes
}

// GetKeyCodesOk returns a tuple with the KeyCodes field value
// and a boolean to check if the value has been set.
func (o *OnKeyDownTrigger) GetKeyCodesOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyCodes, true
}

// SetKeyCodes sets field value
func (o *OnKeyDownTrigger) SetKeyCodes(v []float32) {
	o.KeyCodes = v
}

func (o OnKeyDownTrigger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnKeyDownTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["device"] = o.Device
	toSerialize["keyCodes"] = o.KeyCodes
	return toSerialize, nil
}

func (o *OnKeyDownTrigger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"device",
		"keyCodes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnKeyDownTrigger := _OnKeyDownTrigger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnKeyDownTrigger)

	if err != nil {
		return err
	}

	*o = OnKeyDownTrigger(varOnKeyDownTrigger)

	return err
}

type NullableOnKeyDownTrigger struct {
	value *OnKeyDownTrigger
	isSet bool
}

func (v NullableOnKeyDownTrigger) Get() *OnKeyDownTrigger {
	return v.value
}

func (v *NullableOnKeyDownTrigger) Set(val *OnKeyDownTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableOnKeyDownTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableOnKeyDownTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnKeyDownTrigger(val *OnKeyDownTrigger) *NullableOnKeyDownTrigger {
	return &NullableOnKeyDownTrigger{value: val, isSet: true}
}

func (v NullableOnKeyDownTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnKeyDownTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



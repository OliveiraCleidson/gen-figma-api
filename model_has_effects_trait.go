/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HasEffectsTrait type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HasEffectsTrait{}

// HasEffectsTrait struct for HasEffectsTrait
type HasEffectsTrait struct {
	// An array of effects attached to this node (see effects section for more details)
	Effects []Effect `json:"effects"`
}

type _HasEffectsTrait HasEffectsTrait

// NewHasEffectsTrait instantiates a new HasEffectsTrait object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHasEffectsTrait(effects []Effect) *HasEffectsTrait {
	this := HasEffectsTrait{}
	this.Effects = effects
	return &this
}

// NewHasEffectsTraitWithDefaults instantiates a new HasEffectsTrait object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHasEffectsTraitWithDefaults() *HasEffectsTrait {
	this := HasEffectsTrait{}
	return &this
}

// GetEffects returns the Effects field value
func (o *HasEffectsTrait) GetEffects() []Effect {
	if o == nil {
		var ret []Effect
		return ret
	}

	return o.Effects
}

// GetEffectsOk returns a tuple with the Effects field value
// and a boolean to check if the value has been set.
func (o *HasEffectsTrait) GetEffectsOk() ([]Effect, bool) {
	if o == nil {
		return nil, false
	}
	return o.Effects, true
}

// SetEffects sets field value
func (o *HasEffectsTrait) SetEffects(v []Effect) {
	o.Effects = v
}

func (o HasEffectsTrait) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HasEffectsTrait) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["effects"] = o.Effects
	return toSerialize, nil
}

func (o *HasEffectsTrait) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"effects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHasEffectsTrait := _HasEffectsTrait{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHasEffectsTrait)

	if err != nil {
		return err
	}

	*o = HasEffectsTrait(varHasEffectsTrait)

	return err
}

type NullableHasEffectsTrait struct {
	value *HasEffectsTrait
	isSet bool
}

func (v NullableHasEffectsTrait) Get() *HasEffectsTrait {
	return v.value
}

func (v *NullableHasEffectsTrait) Set(val *HasEffectsTrait) {
	v.value = val
	v.isSet = true
}

func (v NullableHasEffectsTrait) IsSet() bool {
	return v.isSet
}

func (v *NullableHasEffectsTrait) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHasEffectsTrait(val *HasEffectsTrait) *NullableHasEffectsTrait {
	return &NullableHasEffectsTrait{value: val, isSet: true}
}

func (v NullableHasEffectsTrait) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHasEffectsTrait) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



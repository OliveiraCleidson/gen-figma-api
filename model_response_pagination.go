/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResponsePagination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsePagination{}

// ResponsePagination If pagination is needed due to the length of the response, identifies the next and previous pages.
type ResponsePagination struct {
	// A URL that calls the previous page of the response.
	PrevPage *string `json:"prev_page,omitempty"`
	// A URL that calls the next page of the response.
	NextPage *string `json:"next_page,omitempty"`
}

// NewResponsePagination instantiates a new ResponsePagination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsePagination() *ResponsePagination {
	this := ResponsePagination{}
	return &this
}

// NewResponsePaginationWithDefaults instantiates a new ResponsePagination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsePaginationWithDefaults() *ResponsePagination {
	this := ResponsePagination{}
	return &this
}

// GetPrevPage returns the PrevPage field value if set, zero value otherwise.
func (o *ResponsePagination) GetPrevPage() string {
	if o == nil || IsNil(o.PrevPage) {
		var ret string
		return ret
	}
	return *o.PrevPage
}

// GetPrevPageOk returns a tuple with the PrevPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePagination) GetPrevPageOk() (*string, bool) {
	if o == nil || IsNil(o.PrevPage) {
		return nil, false
	}
	return o.PrevPage, true
}

// HasPrevPage returns a boolean if a field has been set.
func (o *ResponsePagination) HasPrevPage() bool {
	if o != nil && !IsNil(o.PrevPage) {
		return true
	}

	return false
}

// SetPrevPage gets a reference to the given string and assigns it to the PrevPage field.
func (o *ResponsePagination) SetPrevPage(v string) {
	o.PrevPage = &v
}

// GetNextPage returns the NextPage field value if set, zero value otherwise.
func (o *ResponsePagination) GetNextPage() string {
	if o == nil || IsNil(o.NextPage) {
		var ret string
		return ret
	}
	return *o.NextPage
}

// GetNextPageOk returns a tuple with the NextPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePagination) GetNextPageOk() (*string, bool) {
	if o == nil || IsNil(o.NextPage) {
		return nil, false
	}
	return o.NextPage, true
}

// HasNextPage returns a boolean if a field has been set.
func (o *ResponsePagination) HasNextPage() bool {
	if o != nil && !IsNil(o.NextPage) {
		return true
	}

	return false
}

// SetNextPage gets a reference to the given string and assigns it to the NextPage field.
func (o *ResponsePagination) SetNextPage(v string) {
	o.NextPage = &v
}

func (o ResponsePagination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsePagination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrevPage) {
		toSerialize["prev_page"] = o.PrevPage
	}
	if !IsNil(o.NextPage) {
		toSerialize["next_page"] = o.NextPage
	}
	return toSerialize, nil
}

type NullableResponsePagination struct {
	value *ResponsePagination
	isSet bool
}

func (v NullableResponsePagination) Get() *ResponsePagination {
	return v.value
}

func (v *NullableResponsePagination) Set(val *ResponsePagination) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsePagination) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsePagination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsePagination(val *ResponsePagination) *NullableResponsePagination {
	return &NullableResponsePagination{value: val, isSet: true}
}

func (v NullableResponsePagination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsePagination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



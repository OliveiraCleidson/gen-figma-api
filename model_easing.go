/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Easing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Easing{}

// Easing Describes an easing curve.
type Easing struct {
	// The type of easing curve.
	Type EasingType `json:"type"`
	EasingFunctionCubicBezier *EasingEasingFunctionCubicBezier `json:"easingFunctionCubicBezier,omitempty"`
	EasingFunctionSpring *EasingEasingFunctionSpring `json:"easingFunctionSpring,omitempty"`
}

type _Easing Easing

// NewEasing instantiates a new Easing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEasing(type_ EasingType) *Easing {
	this := Easing{}
	this.Type = type_
	return &this
}

// NewEasingWithDefaults instantiates a new Easing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEasingWithDefaults() *Easing {
	this := Easing{}
	return &this
}

// GetType returns the Type field value
func (o *Easing) GetType() EasingType {
	if o == nil {
		var ret EasingType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Easing) GetTypeOk() (*EasingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Easing) SetType(v EasingType) {
	o.Type = v
}

// GetEasingFunctionCubicBezier returns the EasingFunctionCubicBezier field value if set, zero value otherwise.
func (o *Easing) GetEasingFunctionCubicBezier() EasingEasingFunctionCubicBezier {
	if o == nil || IsNil(o.EasingFunctionCubicBezier) {
		var ret EasingEasingFunctionCubicBezier
		return ret
	}
	return *o.EasingFunctionCubicBezier
}

// GetEasingFunctionCubicBezierOk returns a tuple with the EasingFunctionCubicBezier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Easing) GetEasingFunctionCubicBezierOk() (*EasingEasingFunctionCubicBezier, bool) {
	if o == nil || IsNil(o.EasingFunctionCubicBezier) {
		return nil, false
	}
	return o.EasingFunctionCubicBezier, true
}

// HasEasingFunctionCubicBezier returns a boolean if a field has been set.
func (o *Easing) HasEasingFunctionCubicBezier() bool {
	if o != nil && !IsNil(o.EasingFunctionCubicBezier) {
		return true
	}

	return false
}

// SetEasingFunctionCubicBezier gets a reference to the given EasingEasingFunctionCubicBezier and assigns it to the EasingFunctionCubicBezier field.
func (o *Easing) SetEasingFunctionCubicBezier(v EasingEasingFunctionCubicBezier) {
	o.EasingFunctionCubicBezier = &v
}

// GetEasingFunctionSpring returns the EasingFunctionSpring field value if set, zero value otherwise.
func (o *Easing) GetEasingFunctionSpring() EasingEasingFunctionSpring {
	if o == nil || IsNil(o.EasingFunctionSpring) {
		var ret EasingEasingFunctionSpring
		return ret
	}
	return *o.EasingFunctionSpring
}

// GetEasingFunctionSpringOk returns a tuple with the EasingFunctionSpring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Easing) GetEasingFunctionSpringOk() (*EasingEasingFunctionSpring, bool) {
	if o == nil || IsNil(o.EasingFunctionSpring) {
		return nil, false
	}
	return o.EasingFunctionSpring, true
}

// HasEasingFunctionSpring returns a boolean if a field has been set.
func (o *Easing) HasEasingFunctionSpring() bool {
	if o != nil && !IsNil(o.EasingFunctionSpring) {
		return true
	}

	return false
}

// SetEasingFunctionSpring gets a reference to the given EasingEasingFunctionSpring and assigns it to the EasingFunctionSpring field.
func (o *Easing) SetEasingFunctionSpring(v EasingEasingFunctionSpring) {
	o.EasingFunctionSpring = &v
}

func (o Easing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Easing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.EasingFunctionCubicBezier) {
		toSerialize["easingFunctionCubicBezier"] = o.EasingFunctionCubicBezier
	}
	if !IsNil(o.EasingFunctionSpring) {
		toSerialize["easingFunctionSpring"] = o.EasingFunctionSpring
	}
	return toSerialize, nil
}

func (o *Easing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEasing := _Easing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEasing)

	if err != nil {
		return err
	}

	*o = Easing(varEasing)

	return err
}

type NullableEasing struct {
	value *Easing
	isSet bool
}

func (v NullableEasing) Get() *Easing {
	return v.value
}

func (v *NullableEasing) Set(val *Easing) {
	v.value = val
	v.isSet = true
}

func (v NullableEasing) IsSet() bool {
	return v.isSet
}

func (v *NullableEasing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEasing(val *Easing) *NullableEasing {
	return &NullableEasing{value: val, isSet: true}
}

func (v NullableEasing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEasing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IsLayerTraitBoundVariables type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IsLayerTraitBoundVariables{}

// IsLayerTraitBoundVariables A mapping of field to the variables applied to this field. Most fields will only map to a single `VariableAlias`. However, for properties like `fills`, `strokes`, `size`, `componentProperties`, and `textRangeFills`, it is possible to have multiple variables bound to the field.
type IsLayerTraitBoundVariables struct {
	Size *IsLayerTraitBoundVariablesSize `json:"size,omitempty"`
	IndividualStrokeWeights *IsLayerTraitBoundVariablesIndividualStrokeWeights `json:"individualStrokeWeights,omitempty"`
	Characters *VariableAlias `json:"characters,omitempty"`
	ItemSpacing *VariableAlias `json:"itemSpacing,omitempty"`
	PaddingLeft *VariableAlias `json:"paddingLeft,omitempty"`
	PaddingRight *VariableAlias `json:"paddingRight,omitempty"`
	PaddingTop *VariableAlias `json:"paddingTop,omitempty"`
	PaddingBottom *VariableAlias `json:"paddingBottom,omitempty"`
	Visible *VariableAlias `json:"visible,omitempty"`
	TopLeftRadius *VariableAlias `json:"topLeftRadius,omitempty"`
	TopRightRadius *VariableAlias `json:"topRightRadius,omitempty"`
	BottomLeftRadius *VariableAlias `json:"bottomLeftRadius,omitempty"`
	BottomRightRadius *VariableAlias `json:"bottomRightRadius,omitempty"`
	MinWidth *VariableAlias `json:"minWidth,omitempty"`
	MaxWidth *VariableAlias `json:"maxWidth,omitempty"`
	MinHeight *VariableAlias `json:"minHeight,omitempty"`
	MaxHeight *VariableAlias `json:"maxHeight,omitempty"`
	CounterAxisSpacing *VariableAlias `json:"counterAxisSpacing,omitempty"`
	Opacity *VariableAlias `json:"opacity,omitempty"`
	FontFamily []VariableAlias `json:"fontFamily,omitempty"`
	FontSize []VariableAlias `json:"fontSize,omitempty"`
	FontStyle []VariableAlias `json:"fontStyle,omitempty"`
	FontWeight []VariableAlias `json:"fontWeight,omitempty"`
	LetterSpacing []VariableAlias `json:"letterSpacing,omitempty"`
	LineHeight []VariableAlias `json:"lineHeight,omitempty"`
	ParagraphSpacing []VariableAlias `json:"paragraphSpacing,omitempty"`
	ParagraphIndent []VariableAlias `json:"paragraphIndent,omitempty"`
	Fills []VariableAlias `json:"fills,omitempty"`
	Strokes []VariableAlias `json:"strokes,omitempty"`
	ComponentProperties map[string]VariableAlias `json:"componentProperties,omitempty"`
	TextRangeFills []VariableAlias `json:"textRangeFills,omitempty"`
	Effects []VariableAlias `json:"effects,omitempty"`
	LayoutGrids []VariableAlias `json:"layoutGrids,omitempty"`
}

// NewIsLayerTraitBoundVariables instantiates a new IsLayerTraitBoundVariables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIsLayerTraitBoundVariables() *IsLayerTraitBoundVariables {
	this := IsLayerTraitBoundVariables{}
	return &this
}

// NewIsLayerTraitBoundVariablesWithDefaults instantiates a new IsLayerTraitBoundVariables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIsLayerTraitBoundVariablesWithDefaults() *IsLayerTraitBoundVariables {
	this := IsLayerTraitBoundVariables{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetSize() IsLayerTraitBoundVariablesSize {
	if o == nil || IsNil(o.Size) {
		var ret IsLayerTraitBoundVariablesSize
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetSizeOk() (*IsLayerTraitBoundVariablesSize, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given IsLayerTraitBoundVariablesSize and assigns it to the Size field.
func (o *IsLayerTraitBoundVariables) SetSize(v IsLayerTraitBoundVariablesSize) {
	o.Size = &v
}

// GetIndividualStrokeWeights returns the IndividualStrokeWeights field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetIndividualStrokeWeights() IsLayerTraitBoundVariablesIndividualStrokeWeights {
	if o == nil || IsNil(o.IndividualStrokeWeights) {
		var ret IsLayerTraitBoundVariablesIndividualStrokeWeights
		return ret
	}
	return *o.IndividualStrokeWeights
}

// GetIndividualStrokeWeightsOk returns a tuple with the IndividualStrokeWeights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetIndividualStrokeWeightsOk() (*IsLayerTraitBoundVariablesIndividualStrokeWeights, bool) {
	if o == nil || IsNil(o.IndividualStrokeWeights) {
		return nil, false
	}
	return o.IndividualStrokeWeights, true
}

// HasIndividualStrokeWeights returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasIndividualStrokeWeights() bool {
	if o != nil && !IsNil(o.IndividualStrokeWeights) {
		return true
	}

	return false
}

// SetIndividualStrokeWeights gets a reference to the given IsLayerTraitBoundVariablesIndividualStrokeWeights and assigns it to the IndividualStrokeWeights field.
func (o *IsLayerTraitBoundVariables) SetIndividualStrokeWeights(v IsLayerTraitBoundVariablesIndividualStrokeWeights) {
	o.IndividualStrokeWeights = &v
}

// GetCharacters returns the Characters field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetCharacters() VariableAlias {
	if o == nil || IsNil(o.Characters) {
		var ret VariableAlias
		return ret
	}
	return *o.Characters
}

// GetCharactersOk returns a tuple with the Characters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetCharactersOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.Characters) {
		return nil, false
	}
	return o.Characters, true
}

// HasCharacters returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasCharacters() bool {
	if o != nil && !IsNil(o.Characters) {
		return true
	}

	return false
}

// SetCharacters gets a reference to the given VariableAlias and assigns it to the Characters field.
func (o *IsLayerTraitBoundVariables) SetCharacters(v VariableAlias) {
	o.Characters = &v
}

// GetItemSpacing returns the ItemSpacing field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetItemSpacing() VariableAlias {
	if o == nil || IsNil(o.ItemSpacing) {
		var ret VariableAlias
		return ret
	}
	return *o.ItemSpacing
}

// GetItemSpacingOk returns a tuple with the ItemSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetItemSpacingOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.ItemSpacing) {
		return nil, false
	}
	return o.ItemSpacing, true
}

// HasItemSpacing returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasItemSpacing() bool {
	if o != nil && !IsNil(o.ItemSpacing) {
		return true
	}

	return false
}

// SetItemSpacing gets a reference to the given VariableAlias and assigns it to the ItemSpacing field.
func (o *IsLayerTraitBoundVariables) SetItemSpacing(v VariableAlias) {
	o.ItemSpacing = &v
}

// GetPaddingLeft returns the PaddingLeft field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetPaddingLeft() VariableAlias {
	if o == nil || IsNil(o.PaddingLeft) {
		var ret VariableAlias
		return ret
	}
	return *o.PaddingLeft
}

// GetPaddingLeftOk returns a tuple with the PaddingLeft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetPaddingLeftOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.PaddingLeft) {
		return nil, false
	}
	return o.PaddingLeft, true
}

// HasPaddingLeft returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasPaddingLeft() bool {
	if o != nil && !IsNil(o.PaddingLeft) {
		return true
	}

	return false
}

// SetPaddingLeft gets a reference to the given VariableAlias and assigns it to the PaddingLeft field.
func (o *IsLayerTraitBoundVariables) SetPaddingLeft(v VariableAlias) {
	o.PaddingLeft = &v
}

// GetPaddingRight returns the PaddingRight field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetPaddingRight() VariableAlias {
	if o == nil || IsNil(o.PaddingRight) {
		var ret VariableAlias
		return ret
	}
	return *o.PaddingRight
}

// GetPaddingRightOk returns a tuple with the PaddingRight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetPaddingRightOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.PaddingRight) {
		return nil, false
	}
	return o.PaddingRight, true
}

// HasPaddingRight returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasPaddingRight() bool {
	if o != nil && !IsNil(o.PaddingRight) {
		return true
	}

	return false
}

// SetPaddingRight gets a reference to the given VariableAlias and assigns it to the PaddingRight field.
func (o *IsLayerTraitBoundVariables) SetPaddingRight(v VariableAlias) {
	o.PaddingRight = &v
}

// GetPaddingTop returns the PaddingTop field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetPaddingTop() VariableAlias {
	if o == nil || IsNil(o.PaddingTop) {
		var ret VariableAlias
		return ret
	}
	return *o.PaddingTop
}

// GetPaddingTopOk returns a tuple with the PaddingTop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetPaddingTopOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.PaddingTop) {
		return nil, false
	}
	return o.PaddingTop, true
}

// HasPaddingTop returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasPaddingTop() bool {
	if o != nil && !IsNil(o.PaddingTop) {
		return true
	}

	return false
}

// SetPaddingTop gets a reference to the given VariableAlias and assigns it to the PaddingTop field.
func (o *IsLayerTraitBoundVariables) SetPaddingTop(v VariableAlias) {
	o.PaddingTop = &v
}

// GetPaddingBottom returns the PaddingBottom field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetPaddingBottom() VariableAlias {
	if o == nil || IsNil(o.PaddingBottom) {
		var ret VariableAlias
		return ret
	}
	return *o.PaddingBottom
}

// GetPaddingBottomOk returns a tuple with the PaddingBottom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetPaddingBottomOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.PaddingBottom) {
		return nil, false
	}
	return o.PaddingBottom, true
}

// HasPaddingBottom returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasPaddingBottom() bool {
	if o != nil && !IsNil(o.PaddingBottom) {
		return true
	}

	return false
}

// SetPaddingBottom gets a reference to the given VariableAlias and assigns it to the PaddingBottom field.
func (o *IsLayerTraitBoundVariables) SetPaddingBottom(v VariableAlias) {
	o.PaddingBottom = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetVisible() VariableAlias {
	if o == nil || IsNil(o.Visible) {
		var ret VariableAlias
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetVisibleOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given VariableAlias and assigns it to the Visible field.
func (o *IsLayerTraitBoundVariables) SetVisible(v VariableAlias) {
	o.Visible = &v
}

// GetTopLeftRadius returns the TopLeftRadius field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetTopLeftRadius() VariableAlias {
	if o == nil || IsNil(o.TopLeftRadius) {
		var ret VariableAlias
		return ret
	}
	return *o.TopLeftRadius
}

// GetTopLeftRadiusOk returns a tuple with the TopLeftRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetTopLeftRadiusOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.TopLeftRadius) {
		return nil, false
	}
	return o.TopLeftRadius, true
}

// HasTopLeftRadius returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasTopLeftRadius() bool {
	if o != nil && !IsNil(o.TopLeftRadius) {
		return true
	}

	return false
}

// SetTopLeftRadius gets a reference to the given VariableAlias and assigns it to the TopLeftRadius field.
func (o *IsLayerTraitBoundVariables) SetTopLeftRadius(v VariableAlias) {
	o.TopLeftRadius = &v
}

// GetTopRightRadius returns the TopRightRadius field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetTopRightRadius() VariableAlias {
	if o == nil || IsNil(o.TopRightRadius) {
		var ret VariableAlias
		return ret
	}
	return *o.TopRightRadius
}

// GetTopRightRadiusOk returns a tuple with the TopRightRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetTopRightRadiusOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.TopRightRadius) {
		return nil, false
	}
	return o.TopRightRadius, true
}

// HasTopRightRadius returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasTopRightRadius() bool {
	if o != nil && !IsNil(o.TopRightRadius) {
		return true
	}

	return false
}

// SetTopRightRadius gets a reference to the given VariableAlias and assigns it to the TopRightRadius field.
func (o *IsLayerTraitBoundVariables) SetTopRightRadius(v VariableAlias) {
	o.TopRightRadius = &v
}

// GetBottomLeftRadius returns the BottomLeftRadius field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetBottomLeftRadius() VariableAlias {
	if o == nil || IsNil(o.BottomLeftRadius) {
		var ret VariableAlias
		return ret
	}
	return *o.BottomLeftRadius
}

// GetBottomLeftRadiusOk returns a tuple with the BottomLeftRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetBottomLeftRadiusOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.BottomLeftRadius) {
		return nil, false
	}
	return o.BottomLeftRadius, true
}

// HasBottomLeftRadius returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasBottomLeftRadius() bool {
	if o != nil && !IsNil(o.BottomLeftRadius) {
		return true
	}

	return false
}

// SetBottomLeftRadius gets a reference to the given VariableAlias and assigns it to the BottomLeftRadius field.
func (o *IsLayerTraitBoundVariables) SetBottomLeftRadius(v VariableAlias) {
	o.BottomLeftRadius = &v
}

// GetBottomRightRadius returns the BottomRightRadius field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetBottomRightRadius() VariableAlias {
	if o == nil || IsNil(o.BottomRightRadius) {
		var ret VariableAlias
		return ret
	}
	return *o.BottomRightRadius
}

// GetBottomRightRadiusOk returns a tuple with the BottomRightRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetBottomRightRadiusOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.BottomRightRadius) {
		return nil, false
	}
	return o.BottomRightRadius, true
}

// HasBottomRightRadius returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasBottomRightRadius() bool {
	if o != nil && !IsNil(o.BottomRightRadius) {
		return true
	}

	return false
}

// SetBottomRightRadius gets a reference to the given VariableAlias and assigns it to the BottomRightRadius field.
func (o *IsLayerTraitBoundVariables) SetBottomRightRadius(v VariableAlias) {
	o.BottomRightRadius = &v
}

// GetMinWidth returns the MinWidth field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetMinWidth() VariableAlias {
	if o == nil || IsNil(o.MinWidth) {
		var ret VariableAlias
		return ret
	}
	return *o.MinWidth
}

// GetMinWidthOk returns a tuple with the MinWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetMinWidthOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.MinWidth) {
		return nil, false
	}
	return o.MinWidth, true
}

// HasMinWidth returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasMinWidth() bool {
	if o != nil && !IsNil(o.MinWidth) {
		return true
	}

	return false
}

// SetMinWidth gets a reference to the given VariableAlias and assigns it to the MinWidth field.
func (o *IsLayerTraitBoundVariables) SetMinWidth(v VariableAlias) {
	o.MinWidth = &v
}

// GetMaxWidth returns the MaxWidth field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetMaxWidth() VariableAlias {
	if o == nil || IsNil(o.MaxWidth) {
		var ret VariableAlias
		return ret
	}
	return *o.MaxWidth
}

// GetMaxWidthOk returns a tuple with the MaxWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetMaxWidthOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.MaxWidth) {
		return nil, false
	}
	return o.MaxWidth, true
}

// HasMaxWidth returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasMaxWidth() bool {
	if o != nil && !IsNil(o.MaxWidth) {
		return true
	}

	return false
}

// SetMaxWidth gets a reference to the given VariableAlias and assigns it to the MaxWidth field.
func (o *IsLayerTraitBoundVariables) SetMaxWidth(v VariableAlias) {
	o.MaxWidth = &v
}

// GetMinHeight returns the MinHeight field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetMinHeight() VariableAlias {
	if o == nil || IsNil(o.MinHeight) {
		var ret VariableAlias
		return ret
	}
	return *o.MinHeight
}

// GetMinHeightOk returns a tuple with the MinHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetMinHeightOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.MinHeight) {
		return nil, false
	}
	return o.MinHeight, true
}

// HasMinHeight returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasMinHeight() bool {
	if o != nil && !IsNil(o.MinHeight) {
		return true
	}

	return false
}

// SetMinHeight gets a reference to the given VariableAlias and assigns it to the MinHeight field.
func (o *IsLayerTraitBoundVariables) SetMinHeight(v VariableAlias) {
	o.MinHeight = &v
}

// GetMaxHeight returns the MaxHeight field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetMaxHeight() VariableAlias {
	if o == nil || IsNil(o.MaxHeight) {
		var ret VariableAlias
		return ret
	}
	return *o.MaxHeight
}

// GetMaxHeightOk returns a tuple with the MaxHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetMaxHeightOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.MaxHeight) {
		return nil, false
	}
	return o.MaxHeight, true
}

// HasMaxHeight returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasMaxHeight() bool {
	if o != nil && !IsNil(o.MaxHeight) {
		return true
	}

	return false
}

// SetMaxHeight gets a reference to the given VariableAlias and assigns it to the MaxHeight field.
func (o *IsLayerTraitBoundVariables) SetMaxHeight(v VariableAlias) {
	o.MaxHeight = &v
}

// GetCounterAxisSpacing returns the CounterAxisSpacing field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetCounterAxisSpacing() VariableAlias {
	if o == nil || IsNil(o.CounterAxisSpacing) {
		var ret VariableAlias
		return ret
	}
	return *o.CounterAxisSpacing
}

// GetCounterAxisSpacingOk returns a tuple with the CounterAxisSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetCounterAxisSpacingOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.CounterAxisSpacing) {
		return nil, false
	}
	return o.CounterAxisSpacing, true
}

// HasCounterAxisSpacing returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasCounterAxisSpacing() bool {
	if o != nil && !IsNil(o.CounterAxisSpacing) {
		return true
	}

	return false
}

// SetCounterAxisSpacing gets a reference to the given VariableAlias and assigns it to the CounterAxisSpacing field.
func (o *IsLayerTraitBoundVariables) SetCounterAxisSpacing(v VariableAlias) {
	o.CounterAxisSpacing = &v
}

// GetOpacity returns the Opacity field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetOpacity() VariableAlias {
	if o == nil || IsNil(o.Opacity) {
		var ret VariableAlias
		return ret
	}
	return *o.Opacity
}

// GetOpacityOk returns a tuple with the Opacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetOpacityOk() (*VariableAlias, bool) {
	if o == nil || IsNil(o.Opacity) {
		return nil, false
	}
	return o.Opacity, true
}

// HasOpacity returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasOpacity() bool {
	if o != nil && !IsNil(o.Opacity) {
		return true
	}

	return false
}

// SetOpacity gets a reference to the given VariableAlias and assigns it to the Opacity field.
func (o *IsLayerTraitBoundVariables) SetOpacity(v VariableAlias) {
	o.Opacity = &v
}

// GetFontFamily returns the FontFamily field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetFontFamily() []VariableAlias {
	if o == nil || IsNil(o.FontFamily) {
		var ret []VariableAlias
		return ret
	}
	return o.FontFamily
}

// GetFontFamilyOk returns a tuple with the FontFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetFontFamilyOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.FontFamily) {
		return nil, false
	}
	return o.FontFamily, true
}

// HasFontFamily returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasFontFamily() bool {
	if o != nil && !IsNil(o.FontFamily) {
		return true
	}

	return false
}

// SetFontFamily gets a reference to the given []VariableAlias and assigns it to the FontFamily field.
func (o *IsLayerTraitBoundVariables) SetFontFamily(v []VariableAlias) {
	o.FontFamily = v
}

// GetFontSize returns the FontSize field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetFontSize() []VariableAlias {
	if o == nil || IsNil(o.FontSize) {
		var ret []VariableAlias
		return ret
	}
	return o.FontSize
}

// GetFontSizeOk returns a tuple with the FontSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetFontSizeOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.FontSize) {
		return nil, false
	}
	return o.FontSize, true
}

// HasFontSize returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasFontSize() bool {
	if o != nil && !IsNil(o.FontSize) {
		return true
	}

	return false
}

// SetFontSize gets a reference to the given []VariableAlias and assigns it to the FontSize field.
func (o *IsLayerTraitBoundVariables) SetFontSize(v []VariableAlias) {
	o.FontSize = v
}

// GetFontStyle returns the FontStyle field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetFontStyle() []VariableAlias {
	if o == nil || IsNil(o.FontStyle) {
		var ret []VariableAlias
		return ret
	}
	return o.FontStyle
}

// GetFontStyleOk returns a tuple with the FontStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetFontStyleOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.FontStyle) {
		return nil, false
	}
	return o.FontStyle, true
}

// HasFontStyle returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasFontStyle() bool {
	if o != nil && !IsNil(o.FontStyle) {
		return true
	}

	return false
}

// SetFontStyle gets a reference to the given []VariableAlias and assigns it to the FontStyle field.
func (o *IsLayerTraitBoundVariables) SetFontStyle(v []VariableAlias) {
	o.FontStyle = v
}

// GetFontWeight returns the FontWeight field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetFontWeight() []VariableAlias {
	if o == nil || IsNil(o.FontWeight) {
		var ret []VariableAlias
		return ret
	}
	return o.FontWeight
}

// GetFontWeightOk returns a tuple with the FontWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetFontWeightOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.FontWeight) {
		return nil, false
	}
	return o.FontWeight, true
}

// HasFontWeight returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasFontWeight() bool {
	if o != nil && !IsNil(o.FontWeight) {
		return true
	}

	return false
}

// SetFontWeight gets a reference to the given []VariableAlias and assigns it to the FontWeight field.
func (o *IsLayerTraitBoundVariables) SetFontWeight(v []VariableAlias) {
	o.FontWeight = v
}

// GetLetterSpacing returns the LetterSpacing field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetLetterSpacing() []VariableAlias {
	if o == nil || IsNil(o.LetterSpacing) {
		var ret []VariableAlias
		return ret
	}
	return o.LetterSpacing
}

// GetLetterSpacingOk returns a tuple with the LetterSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetLetterSpacingOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.LetterSpacing) {
		return nil, false
	}
	return o.LetterSpacing, true
}

// HasLetterSpacing returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasLetterSpacing() bool {
	if o != nil && !IsNil(o.LetterSpacing) {
		return true
	}

	return false
}

// SetLetterSpacing gets a reference to the given []VariableAlias and assigns it to the LetterSpacing field.
func (o *IsLayerTraitBoundVariables) SetLetterSpacing(v []VariableAlias) {
	o.LetterSpacing = v
}

// GetLineHeight returns the LineHeight field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetLineHeight() []VariableAlias {
	if o == nil || IsNil(o.LineHeight) {
		var ret []VariableAlias
		return ret
	}
	return o.LineHeight
}

// GetLineHeightOk returns a tuple with the LineHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetLineHeightOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.LineHeight) {
		return nil, false
	}
	return o.LineHeight, true
}

// HasLineHeight returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasLineHeight() bool {
	if o != nil && !IsNil(o.LineHeight) {
		return true
	}

	return false
}

// SetLineHeight gets a reference to the given []VariableAlias and assigns it to the LineHeight field.
func (o *IsLayerTraitBoundVariables) SetLineHeight(v []VariableAlias) {
	o.LineHeight = v
}

// GetParagraphSpacing returns the ParagraphSpacing field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetParagraphSpacing() []VariableAlias {
	if o == nil || IsNil(o.ParagraphSpacing) {
		var ret []VariableAlias
		return ret
	}
	return o.ParagraphSpacing
}

// GetParagraphSpacingOk returns a tuple with the ParagraphSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetParagraphSpacingOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.ParagraphSpacing) {
		return nil, false
	}
	return o.ParagraphSpacing, true
}

// HasParagraphSpacing returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasParagraphSpacing() bool {
	if o != nil && !IsNil(o.ParagraphSpacing) {
		return true
	}

	return false
}

// SetParagraphSpacing gets a reference to the given []VariableAlias and assigns it to the ParagraphSpacing field.
func (o *IsLayerTraitBoundVariables) SetParagraphSpacing(v []VariableAlias) {
	o.ParagraphSpacing = v
}

// GetParagraphIndent returns the ParagraphIndent field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetParagraphIndent() []VariableAlias {
	if o == nil || IsNil(o.ParagraphIndent) {
		var ret []VariableAlias
		return ret
	}
	return o.ParagraphIndent
}

// GetParagraphIndentOk returns a tuple with the ParagraphIndent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetParagraphIndentOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.ParagraphIndent) {
		return nil, false
	}
	return o.ParagraphIndent, true
}

// HasParagraphIndent returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasParagraphIndent() bool {
	if o != nil && !IsNil(o.ParagraphIndent) {
		return true
	}

	return false
}

// SetParagraphIndent gets a reference to the given []VariableAlias and assigns it to the ParagraphIndent field.
func (o *IsLayerTraitBoundVariables) SetParagraphIndent(v []VariableAlias) {
	o.ParagraphIndent = v
}

// GetFills returns the Fills field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetFills() []VariableAlias {
	if o == nil || IsNil(o.Fills) {
		var ret []VariableAlias
		return ret
	}
	return o.Fills
}

// GetFillsOk returns a tuple with the Fills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetFillsOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.Fills) {
		return nil, false
	}
	return o.Fills, true
}

// HasFills returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasFills() bool {
	if o != nil && !IsNil(o.Fills) {
		return true
	}

	return false
}

// SetFills gets a reference to the given []VariableAlias and assigns it to the Fills field.
func (o *IsLayerTraitBoundVariables) SetFills(v []VariableAlias) {
	o.Fills = v
}

// GetStrokes returns the Strokes field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetStrokes() []VariableAlias {
	if o == nil || IsNil(o.Strokes) {
		var ret []VariableAlias
		return ret
	}
	return o.Strokes
}

// GetStrokesOk returns a tuple with the Strokes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetStrokesOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.Strokes) {
		return nil, false
	}
	return o.Strokes, true
}

// HasStrokes returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasStrokes() bool {
	if o != nil && !IsNil(o.Strokes) {
		return true
	}

	return false
}

// SetStrokes gets a reference to the given []VariableAlias and assigns it to the Strokes field.
func (o *IsLayerTraitBoundVariables) SetStrokes(v []VariableAlias) {
	o.Strokes = v
}

// GetComponentProperties returns the ComponentProperties field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetComponentProperties() map[string]VariableAlias {
	if o == nil || IsNil(o.ComponentProperties) {
		var ret map[string]VariableAlias
		return ret
	}
	return o.ComponentProperties
}

// GetComponentPropertiesOk returns a tuple with the ComponentProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetComponentPropertiesOk() (map[string]VariableAlias, bool) {
	if o == nil || IsNil(o.ComponentProperties) {
		return map[string]VariableAlias{}, false
	}
	return o.ComponentProperties, true
}

// HasComponentProperties returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasComponentProperties() bool {
	if o != nil && !IsNil(o.ComponentProperties) {
		return true
	}

	return false
}

// SetComponentProperties gets a reference to the given map[string]VariableAlias and assigns it to the ComponentProperties field.
func (o *IsLayerTraitBoundVariables) SetComponentProperties(v map[string]VariableAlias) {
	o.ComponentProperties = v
}

// GetTextRangeFills returns the TextRangeFills field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetTextRangeFills() []VariableAlias {
	if o == nil || IsNil(o.TextRangeFills) {
		var ret []VariableAlias
		return ret
	}
	return o.TextRangeFills
}

// GetTextRangeFillsOk returns a tuple with the TextRangeFills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetTextRangeFillsOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.TextRangeFills) {
		return nil, false
	}
	return o.TextRangeFills, true
}

// HasTextRangeFills returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasTextRangeFills() bool {
	if o != nil && !IsNil(o.TextRangeFills) {
		return true
	}

	return false
}

// SetTextRangeFills gets a reference to the given []VariableAlias and assigns it to the TextRangeFills field.
func (o *IsLayerTraitBoundVariables) SetTextRangeFills(v []VariableAlias) {
	o.TextRangeFills = v
}

// GetEffects returns the Effects field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetEffects() []VariableAlias {
	if o == nil || IsNil(o.Effects) {
		var ret []VariableAlias
		return ret
	}
	return o.Effects
}

// GetEffectsOk returns a tuple with the Effects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetEffectsOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.Effects) {
		return nil, false
	}
	return o.Effects, true
}

// HasEffects returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasEffects() bool {
	if o != nil && !IsNil(o.Effects) {
		return true
	}

	return false
}

// SetEffects gets a reference to the given []VariableAlias and assigns it to the Effects field.
func (o *IsLayerTraitBoundVariables) SetEffects(v []VariableAlias) {
	o.Effects = v
}

// GetLayoutGrids returns the LayoutGrids field value if set, zero value otherwise.
func (o *IsLayerTraitBoundVariables) GetLayoutGrids() []VariableAlias {
	if o == nil || IsNil(o.LayoutGrids) {
		var ret []VariableAlias
		return ret
	}
	return o.LayoutGrids
}

// GetLayoutGridsOk returns a tuple with the LayoutGrids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsLayerTraitBoundVariables) GetLayoutGridsOk() ([]VariableAlias, bool) {
	if o == nil || IsNil(o.LayoutGrids) {
		return nil, false
	}
	return o.LayoutGrids, true
}

// HasLayoutGrids returns a boolean if a field has been set.
func (o *IsLayerTraitBoundVariables) HasLayoutGrids() bool {
	if o != nil && !IsNil(o.LayoutGrids) {
		return true
	}

	return false
}

// SetLayoutGrids gets a reference to the given []VariableAlias and assigns it to the LayoutGrids field.
func (o *IsLayerTraitBoundVariables) SetLayoutGrids(v []VariableAlias) {
	o.LayoutGrids = v
}

func (o IsLayerTraitBoundVariables) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IsLayerTraitBoundVariables) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.IndividualStrokeWeights) {
		toSerialize["individualStrokeWeights"] = o.IndividualStrokeWeights
	}
	if !IsNil(o.Characters) {
		toSerialize["characters"] = o.Characters
	}
	if !IsNil(o.ItemSpacing) {
		toSerialize["itemSpacing"] = o.ItemSpacing
	}
	if !IsNil(o.PaddingLeft) {
		toSerialize["paddingLeft"] = o.PaddingLeft
	}
	if !IsNil(o.PaddingRight) {
		toSerialize["paddingRight"] = o.PaddingRight
	}
	if !IsNil(o.PaddingTop) {
		toSerialize["paddingTop"] = o.PaddingTop
	}
	if !IsNil(o.PaddingBottom) {
		toSerialize["paddingBottom"] = o.PaddingBottom
	}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	if !IsNil(o.TopLeftRadius) {
		toSerialize["topLeftRadius"] = o.TopLeftRadius
	}
	if !IsNil(o.TopRightRadius) {
		toSerialize["topRightRadius"] = o.TopRightRadius
	}
	if !IsNil(o.BottomLeftRadius) {
		toSerialize["bottomLeftRadius"] = o.BottomLeftRadius
	}
	if !IsNil(o.BottomRightRadius) {
		toSerialize["bottomRightRadius"] = o.BottomRightRadius
	}
	if !IsNil(o.MinWidth) {
		toSerialize["minWidth"] = o.MinWidth
	}
	if !IsNil(o.MaxWidth) {
		toSerialize["maxWidth"] = o.MaxWidth
	}
	if !IsNil(o.MinHeight) {
		toSerialize["minHeight"] = o.MinHeight
	}
	if !IsNil(o.MaxHeight) {
		toSerialize["maxHeight"] = o.MaxHeight
	}
	if !IsNil(o.CounterAxisSpacing) {
		toSerialize["counterAxisSpacing"] = o.CounterAxisSpacing
	}
	if !IsNil(o.Opacity) {
		toSerialize["opacity"] = o.Opacity
	}
	if !IsNil(o.FontFamily) {
		toSerialize["fontFamily"] = o.FontFamily
	}
	if !IsNil(o.FontSize) {
		toSerialize["fontSize"] = o.FontSize
	}
	if !IsNil(o.FontStyle) {
		toSerialize["fontStyle"] = o.FontStyle
	}
	if !IsNil(o.FontWeight) {
		toSerialize["fontWeight"] = o.FontWeight
	}
	if !IsNil(o.LetterSpacing) {
		toSerialize["letterSpacing"] = o.LetterSpacing
	}
	if !IsNil(o.LineHeight) {
		toSerialize["lineHeight"] = o.LineHeight
	}
	if !IsNil(o.ParagraphSpacing) {
		toSerialize["paragraphSpacing"] = o.ParagraphSpacing
	}
	if !IsNil(o.ParagraphIndent) {
		toSerialize["paragraphIndent"] = o.ParagraphIndent
	}
	if !IsNil(o.Fills) {
		toSerialize["fills"] = o.Fills
	}
	if !IsNil(o.Strokes) {
		toSerialize["strokes"] = o.Strokes
	}
	if !IsNil(o.ComponentProperties) {
		toSerialize["componentProperties"] = o.ComponentProperties
	}
	if !IsNil(o.TextRangeFills) {
		toSerialize["textRangeFills"] = o.TextRangeFills
	}
	if !IsNil(o.Effects) {
		toSerialize["effects"] = o.Effects
	}
	if !IsNil(o.LayoutGrids) {
		toSerialize["layoutGrids"] = o.LayoutGrids
	}
	return toSerialize, nil
}

type NullableIsLayerTraitBoundVariables struct {
	value *IsLayerTraitBoundVariables
	isSet bool
}

func (v NullableIsLayerTraitBoundVariables) Get() *IsLayerTraitBoundVariables {
	return v.value
}

func (v *NullableIsLayerTraitBoundVariables) Set(val *IsLayerTraitBoundVariables) {
	v.value = val
	v.isSet = true
}

func (v NullableIsLayerTraitBoundVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableIsLayerTraitBoundVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsLayerTraitBoundVariables(val *IsLayerTraitBoundVariables) *NullableIsLayerTraitBoundVariables {
	return &NullableIsLayerTraitBoundVariables{value: val, isSet: true}
}

func (v NullableIsLayerTraitBoundVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsLayerTraitBoundVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



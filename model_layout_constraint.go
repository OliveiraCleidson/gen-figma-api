/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LayoutConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LayoutConstraint{}

// LayoutConstraint Layout constraint relative to containing Frame
type LayoutConstraint struct {
	// Vertical constraint (relative to containing frame) as an enum:  - `TOP`: Node is laid out relative to top of the containing frame - `BOTTOM`: Node is laid out relative to bottom of the containing frame - `CENTER`: Node is vertically centered relative to containing frame - `TOP_BOTTOM`: Both top and bottom of node are constrained relative to containing frame (node stretches with frame) - `SCALE`: Node scales vertically with containing frame
	Vertical string `json:"vertical"`
	// Horizontal constraint (relative to containing frame) as an enum:  - `LEFT`: Node is laid out relative to left of the containing frame - `RIGHT`: Node is laid out relative to right of the containing frame - `CENTER`: Node is horizontally centered relative to containing frame - `LEFT_RIGHT`: Both left and right of node are constrained relative to containing frame (node stretches with frame) - `SCALE`: Node scales horizontally with containing frame
	Horizontal string `json:"horizontal"`
}

type _LayoutConstraint LayoutConstraint

// NewLayoutConstraint instantiates a new LayoutConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLayoutConstraint(vertical string, horizontal string) *LayoutConstraint {
	this := LayoutConstraint{}
	this.Vertical = vertical
	this.Horizontal = horizontal
	return &this
}

// NewLayoutConstraintWithDefaults instantiates a new LayoutConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLayoutConstraintWithDefaults() *LayoutConstraint {
	this := LayoutConstraint{}
	return &this
}

// GetVertical returns the Vertical field value
func (o *LayoutConstraint) GetVertical() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vertical
}

// GetVerticalOk returns a tuple with the Vertical field value
// and a boolean to check if the value has been set.
func (o *LayoutConstraint) GetVerticalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vertical, true
}

// SetVertical sets field value
func (o *LayoutConstraint) SetVertical(v string) {
	o.Vertical = v
}

// GetHorizontal returns the Horizontal field value
func (o *LayoutConstraint) GetHorizontal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Horizontal
}

// GetHorizontalOk returns a tuple with the Horizontal field value
// and a boolean to check if the value has been set.
func (o *LayoutConstraint) GetHorizontalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Horizontal, true
}

// SetHorizontal sets field value
func (o *LayoutConstraint) SetHorizontal(v string) {
	o.Horizontal = v
}

func (o LayoutConstraint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LayoutConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vertical"] = o.Vertical
	toSerialize["horizontal"] = o.Horizontal
	return toSerialize, nil
}

func (o *LayoutConstraint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vertical",
		"horizontal",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLayoutConstraint := _LayoutConstraint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLayoutConstraint)

	if err != nil {
		return err
	}

	*o = LayoutConstraint(varLayoutConstraint)

	return err
}

type NullableLayoutConstraint struct {
	value *LayoutConstraint
	isSet bool
}

func (v NullableLayoutConstraint) Get() *LayoutConstraint {
	return v.value
}

func (v *NullableLayoutConstraint) Set(val *LayoutConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableLayoutConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableLayoutConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayoutConstraint(val *LayoutConstraint) *NullableLayoutConstraint {
	return &NullableLayoutConstraint{value: val, isSet: true}
}

func (v NullableLayoutConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayoutConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImagePaint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImagePaint{}

// ImagePaint struct for ImagePaint
type ImagePaint struct {
	// Is the paint enabled?
	Visible *bool `json:"visible,omitempty"`
	// Overall opacity of paint (colors within the paint can also have opacity values which would blend with this)
	Opacity *float32 `json:"opacity,omitempty"`
	// How this node blends with nodes behind it in the scene
	BlendMode BlendMode `json:"blendMode"`
	// The string literal \"IMAGE\" representing the paint's type. Always check the `type` before reading other properties.
	Type string `json:"type"`
	// Image scaling mode.
	ScaleMode string `json:"scaleMode"`
	// A reference to an image embedded in this node. To download the image using this reference, use the `GET file images` endpoint to retrieve the mapping from image references to image URLs.
	ImageRef string `json:"imageRef"`
	// A transformation matrix is standard way in computer graphics to represent translation and rotation. These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1]. This is known as an affine transform and is enough to represent translation, rotation, and skew.  The identity transform is [[1, 0, 0], [0, 1, 0]].  A translation matrix will typically look like:  ``` [[1, 0, tx],   [0, 1, ty]] ```  and a rotation matrix will typically look like:  ``` [[cos(angle), sin(angle), 0],   [-sin(angle), cos(angle), 0]] ```  Another way to think about this transform is as three vectors:  - The x axis (t[0][0], t[1][0]) - The y axis (t[0][1], t[1][1]) - The translation offset (t[0][2], t[1][2])  The most common usage of the Transform matrix is the `relativeTransform property`. This particular usage of the matrix has a few additional restrictions. The translation offset can take on any value but we do enforce that the axis vectors are unit vectors (i.e. have length 1). The axes are not required to be at 90Â° angles to each other.
	ImageTransform [][]float32 `json:"imageTransform,omitempty"`
	// Amount image is scaled by in tiling, only present if scaleMode is `TILE`.
	ScalingFactor *float32 `json:"scalingFactor,omitempty"`
	// Defines what image filters have been applied to this paint, if any. If this property is not defined, no filters have been applied.
	Filters *ImageFilters `json:"filters,omitempty"`
	// Image rotation, in degrees.
	Rotation *float32 `json:"rotation,omitempty"`
	// A reference to an animated GIF embedded in this node. To download the image using this reference, use the `GET file images` endpoint to retrieve the mapping from image references to image URLs.
	GifRef *string `json:"gifRef,omitempty"`
}

type _ImagePaint ImagePaint

// NewImagePaint instantiates a new ImagePaint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImagePaint(blendMode BlendMode, type_ string, scaleMode string, imageRef string) *ImagePaint {
	this := ImagePaint{}
	var visible bool = true
	this.Visible = &visible
	var opacity float32 = 1
	this.Opacity = &opacity
	this.BlendMode = blendMode
	this.Type = type_
	this.ScaleMode = scaleMode
	this.ImageRef = imageRef
	var rotation float32 = 0
	this.Rotation = &rotation
	return &this
}

// NewImagePaintWithDefaults instantiates a new ImagePaint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImagePaintWithDefaults() *ImagePaint {
	this := ImagePaint{}
	var visible bool = true
	this.Visible = &visible
	var opacity float32 = 1
	this.Opacity = &opacity
	var rotation float32 = 0
	this.Rotation = &rotation
	return &this
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *ImagePaint) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *ImagePaint) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *ImagePaint) SetVisible(v bool) {
	o.Visible = &v
}

// GetOpacity returns the Opacity field value if set, zero value otherwise.
func (o *ImagePaint) GetOpacity() float32 {
	if o == nil || IsNil(o.Opacity) {
		var ret float32
		return ret
	}
	return *o.Opacity
}

// GetOpacityOk returns a tuple with the Opacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetOpacityOk() (*float32, bool) {
	if o == nil || IsNil(o.Opacity) {
		return nil, false
	}
	return o.Opacity, true
}

// HasOpacity returns a boolean if a field has been set.
func (o *ImagePaint) HasOpacity() bool {
	if o != nil && !IsNil(o.Opacity) {
		return true
	}

	return false
}

// SetOpacity gets a reference to the given float32 and assigns it to the Opacity field.
func (o *ImagePaint) SetOpacity(v float32) {
	o.Opacity = &v
}

// GetBlendMode returns the BlendMode field value
func (o *ImagePaint) GetBlendMode() BlendMode {
	if o == nil {
		var ret BlendMode
		return ret
	}

	return o.BlendMode
}

// GetBlendModeOk returns a tuple with the BlendMode field value
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetBlendModeOk() (*BlendMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlendMode, true
}

// SetBlendMode sets field value
func (o *ImagePaint) SetBlendMode(v BlendMode) {
	o.BlendMode = v
}

// GetType returns the Type field value
func (o *ImagePaint) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ImagePaint) SetType(v string) {
	o.Type = v
}

// GetScaleMode returns the ScaleMode field value
func (o *ImagePaint) GetScaleMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScaleMode
}

// GetScaleModeOk returns a tuple with the ScaleMode field value
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetScaleModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScaleMode, true
}

// SetScaleMode sets field value
func (o *ImagePaint) SetScaleMode(v string) {
	o.ScaleMode = v
}

// GetImageRef returns the ImageRef field value
func (o *ImagePaint) GetImageRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageRef
}

// GetImageRefOk returns a tuple with the ImageRef field value
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetImageRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageRef, true
}

// SetImageRef sets field value
func (o *ImagePaint) SetImageRef(v string) {
	o.ImageRef = v
}

// GetImageTransform returns the ImageTransform field value if set, zero value otherwise.
func (o *ImagePaint) GetImageTransform() [][]float32 {
	if o == nil || IsNil(o.ImageTransform) {
		var ret [][]float32
		return ret
	}
	return o.ImageTransform
}

// GetImageTransformOk returns a tuple with the ImageTransform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetImageTransformOk() ([][]float32, bool) {
	if o == nil || IsNil(o.ImageTransform) {
		return nil, false
	}
	return o.ImageTransform, true
}

// HasImageTransform returns a boolean if a field has been set.
func (o *ImagePaint) HasImageTransform() bool {
	if o != nil && !IsNil(o.ImageTransform) {
		return true
	}

	return false
}

// SetImageTransform gets a reference to the given [][]float32 and assigns it to the ImageTransform field.
func (o *ImagePaint) SetImageTransform(v [][]float32) {
	o.ImageTransform = v
}

// GetScalingFactor returns the ScalingFactor field value if set, zero value otherwise.
func (o *ImagePaint) GetScalingFactor() float32 {
	if o == nil || IsNil(o.ScalingFactor) {
		var ret float32
		return ret
	}
	return *o.ScalingFactor
}

// GetScalingFactorOk returns a tuple with the ScalingFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetScalingFactorOk() (*float32, bool) {
	if o == nil || IsNil(o.ScalingFactor) {
		return nil, false
	}
	return o.ScalingFactor, true
}

// HasScalingFactor returns a boolean if a field has been set.
func (o *ImagePaint) HasScalingFactor() bool {
	if o != nil && !IsNil(o.ScalingFactor) {
		return true
	}

	return false
}

// SetScalingFactor gets a reference to the given float32 and assigns it to the ScalingFactor field.
func (o *ImagePaint) SetScalingFactor(v float32) {
	o.ScalingFactor = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ImagePaint) GetFilters() ImageFilters {
	if o == nil || IsNil(o.Filters) {
		var ret ImageFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetFiltersOk() (*ImageFilters, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ImagePaint) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given ImageFilters and assigns it to the Filters field.
func (o *ImagePaint) SetFilters(v ImageFilters) {
	o.Filters = &v
}

// GetRotation returns the Rotation field value if set, zero value otherwise.
func (o *ImagePaint) GetRotation() float32 {
	if o == nil || IsNil(o.Rotation) {
		var ret float32
		return ret
	}
	return *o.Rotation
}

// GetRotationOk returns a tuple with the Rotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetRotationOk() (*float32, bool) {
	if o == nil || IsNil(o.Rotation) {
		return nil, false
	}
	return o.Rotation, true
}

// HasRotation returns a boolean if a field has been set.
func (o *ImagePaint) HasRotation() bool {
	if o != nil && !IsNil(o.Rotation) {
		return true
	}

	return false
}

// SetRotation gets a reference to the given float32 and assigns it to the Rotation field.
func (o *ImagePaint) SetRotation(v float32) {
	o.Rotation = &v
}

// GetGifRef returns the GifRef field value if set, zero value otherwise.
func (o *ImagePaint) GetGifRef() string {
	if o == nil || IsNil(o.GifRef) {
		var ret string
		return ret
	}
	return *o.GifRef
}

// GetGifRefOk returns a tuple with the GifRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImagePaint) GetGifRefOk() (*string, bool) {
	if o == nil || IsNil(o.GifRef) {
		return nil, false
	}
	return o.GifRef, true
}

// HasGifRef returns a boolean if a field has been set.
func (o *ImagePaint) HasGifRef() bool {
	if o != nil && !IsNil(o.GifRef) {
		return true
	}

	return false
}

// SetGifRef gets a reference to the given string and assigns it to the GifRef field.
func (o *ImagePaint) SetGifRef(v string) {
	o.GifRef = &v
}

func (o ImagePaint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImagePaint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	if !IsNil(o.Opacity) {
		toSerialize["opacity"] = o.Opacity
	}
	toSerialize["blendMode"] = o.BlendMode
	toSerialize["type"] = o.Type
	toSerialize["scaleMode"] = o.ScaleMode
	toSerialize["imageRef"] = o.ImageRef
	if !IsNil(o.ImageTransform) {
		toSerialize["imageTransform"] = o.ImageTransform
	}
	if !IsNil(o.ScalingFactor) {
		toSerialize["scalingFactor"] = o.ScalingFactor
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Rotation) {
		toSerialize["rotation"] = o.Rotation
	}
	if !IsNil(o.GifRef) {
		toSerialize["gifRef"] = o.GifRef
	}
	return toSerialize, nil
}

func (o *ImagePaint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blendMode",
		"type",
		"scaleMode",
		"imageRef",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImagePaint := _ImagePaint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImagePaint)

	if err != nil {
		return err
	}

	*o = ImagePaint(varImagePaint)

	return err
}

type NullableImagePaint struct {
	value *ImagePaint
	isSet bool
}

func (v NullableImagePaint) Get() *ImagePaint {
	return v.value
}

func (v *NullableImagePaint) Set(val *ImagePaint) {
	v.value = val
	v.isSet = true
}

func (v NullableImagePaint) IsSet() bool {
	return v.isSet
}

func (v *NullableImagePaint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImagePaint(val *ImagePaint) *NullableImagePaint {
	return &NullableImagePaint{value: val, isSet: true}
}

func (v NullableImagePaint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImagePaint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



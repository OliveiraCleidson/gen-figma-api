/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// VariableChange - struct for VariableChange
type VariableChange struct {
	VariableCreate *VariableCreate
	VariableDelete *VariableDelete
	VariableUpdate *VariableUpdate
}

// VariableCreateAsVariableChange is a convenience function that returns VariableCreate wrapped in VariableChange
func VariableCreateAsVariableChange(v *VariableCreate) VariableChange {
	return VariableChange{
		VariableCreate: v,
	}
}

// VariableDeleteAsVariableChange is a convenience function that returns VariableDelete wrapped in VariableChange
func VariableDeleteAsVariableChange(v *VariableDelete) VariableChange {
	return VariableChange{
		VariableDelete: v,
	}
}

// VariableUpdateAsVariableChange is a convenience function that returns VariableUpdate wrapped in VariableChange
func VariableUpdateAsVariableChange(v *VariableUpdate) VariableChange {
	return VariableChange{
		VariableUpdate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VariableChange) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VariableCreate
	err = newStrictDecoder(data).Decode(&dst.VariableCreate)
	if err == nil {
		jsonVariableCreate, _ := json.Marshal(dst.VariableCreate)
		if string(jsonVariableCreate) == "{}" { // empty struct
			dst.VariableCreate = nil
		} else {
			if err = validator.Validate(dst.VariableCreate); err != nil {
				dst.VariableCreate = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableCreate = nil
	}

	// try to unmarshal data into VariableDelete
	err = newStrictDecoder(data).Decode(&dst.VariableDelete)
	if err == nil {
		jsonVariableDelete, _ := json.Marshal(dst.VariableDelete)
		if string(jsonVariableDelete) == "{}" { // empty struct
			dst.VariableDelete = nil
		} else {
			if err = validator.Validate(dst.VariableDelete); err != nil {
				dst.VariableDelete = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableDelete = nil
	}

	// try to unmarshal data into VariableUpdate
	err = newStrictDecoder(data).Decode(&dst.VariableUpdate)
	if err == nil {
		jsonVariableUpdate, _ := json.Marshal(dst.VariableUpdate)
		if string(jsonVariableUpdate) == "{}" { // empty struct
			dst.VariableUpdate = nil
		} else {
			if err = validator.Validate(dst.VariableUpdate); err != nil {
				dst.VariableUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VariableCreate = nil
		dst.VariableDelete = nil
		dst.VariableUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VariableChange)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VariableChange)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VariableChange) MarshalJSON() ([]byte, error) {
	if src.VariableCreate != nil {
		return json.Marshal(&src.VariableCreate)
	}

	if src.VariableDelete != nil {
		return json.Marshal(&src.VariableDelete)
	}

	if src.VariableUpdate != nil {
		return json.Marshal(&src.VariableUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VariableChange) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VariableCreate != nil {
		return obj.VariableCreate
	}

	if obj.VariableDelete != nil {
		return obj.VariableDelete
	}

	if obj.VariableUpdate != nil {
		return obj.VariableUpdate
	}

	// all schemas are nil
	return nil
}

type NullableVariableChange struct {
	value *VariableChange
	isSet bool
}

func (v NullableVariableChange) Get() *VariableChange {
	return v.value
}

func (v *NullableVariableChange) Set(val *VariableChange) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableChange) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableChange(val *VariableChange) *NullableVariableChange {
	return &NullableVariableChange{value: val, isSet: true}
}

func (v NullableVariableChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



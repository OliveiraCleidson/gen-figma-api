/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublishedStyle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublishedStyle{}

// PublishedStyle A set of published properties that can be applied to nodes.
type PublishedStyle struct {
	// The unique identifier for the style
	Key string `json:"key"`
	// The unique identifier of the Figma file that contains the style.
	FileKey string `json:"file_key"`
	// ID of the style node within the figma file
	NodeId string `json:"node_id"`
	StyleType StyleType `json:"style_type"`
	// A URL to a thumbnail image of the style.
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`
	// The name of the style.
	Name string `json:"name"`
	// The description of the style as entered by the publisher.
	Description string `json:"description"`
	// The UTC ISO 8601 time when the style was created.
	CreatedAt time.Time `json:"created_at"`
	// The UTC ISO 8601 time when the style was last updated.
	UpdatedAt time.Time `json:"updated_at"`
	// The user who last updated the style.
	User User `json:"user"`
	// A user specified order number by which the style can be sorted.
	SortPosition string `json:"sort_position"`
}

type _PublishedStyle PublishedStyle

// NewPublishedStyle instantiates a new PublishedStyle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishedStyle(key string, fileKey string, nodeId string, styleType StyleType, name string, description string, createdAt time.Time, updatedAt time.Time, user User, sortPosition string) *PublishedStyle {
	this := PublishedStyle{}
	this.Key = key
	this.FileKey = fileKey
	this.NodeId = nodeId
	this.StyleType = styleType
	this.Name = name
	this.Description = description
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.User = user
	this.SortPosition = sortPosition
	return &this
}

// NewPublishedStyleWithDefaults instantiates a new PublishedStyle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishedStyleWithDefaults() *PublishedStyle {
	this := PublishedStyle{}
	return &this
}

// GetKey returns the Key field value
func (o *PublishedStyle) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *PublishedStyle) SetKey(v string) {
	o.Key = v
}

// GetFileKey returns the FileKey field value
func (o *PublishedStyle) GetFileKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileKey
}

// GetFileKeyOk returns a tuple with the FileKey field value
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetFileKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileKey, true
}

// SetFileKey sets field value
func (o *PublishedStyle) SetFileKey(v string) {
	o.FileKey = v
}

// GetNodeId returns the NodeId field value
func (o *PublishedStyle) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *PublishedStyle) SetNodeId(v string) {
	o.NodeId = v
}

// GetStyleType returns the StyleType field value
func (o *PublishedStyle) GetStyleType() StyleType {
	if o == nil {
		var ret StyleType
		return ret
	}

	return o.StyleType
}

// GetStyleTypeOk returns a tuple with the StyleType field value
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetStyleTypeOk() (*StyleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StyleType, true
}

// SetStyleType sets field value
func (o *PublishedStyle) SetStyleType(v StyleType) {
	o.StyleType = v
}

// GetThumbnailUrl returns the ThumbnailUrl field value if set, zero value otherwise.
func (o *PublishedStyle) GetThumbnailUrl() string {
	if o == nil || IsNil(o.ThumbnailUrl) {
		var ret string
		return ret
	}
	return *o.ThumbnailUrl
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetThumbnailUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ThumbnailUrl) {
		return nil, false
	}
	return o.ThumbnailUrl, true
}

// HasThumbnailUrl returns a boolean if a field has been set.
func (o *PublishedStyle) HasThumbnailUrl() bool {
	if o != nil && !IsNil(o.ThumbnailUrl) {
		return true
	}

	return false
}

// SetThumbnailUrl gets a reference to the given string and assigns it to the ThumbnailUrl field.
func (o *PublishedStyle) SetThumbnailUrl(v string) {
	o.ThumbnailUrl = &v
}

// GetName returns the Name field value
func (o *PublishedStyle) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublishedStyle) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *PublishedStyle) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PublishedStyle) SetDescription(v string) {
	o.Description = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublishedStyle) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublishedStyle) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PublishedStyle) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PublishedStyle) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUser returns the User field value
func (o *PublishedStyle) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *PublishedStyle) SetUser(v User) {
	o.User = v
}

// GetSortPosition returns the SortPosition field value
func (o *PublishedStyle) GetSortPosition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SortPosition
}

// GetSortPositionOk returns a tuple with the SortPosition field value
// and a boolean to check if the value has been set.
func (o *PublishedStyle) GetSortPositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortPosition, true
}

// SetSortPosition sets field value
func (o *PublishedStyle) SetSortPosition(v string) {
	o.SortPosition = v
}

func (o PublishedStyle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublishedStyle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["file_key"] = o.FileKey
	toSerialize["node_id"] = o.NodeId
	toSerialize["style_type"] = o.StyleType
	if !IsNil(o.ThumbnailUrl) {
		toSerialize["thumbnail_url"] = o.ThumbnailUrl
	}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["user"] = o.User
	toSerialize["sort_position"] = o.SortPosition
	return toSerialize, nil
}

func (o *PublishedStyle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"file_key",
		"node_id",
		"style_type",
		"name",
		"description",
		"created_at",
		"updated_at",
		"user",
		"sort_position",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublishedStyle := _PublishedStyle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublishedStyle)

	if err != nil {
		return err
	}

	*o = PublishedStyle(varPublishedStyle)

	return err
}

type NullablePublishedStyle struct {
	value *PublishedStyle
	isSet bool
}

func (v NullablePublishedStyle) Get() *PublishedStyle {
	return v.value
}

func (v *NullablePublishedStyle) Set(val *PublishedStyle) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishedStyle) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishedStyle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishedStyle(val *PublishedStyle) *NullablePublishedStyle {
	return &NullablePublishedStyle{value: val, isSet: true}
}

func (v NullablePublishedStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishedStyle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



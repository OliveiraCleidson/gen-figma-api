/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VariableUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableUpdate{}

// VariableUpdate An object that contains details about updating a `Variable`.
type VariableUpdate struct {
	// The action to perform for the variable.
	Action string `json:"action"`
	// The id of the variable to update.
	Id string `json:"id"`
	// The name of this variable.
	Name *string `json:"name,omitempty"`
	// The description of this variable.
	Description *string `json:"description,omitempty"`
	// Whether this variable is hidden when publishing the current file as a library.
	HiddenFromPublishing *bool `json:"hiddenFromPublishing,omitempty"`
	// An array of scopes in the UI where this variable is shown. Setting this property will show/hide this variable in the variable picker UI for different fields.
	Scopes []VariableScope `json:"scopes,omitempty"`
	CodeSyntax *VariableCodeSyntax `json:"codeSyntax,omitempty"`
}

type _VariableUpdate VariableUpdate

// NewVariableUpdate instantiates a new VariableUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableUpdate(action string, id string) *VariableUpdate {
	this := VariableUpdate{}
	this.Action = action
	this.Id = id
	var hiddenFromPublishing bool = false
	this.HiddenFromPublishing = &hiddenFromPublishing
	return &this
}

// NewVariableUpdateWithDefaults instantiates a new VariableUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableUpdateWithDefaults() *VariableUpdate {
	this := VariableUpdate{}
	var hiddenFromPublishing bool = false
	this.HiddenFromPublishing = &hiddenFromPublishing
	return &this
}

// GetAction returns the Action field value
func (o *VariableUpdate) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *VariableUpdate) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *VariableUpdate) SetAction(v string) {
	o.Action = v
}

// GetId returns the Id field value
func (o *VariableUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VariableUpdate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VariableUpdate) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VariableUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VariableUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VariableUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VariableUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VariableUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VariableUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetHiddenFromPublishing returns the HiddenFromPublishing field value if set, zero value otherwise.
func (o *VariableUpdate) GetHiddenFromPublishing() bool {
	if o == nil || IsNil(o.HiddenFromPublishing) {
		var ret bool
		return ret
	}
	return *o.HiddenFromPublishing
}

// GetHiddenFromPublishingOk returns a tuple with the HiddenFromPublishing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableUpdate) GetHiddenFromPublishingOk() (*bool, bool) {
	if o == nil || IsNil(o.HiddenFromPublishing) {
		return nil, false
	}
	return o.HiddenFromPublishing, true
}

// HasHiddenFromPublishing returns a boolean if a field has been set.
func (o *VariableUpdate) HasHiddenFromPublishing() bool {
	if o != nil && !IsNil(o.HiddenFromPublishing) {
		return true
	}

	return false
}

// SetHiddenFromPublishing gets a reference to the given bool and assigns it to the HiddenFromPublishing field.
func (o *VariableUpdate) SetHiddenFromPublishing(v bool) {
	o.HiddenFromPublishing = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *VariableUpdate) GetScopes() []VariableScope {
	if o == nil || IsNil(o.Scopes) {
		var ret []VariableScope
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableUpdate) GetScopesOk() ([]VariableScope, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *VariableUpdate) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []VariableScope and assigns it to the Scopes field.
func (o *VariableUpdate) SetScopes(v []VariableScope) {
	o.Scopes = v
}

// GetCodeSyntax returns the CodeSyntax field value if set, zero value otherwise.
func (o *VariableUpdate) GetCodeSyntax() VariableCodeSyntax {
	if o == nil || IsNil(o.CodeSyntax) {
		var ret VariableCodeSyntax
		return ret
	}
	return *o.CodeSyntax
}

// GetCodeSyntaxOk returns a tuple with the CodeSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableUpdate) GetCodeSyntaxOk() (*VariableCodeSyntax, bool) {
	if o == nil || IsNil(o.CodeSyntax) {
		return nil, false
	}
	return o.CodeSyntax, true
}

// HasCodeSyntax returns a boolean if a field has been set.
func (o *VariableUpdate) HasCodeSyntax() bool {
	if o != nil && !IsNil(o.CodeSyntax) {
		return true
	}

	return false
}

// SetCodeSyntax gets a reference to the given VariableCodeSyntax and assigns it to the CodeSyntax field.
func (o *VariableUpdate) SetCodeSyntax(v VariableCodeSyntax) {
	o.CodeSyntax = &v
}

func (o VariableUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HiddenFromPublishing) {
		toSerialize["hiddenFromPublishing"] = o.HiddenFromPublishing
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.CodeSyntax) {
		toSerialize["codeSyntax"] = o.CodeSyntax
	}
	return toSerialize, nil
}

func (o *VariableUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVariableUpdate := _VariableUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVariableUpdate)

	if err != nil {
		return err
	}

	*o = VariableUpdate(varVariableUpdate)

	return err
}

type NullableVariableUpdate struct {
	value *VariableUpdate
	isSet bool
}

func (v NullableVariableUpdate) Get() *VariableUpdate {
	return v.value
}

func (v *NullableVariableUpdate) Set(val *VariableUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableUpdate(val *VariableUpdate) *NullableVariableUpdate {
	return &NullableVariableUpdate{value: val, isSet: true}
}

func (v NullableVariableUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



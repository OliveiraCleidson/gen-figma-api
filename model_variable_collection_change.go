/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// VariableCollectionChange - struct for VariableCollectionChange
type VariableCollectionChange struct {
	VariableCollectionCreate *VariableCollectionCreate
	VariableCollectionDelete *VariableCollectionDelete
	VariableCollectionUpdate *VariableCollectionUpdate
}

// VariableCollectionCreateAsVariableCollectionChange is a convenience function that returns VariableCollectionCreate wrapped in VariableCollectionChange
func VariableCollectionCreateAsVariableCollectionChange(v *VariableCollectionCreate) VariableCollectionChange {
	return VariableCollectionChange{
		VariableCollectionCreate: v,
	}
}

// VariableCollectionDeleteAsVariableCollectionChange is a convenience function that returns VariableCollectionDelete wrapped in VariableCollectionChange
func VariableCollectionDeleteAsVariableCollectionChange(v *VariableCollectionDelete) VariableCollectionChange {
	return VariableCollectionChange{
		VariableCollectionDelete: v,
	}
}

// VariableCollectionUpdateAsVariableCollectionChange is a convenience function that returns VariableCollectionUpdate wrapped in VariableCollectionChange
func VariableCollectionUpdateAsVariableCollectionChange(v *VariableCollectionUpdate) VariableCollectionChange {
	return VariableCollectionChange{
		VariableCollectionUpdate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VariableCollectionChange) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VariableCollectionCreate
	err = newStrictDecoder(data).Decode(&dst.VariableCollectionCreate)
	if err == nil {
		jsonVariableCollectionCreate, _ := json.Marshal(dst.VariableCollectionCreate)
		if string(jsonVariableCollectionCreate) == "{}" { // empty struct
			dst.VariableCollectionCreate = nil
		} else {
			if err = validator.Validate(dst.VariableCollectionCreate); err != nil {
				dst.VariableCollectionCreate = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableCollectionCreate = nil
	}

	// try to unmarshal data into VariableCollectionDelete
	err = newStrictDecoder(data).Decode(&dst.VariableCollectionDelete)
	if err == nil {
		jsonVariableCollectionDelete, _ := json.Marshal(dst.VariableCollectionDelete)
		if string(jsonVariableCollectionDelete) == "{}" { // empty struct
			dst.VariableCollectionDelete = nil
		} else {
			if err = validator.Validate(dst.VariableCollectionDelete); err != nil {
				dst.VariableCollectionDelete = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableCollectionDelete = nil
	}

	// try to unmarshal data into VariableCollectionUpdate
	err = newStrictDecoder(data).Decode(&dst.VariableCollectionUpdate)
	if err == nil {
		jsonVariableCollectionUpdate, _ := json.Marshal(dst.VariableCollectionUpdate)
		if string(jsonVariableCollectionUpdate) == "{}" { // empty struct
			dst.VariableCollectionUpdate = nil
		} else {
			if err = validator.Validate(dst.VariableCollectionUpdate); err != nil {
				dst.VariableCollectionUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.VariableCollectionUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VariableCollectionCreate = nil
		dst.VariableCollectionDelete = nil
		dst.VariableCollectionUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VariableCollectionChange)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VariableCollectionChange)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VariableCollectionChange) MarshalJSON() ([]byte, error) {
	if src.VariableCollectionCreate != nil {
		return json.Marshal(&src.VariableCollectionCreate)
	}

	if src.VariableCollectionDelete != nil {
		return json.Marshal(&src.VariableCollectionDelete)
	}

	if src.VariableCollectionUpdate != nil {
		return json.Marshal(&src.VariableCollectionUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VariableCollectionChange) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VariableCollectionCreate != nil {
		return obj.VariableCollectionCreate
	}

	if obj.VariableCollectionDelete != nil {
		return obj.VariableCollectionDelete
	}

	if obj.VariableCollectionUpdate != nil {
		return obj.VariableCollectionUpdate
	}

	// all schemas are nil
	return nil
}

type NullableVariableCollectionChange struct {
	value *VariableCollectionChange
	isSet bool
}

func (v NullableVariableCollectionChange) Get() *VariableCollectionChange {
	return v.value
}

func (v *NullableVariableCollectionChange) Set(val *VariableCollectionChange) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableCollectionChange) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableCollectionChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableCollectionChange(val *VariableCollectionChange) *NullableVariableCollectionChange {
	return &NullableVariableCollectionChange{value: val, isSet: true}
}

func (v NullableVariableCollectionChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableCollectionChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



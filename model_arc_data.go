/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArcData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArcData{}

// ArcData Information about the arc properties of an ellipse. 0Â° is the x axis and increasing angles rotate clockwise.
type ArcData struct {
	// Start of the sweep in radians.
	StartingAngle float32 `json:"startingAngle"`
	// End of the sweep in radians.
	EndingAngle float32 `json:"endingAngle"`
	// Inner radius value between 0 and 1
	InnerRadius float32 `json:"innerRadius"`
}

type _ArcData ArcData

// NewArcData instantiates a new ArcData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArcData(startingAngle float32, endingAngle float32, innerRadius float32) *ArcData {
	this := ArcData{}
	this.StartingAngle = startingAngle
	this.EndingAngle = endingAngle
	this.InnerRadius = innerRadius
	return &this
}

// NewArcDataWithDefaults instantiates a new ArcData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArcDataWithDefaults() *ArcData {
	this := ArcData{}
	var startingAngle float32 = 0
	this.StartingAngle = startingAngle
	var endingAngle float32 = 0
	this.EndingAngle = endingAngle
	var innerRadius float32 = 0
	this.InnerRadius = innerRadius
	return &this
}

// GetStartingAngle returns the StartingAngle field value
func (o *ArcData) GetStartingAngle() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StartingAngle
}

// GetStartingAngleOk returns a tuple with the StartingAngle field value
// and a boolean to check if the value has been set.
func (o *ArcData) GetStartingAngleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartingAngle, true
}

// SetStartingAngle sets field value
func (o *ArcData) SetStartingAngle(v float32) {
	o.StartingAngle = v
}

// GetEndingAngle returns the EndingAngle field value
func (o *ArcData) GetEndingAngle() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.EndingAngle
}

// GetEndingAngleOk returns a tuple with the EndingAngle field value
// and a boolean to check if the value has been set.
func (o *ArcData) GetEndingAngleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndingAngle, true
}

// SetEndingAngle sets field value
func (o *ArcData) SetEndingAngle(v float32) {
	o.EndingAngle = v
}

// GetInnerRadius returns the InnerRadius field value
func (o *ArcData) GetInnerRadius() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InnerRadius
}

// GetInnerRadiusOk returns a tuple with the InnerRadius field value
// and a boolean to check if the value has been set.
func (o *ArcData) GetInnerRadiusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InnerRadius, true
}

// SetInnerRadius sets field value
func (o *ArcData) SetInnerRadius(v float32) {
	o.InnerRadius = v
}

func (o ArcData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArcData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startingAngle"] = o.StartingAngle
	toSerialize["endingAngle"] = o.EndingAngle
	toSerialize["innerRadius"] = o.InnerRadius
	return toSerialize, nil
}

func (o *ArcData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startingAngle",
		"endingAngle",
		"innerRadius",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArcData := _ArcData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArcData)

	if err != nil {
		return err
	}

	*o = ArcData(varArcData)

	return err
}

type NullableArcData struct {
	value *ArcData
	isSet bool
}

func (v NullableArcData) Get() *ArcData {
	return v.value
}

func (v *NullableArcData) Set(val *ArcData) {
	v.value = val
	v.isSet = true
}

func (v NullableArcData) IsSet() bool {
	return v.isSet
}

func (v *NullableArcData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArcData(val *ArcData) *NullableArcData {
	return &NullableArcData{value: val, isSet: true}
}

func (v NullableArcData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArcData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TypeStyle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypeStyle{}

// TypeStyle Metadata for character formatting.
type TypeStyle struct {
	// Font family of text (standard name).
	FontFamily *string `json:"fontFamily,omitempty"`
	// PostScript font name.
	FontPostScriptName NullableString `json:"fontPostScriptName,omitempty"`
	// Space between paragraphs in px, 0 if not present.
	ParagraphSpacing *float32 `json:"paragraphSpacing,omitempty"`
	// Paragraph indentation in px, 0 if not present.
	ParagraphIndent *float32 `json:"paragraphIndent,omitempty"`
	// Space between list items in px, 0 if not present.
	ListSpacing *float32 `json:"listSpacing,omitempty"`
	// Whether or not text is italicized.
	Italic *bool `json:"italic,omitempty"`
	// Numeric font weight.
	FontWeight *float32 `json:"fontWeight,omitempty"`
	// Font size in px.
	FontSize *float32 `json:"fontSize,omitempty"`
	// Text casing applied to the node, default is the original casing.
	TextCase *string `json:"textCase,omitempty"`
	// Text decoration applied to the node, default is none.
	TextDecoration *string `json:"textDecoration,omitempty"`
	// Dimensions along which text will auto resize, default is that the text does not auto-resize. TRUNCATE means that the text will be shortened and trailing text will be replaced with \"â€¦\" if the text contents is larger than the bounds. `TRUNCATE` as a return value is deprecated and will be removed in a future version. Read from `textTruncation` instead.
	TextAutoResize *string `json:"textAutoResize,omitempty"`
	// Whether this text node will truncate with an ellipsis when the text contents is larger than the text node.
	TextTruncation *string `json:"textTruncation,omitempty"`
	// When `textTruncation: \"ENDING\"` is set, `maxLines` determines how many lines a text node can grow to before it truncates.
	MaxLines *float32 `json:"maxLines,omitempty"`
	// Horizontal text alignment as string enum.
	TextAlignHorizontal *string `json:"textAlignHorizontal,omitempty"`
	// Vertical text alignment as string enum.
	TextAlignVertical *string `json:"textAlignVertical,omitempty"`
	// Space between characters in px.
	LetterSpacing *float32 `json:"letterSpacing,omitempty"`
	// An array of fill paints applied to the characters.
	Fills []Paint `json:"fills,omitempty"`
	// Link to a URL or frame.
	Hyperlink *Hyperlink `json:"hyperlink,omitempty"`
	// A map of OpenType feature flags to 1 or 0, 1 if it is enabled and 0 if it is disabled. Note that some flags aren't reflected here. For example, SMCP (small caps) is still represented by the `textCase` field.
	OpentypeFlags map[string]float32 `json:"opentypeFlags,omitempty"`
	// Line height in px.
	LineHeightPx *float32 `json:"lineHeightPx,omitempty"`
	// Line height as a percentage of normal line height. This is deprecated; in a future version of the API only lineHeightPx and lineHeightPercentFontSize will be returned.
	LineHeightPercent *float32 `json:"lineHeightPercent,omitempty"`
	// Line height as a percentage of the font size. Only returned when `lineHeightPercent` (deprecated) is not 100.
	LineHeightPercentFontSize *float32 `json:"lineHeightPercentFontSize,omitempty"`
	// The unit of the line height value specified by the user.
	LineHeightUnit *string `json:"lineHeightUnit,omitempty"`
	BoundVariables *TypeStyleBoundVariables `json:"boundVariables,omitempty"`
	//  Whether or not this style has overrides over a text style. The possible fields to override are semanticWeight, semanticItalic, hyperlink, and textDecoration. If this is true, then those fields are overrides if present.
	IsOverrideOverTextStyle *bool `json:"isOverrideOverTextStyle,omitempty"`
	// Indicates how the font weight was overridden when there is a text style override.
	SemanticWeight *string `json:"semanticWeight,omitempty"`
	// Indicates how the font style was overridden when there is a text style override.
	SemanticItalic *string `json:"semanticItalic,omitempty"`
}

// NewTypeStyle instantiates a new TypeStyle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypeStyle() *TypeStyle {
	this := TypeStyle{}
	var paragraphSpacing float32 = 0
	this.ParagraphSpacing = &paragraphSpacing
	var paragraphIndent float32 = 0
	this.ParagraphIndent = &paragraphIndent
	var listSpacing float32 = 0
	this.ListSpacing = &listSpacing
	var italic bool = false
	this.Italic = &italic
	var textDecoration string = "NONE"
	this.TextDecoration = &textDecoration
	var textAutoResize string = "NONE"
	this.TextAutoResize = &textAutoResize
	var textTruncation string = "DISABLED"
	this.TextTruncation = &textTruncation
	var lineHeightPercent float32 = 100
	this.LineHeightPercent = &lineHeightPercent
	return &this
}

// NewTypeStyleWithDefaults instantiates a new TypeStyle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypeStyleWithDefaults() *TypeStyle {
	this := TypeStyle{}
	var paragraphSpacing float32 = 0
	this.ParagraphSpacing = &paragraphSpacing
	var paragraphIndent float32 = 0
	this.ParagraphIndent = &paragraphIndent
	var listSpacing float32 = 0
	this.ListSpacing = &listSpacing
	var italic bool = false
	this.Italic = &italic
	var textDecoration string = "NONE"
	this.TextDecoration = &textDecoration
	var textAutoResize string = "NONE"
	this.TextAutoResize = &textAutoResize
	var textTruncation string = "DISABLED"
	this.TextTruncation = &textTruncation
	var lineHeightPercent float32 = 100
	this.LineHeightPercent = &lineHeightPercent
	return &this
}

// GetFontFamily returns the FontFamily field value if set, zero value otherwise.
func (o *TypeStyle) GetFontFamily() string {
	if o == nil || IsNil(o.FontFamily) {
		var ret string
		return ret
	}
	return *o.FontFamily
}

// GetFontFamilyOk returns a tuple with the FontFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetFontFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.FontFamily) {
		return nil, false
	}
	return o.FontFamily, true
}

// HasFontFamily returns a boolean if a field has been set.
func (o *TypeStyle) HasFontFamily() bool {
	if o != nil && !IsNil(o.FontFamily) {
		return true
	}

	return false
}

// SetFontFamily gets a reference to the given string and assigns it to the FontFamily field.
func (o *TypeStyle) SetFontFamily(v string) {
	o.FontFamily = &v
}

// GetFontPostScriptName returns the FontPostScriptName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TypeStyle) GetFontPostScriptName() string {
	if o == nil || IsNil(o.FontPostScriptName.Get()) {
		var ret string
		return ret
	}
	return *o.FontPostScriptName.Get()
}

// GetFontPostScriptNameOk returns a tuple with the FontPostScriptName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TypeStyle) GetFontPostScriptNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FontPostScriptName.Get(), o.FontPostScriptName.IsSet()
}

// HasFontPostScriptName returns a boolean if a field has been set.
func (o *TypeStyle) HasFontPostScriptName() bool {
	if o != nil && o.FontPostScriptName.IsSet() {
		return true
	}

	return false
}

// SetFontPostScriptName gets a reference to the given NullableString and assigns it to the FontPostScriptName field.
func (o *TypeStyle) SetFontPostScriptName(v string) {
	o.FontPostScriptName.Set(&v)
}
// SetFontPostScriptNameNil sets the value for FontPostScriptName to be an explicit nil
func (o *TypeStyle) SetFontPostScriptNameNil() {
	o.FontPostScriptName.Set(nil)
}

// UnsetFontPostScriptName ensures that no value is present for FontPostScriptName, not even an explicit nil
func (o *TypeStyle) UnsetFontPostScriptName() {
	o.FontPostScriptName.Unset()
}

// GetParagraphSpacing returns the ParagraphSpacing field value if set, zero value otherwise.
func (o *TypeStyle) GetParagraphSpacing() float32 {
	if o == nil || IsNil(o.ParagraphSpacing) {
		var ret float32
		return ret
	}
	return *o.ParagraphSpacing
}

// GetParagraphSpacingOk returns a tuple with the ParagraphSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetParagraphSpacingOk() (*float32, bool) {
	if o == nil || IsNil(o.ParagraphSpacing) {
		return nil, false
	}
	return o.ParagraphSpacing, true
}

// HasParagraphSpacing returns a boolean if a field has been set.
func (o *TypeStyle) HasParagraphSpacing() bool {
	if o != nil && !IsNil(o.ParagraphSpacing) {
		return true
	}

	return false
}

// SetParagraphSpacing gets a reference to the given float32 and assigns it to the ParagraphSpacing field.
func (o *TypeStyle) SetParagraphSpacing(v float32) {
	o.ParagraphSpacing = &v
}

// GetParagraphIndent returns the ParagraphIndent field value if set, zero value otherwise.
func (o *TypeStyle) GetParagraphIndent() float32 {
	if o == nil || IsNil(o.ParagraphIndent) {
		var ret float32
		return ret
	}
	return *o.ParagraphIndent
}

// GetParagraphIndentOk returns a tuple with the ParagraphIndent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetParagraphIndentOk() (*float32, bool) {
	if o == nil || IsNil(o.ParagraphIndent) {
		return nil, false
	}
	return o.ParagraphIndent, true
}

// HasParagraphIndent returns a boolean if a field has been set.
func (o *TypeStyle) HasParagraphIndent() bool {
	if o != nil && !IsNil(o.ParagraphIndent) {
		return true
	}

	return false
}

// SetParagraphIndent gets a reference to the given float32 and assigns it to the ParagraphIndent field.
func (o *TypeStyle) SetParagraphIndent(v float32) {
	o.ParagraphIndent = &v
}

// GetListSpacing returns the ListSpacing field value if set, zero value otherwise.
func (o *TypeStyle) GetListSpacing() float32 {
	if o == nil || IsNil(o.ListSpacing) {
		var ret float32
		return ret
	}
	return *o.ListSpacing
}

// GetListSpacingOk returns a tuple with the ListSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetListSpacingOk() (*float32, bool) {
	if o == nil || IsNil(o.ListSpacing) {
		return nil, false
	}
	return o.ListSpacing, true
}

// HasListSpacing returns a boolean if a field has been set.
func (o *TypeStyle) HasListSpacing() bool {
	if o != nil && !IsNil(o.ListSpacing) {
		return true
	}

	return false
}

// SetListSpacing gets a reference to the given float32 and assigns it to the ListSpacing field.
func (o *TypeStyle) SetListSpacing(v float32) {
	o.ListSpacing = &v
}

// GetItalic returns the Italic field value if set, zero value otherwise.
func (o *TypeStyle) GetItalic() bool {
	if o == nil || IsNil(o.Italic) {
		var ret bool
		return ret
	}
	return *o.Italic
}

// GetItalicOk returns a tuple with the Italic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetItalicOk() (*bool, bool) {
	if o == nil || IsNil(o.Italic) {
		return nil, false
	}
	return o.Italic, true
}

// HasItalic returns a boolean if a field has been set.
func (o *TypeStyle) HasItalic() bool {
	if o != nil && !IsNil(o.Italic) {
		return true
	}

	return false
}

// SetItalic gets a reference to the given bool and assigns it to the Italic field.
func (o *TypeStyle) SetItalic(v bool) {
	o.Italic = &v
}

// GetFontWeight returns the FontWeight field value if set, zero value otherwise.
func (o *TypeStyle) GetFontWeight() float32 {
	if o == nil || IsNil(o.FontWeight) {
		var ret float32
		return ret
	}
	return *o.FontWeight
}

// GetFontWeightOk returns a tuple with the FontWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetFontWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.FontWeight) {
		return nil, false
	}
	return o.FontWeight, true
}

// HasFontWeight returns a boolean if a field has been set.
func (o *TypeStyle) HasFontWeight() bool {
	if o != nil && !IsNil(o.FontWeight) {
		return true
	}

	return false
}

// SetFontWeight gets a reference to the given float32 and assigns it to the FontWeight field.
func (o *TypeStyle) SetFontWeight(v float32) {
	o.FontWeight = &v
}

// GetFontSize returns the FontSize field value if set, zero value otherwise.
func (o *TypeStyle) GetFontSize() float32 {
	if o == nil || IsNil(o.FontSize) {
		var ret float32
		return ret
	}
	return *o.FontSize
}

// GetFontSizeOk returns a tuple with the FontSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetFontSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.FontSize) {
		return nil, false
	}
	return o.FontSize, true
}

// HasFontSize returns a boolean if a field has been set.
func (o *TypeStyle) HasFontSize() bool {
	if o != nil && !IsNil(o.FontSize) {
		return true
	}

	return false
}

// SetFontSize gets a reference to the given float32 and assigns it to the FontSize field.
func (o *TypeStyle) SetFontSize(v float32) {
	o.FontSize = &v
}

// GetTextCase returns the TextCase field value if set, zero value otherwise.
func (o *TypeStyle) GetTextCase() string {
	if o == nil || IsNil(o.TextCase) {
		var ret string
		return ret
	}
	return *o.TextCase
}

// GetTextCaseOk returns a tuple with the TextCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetTextCaseOk() (*string, bool) {
	if o == nil || IsNil(o.TextCase) {
		return nil, false
	}
	return o.TextCase, true
}

// HasTextCase returns a boolean if a field has been set.
func (o *TypeStyle) HasTextCase() bool {
	if o != nil && !IsNil(o.TextCase) {
		return true
	}

	return false
}

// SetTextCase gets a reference to the given string and assigns it to the TextCase field.
func (o *TypeStyle) SetTextCase(v string) {
	o.TextCase = &v
}

// GetTextDecoration returns the TextDecoration field value if set, zero value otherwise.
func (o *TypeStyle) GetTextDecoration() string {
	if o == nil || IsNil(o.TextDecoration) {
		var ret string
		return ret
	}
	return *o.TextDecoration
}

// GetTextDecorationOk returns a tuple with the TextDecoration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetTextDecorationOk() (*string, bool) {
	if o == nil || IsNil(o.TextDecoration) {
		return nil, false
	}
	return o.TextDecoration, true
}

// HasTextDecoration returns a boolean if a field has been set.
func (o *TypeStyle) HasTextDecoration() bool {
	if o != nil && !IsNil(o.TextDecoration) {
		return true
	}

	return false
}

// SetTextDecoration gets a reference to the given string and assigns it to the TextDecoration field.
func (o *TypeStyle) SetTextDecoration(v string) {
	o.TextDecoration = &v
}

// GetTextAutoResize returns the TextAutoResize field value if set, zero value otherwise.
func (o *TypeStyle) GetTextAutoResize() string {
	if o == nil || IsNil(o.TextAutoResize) {
		var ret string
		return ret
	}
	return *o.TextAutoResize
}

// GetTextAutoResizeOk returns a tuple with the TextAutoResize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetTextAutoResizeOk() (*string, bool) {
	if o == nil || IsNil(o.TextAutoResize) {
		return nil, false
	}
	return o.TextAutoResize, true
}

// HasTextAutoResize returns a boolean if a field has been set.
func (o *TypeStyle) HasTextAutoResize() bool {
	if o != nil && !IsNil(o.TextAutoResize) {
		return true
	}

	return false
}

// SetTextAutoResize gets a reference to the given string and assigns it to the TextAutoResize field.
func (o *TypeStyle) SetTextAutoResize(v string) {
	o.TextAutoResize = &v
}

// GetTextTruncation returns the TextTruncation field value if set, zero value otherwise.
func (o *TypeStyle) GetTextTruncation() string {
	if o == nil || IsNil(o.TextTruncation) {
		var ret string
		return ret
	}
	return *o.TextTruncation
}

// GetTextTruncationOk returns a tuple with the TextTruncation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetTextTruncationOk() (*string, bool) {
	if o == nil || IsNil(o.TextTruncation) {
		return nil, false
	}
	return o.TextTruncation, true
}

// HasTextTruncation returns a boolean if a field has been set.
func (o *TypeStyle) HasTextTruncation() bool {
	if o != nil && !IsNil(o.TextTruncation) {
		return true
	}

	return false
}

// SetTextTruncation gets a reference to the given string and assigns it to the TextTruncation field.
func (o *TypeStyle) SetTextTruncation(v string) {
	o.TextTruncation = &v
}

// GetMaxLines returns the MaxLines field value if set, zero value otherwise.
func (o *TypeStyle) GetMaxLines() float32 {
	if o == nil || IsNil(o.MaxLines) {
		var ret float32
		return ret
	}
	return *o.MaxLines
}

// GetMaxLinesOk returns a tuple with the MaxLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetMaxLinesOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxLines) {
		return nil, false
	}
	return o.MaxLines, true
}

// HasMaxLines returns a boolean if a field has been set.
func (o *TypeStyle) HasMaxLines() bool {
	if o != nil && !IsNil(o.MaxLines) {
		return true
	}

	return false
}

// SetMaxLines gets a reference to the given float32 and assigns it to the MaxLines field.
func (o *TypeStyle) SetMaxLines(v float32) {
	o.MaxLines = &v
}

// GetTextAlignHorizontal returns the TextAlignHorizontal field value if set, zero value otherwise.
func (o *TypeStyle) GetTextAlignHorizontal() string {
	if o == nil || IsNil(o.TextAlignHorizontal) {
		var ret string
		return ret
	}
	return *o.TextAlignHorizontal
}

// GetTextAlignHorizontalOk returns a tuple with the TextAlignHorizontal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetTextAlignHorizontalOk() (*string, bool) {
	if o == nil || IsNil(o.TextAlignHorizontal) {
		return nil, false
	}
	return o.TextAlignHorizontal, true
}

// HasTextAlignHorizontal returns a boolean if a field has been set.
func (o *TypeStyle) HasTextAlignHorizontal() bool {
	if o != nil && !IsNil(o.TextAlignHorizontal) {
		return true
	}

	return false
}

// SetTextAlignHorizontal gets a reference to the given string and assigns it to the TextAlignHorizontal field.
func (o *TypeStyle) SetTextAlignHorizontal(v string) {
	o.TextAlignHorizontal = &v
}

// GetTextAlignVertical returns the TextAlignVertical field value if set, zero value otherwise.
func (o *TypeStyle) GetTextAlignVertical() string {
	if o == nil || IsNil(o.TextAlignVertical) {
		var ret string
		return ret
	}
	return *o.TextAlignVertical
}

// GetTextAlignVerticalOk returns a tuple with the TextAlignVertical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetTextAlignVerticalOk() (*string, bool) {
	if o == nil || IsNil(o.TextAlignVertical) {
		return nil, false
	}
	return o.TextAlignVertical, true
}

// HasTextAlignVertical returns a boolean if a field has been set.
func (o *TypeStyle) HasTextAlignVertical() bool {
	if o != nil && !IsNil(o.TextAlignVertical) {
		return true
	}

	return false
}

// SetTextAlignVertical gets a reference to the given string and assigns it to the TextAlignVertical field.
func (o *TypeStyle) SetTextAlignVertical(v string) {
	o.TextAlignVertical = &v
}

// GetLetterSpacing returns the LetterSpacing field value if set, zero value otherwise.
func (o *TypeStyle) GetLetterSpacing() float32 {
	if o == nil || IsNil(o.LetterSpacing) {
		var ret float32
		return ret
	}
	return *o.LetterSpacing
}

// GetLetterSpacingOk returns a tuple with the LetterSpacing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetLetterSpacingOk() (*float32, bool) {
	if o == nil || IsNil(o.LetterSpacing) {
		return nil, false
	}
	return o.LetterSpacing, true
}

// HasLetterSpacing returns a boolean if a field has been set.
func (o *TypeStyle) HasLetterSpacing() bool {
	if o != nil && !IsNil(o.LetterSpacing) {
		return true
	}

	return false
}

// SetLetterSpacing gets a reference to the given float32 and assigns it to the LetterSpacing field.
func (o *TypeStyle) SetLetterSpacing(v float32) {
	o.LetterSpacing = &v
}

// GetFills returns the Fills field value if set, zero value otherwise.
func (o *TypeStyle) GetFills() []Paint {
	if o == nil || IsNil(o.Fills) {
		var ret []Paint
		return ret
	}
	return o.Fills
}

// GetFillsOk returns a tuple with the Fills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetFillsOk() ([]Paint, bool) {
	if o == nil || IsNil(o.Fills) {
		return nil, false
	}
	return o.Fills, true
}

// HasFills returns a boolean if a field has been set.
func (o *TypeStyle) HasFills() bool {
	if o != nil && !IsNil(o.Fills) {
		return true
	}

	return false
}

// SetFills gets a reference to the given []Paint and assigns it to the Fills field.
func (o *TypeStyle) SetFills(v []Paint) {
	o.Fills = v
}

// GetHyperlink returns the Hyperlink field value if set, zero value otherwise.
func (o *TypeStyle) GetHyperlink() Hyperlink {
	if o == nil || IsNil(o.Hyperlink) {
		var ret Hyperlink
		return ret
	}
	return *o.Hyperlink
}

// GetHyperlinkOk returns a tuple with the Hyperlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetHyperlinkOk() (*Hyperlink, bool) {
	if o == nil || IsNil(o.Hyperlink) {
		return nil, false
	}
	return o.Hyperlink, true
}

// HasHyperlink returns a boolean if a field has been set.
func (o *TypeStyle) HasHyperlink() bool {
	if o != nil && !IsNil(o.Hyperlink) {
		return true
	}

	return false
}

// SetHyperlink gets a reference to the given Hyperlink and assigns it to the Hyperlink field.
func (o *TypeStyle) SetHyperlink(v Hyperlink) {
	o.Hyperlink = &v
}

// GetOpentypeFlags returns the OpentypeFlags field value if set, zero value otherwise.
func (o *TypeStyle) GetOpentypeFlags() map[string]float32 {
	if o == nil || IsNil(o.OpentypeFlags) {
		var ret map[string]float32
		return ret
	}
	return o.OpentypeFlags
}

// GetOpentypeFlagsOk returns a tuple with the OpentypeFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetOpentypeFlagsOk() (map[string]float32, bool) {
	if o == nil || IsNil(o.OpentypeFlags) {
		return map[string]float32{}, false
	}
	return o.OpentypeFlags, true
}

// HasOpentypeFlags returns a boolean if a field has been set.
func (o *TypeStyle) HasOpentypeFlags() bool {
	if o != nil && !IsNil(o.OpentypeFlags) {
		return true
	}

	return false
}

// SetOpentypeFlags gets a reference to the given map[string]float32 and assigns it to the OpentypeFlags field.
func (o *TypeStyle) SetOpentypeFlags(v map[string]float32) {
	o.OpentypeFlags = v
}

// GetLineHeightPx returns the LineHeightPx field value if set, zero value otherwise.
func (o *TypeStyle) GetLineHeightPx() float32 {
	if o == nil || IsNil(o.LineHeightPx) {
		var ret float32
		return ret
	}
	return *o.LineHeightPx
}

// GetLineHeightPxOk returns a tuple with the LineHeightPx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetLineHeightPxOk() (*float32, bool) {
	if o == nil || IsNil(o.LineHeightPx) {
		return nil, false
	}
	return o.LineHeightPx, true
}

// HasLineHeightPx returns a boolean if a field has been set.
func (o *TypeStyle) HasLineHeightPx() bool {
	if o != nil && !IsNil(o.LineHeightPx) {
		return true
	}

	return false
}

// SetLineHeightPx gets a reference to the given float32 and assigns it to the LineHeightPx field.
func (o *TypeStyle) SetLineHeightPx(v float32) {
	o.LineHeightPx = &v
}

// GetLineHeightPercent returns the LineHeightPercent field value if set, zero value otherwise.
func (o *TypeStyle) GetLineHeightPercent() float32 {
	if o == nil || IsNil(o.LineHeightPercent) {
		var ret float32
		return ret
	}
	return *o.LineHeightPercent
}

// GetLineHeightPercentOk returns a tuple with the LineHeightPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetLineHeightPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.LineHeightPercent) {
		return nil, false
	}
	return o.LineHeightPercent, true
}

// HasLineHeightPercent returns a boolean if a field has been set.
func (o *TypeStyle) HasLineHeightPercent() bool {
	if o != nil && !IsNil(o.LineHeightPercent) {
		return true
	}

	return false
}

// SetLineHeightPercent gets a reference to the given float32 and assigns it to the LineHeightPercent field.
func (o *TypeStyle) SetLineHeightPercent(v float32) {
	o.LineHeightPercent = &v
}

// GetLineHeightPercentFontSize returns the LineHeightPercentFontSize field value if set, zero value otherwise.
func (o *TypeStyle) GetLineHeightPercentFontSize() float32 {
	if o == nil || IsNil(o.LineHeightPercentFontSize) {
		var ret float32
		return ret
	}
	return *o.LineHeightPercentFontSize
}

// GetLineHeightPercentFontSizeOk returns a tuple with the LineHeightPercentFontSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetLineHeightPercentFontSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.LineHeightPercentFontSize) {
		return nil, false
	}
	return o.LineHeightPercentFontSize, true
}

// HasLineHeightPercentFontSize returns a boolean if a field has been set.
func (o *TypeStyle) HasLineHeightPercentFontSize() bool {
	if o != nil && !IsNil(o.LineHeightPercentFontSize) {
		return true
	}

	return false
}

// SetLineHeightPercentFontSize gets a reference to the given float32 and assigns it to the LineHeightPercentFontSize field.
func (o *TypeStyle) SetLineHeightPercentFontSize(v float32) {
	o.LineHeightPercentFontSize = &v
}

// GetLineHeightUnit returns the LineHeightUnit field value if set, zero value otherwise.
func (o *TypeStyle) GetLineHeightUnit() string {
	if o == nil || IsNil(o.LineHeightUnit) {
		var ret string
		return ret
	}
	return *o.LineHeightUnit
}

// GetLineHeightUnitOk returns a tuple with the LineHeightUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetLineHeightUnitOk() (*string, bool) {
	if o == nil || IsNil(o.LineHeightUnit) {
		return nil, false
	}
	return o.LineHeightUnit, true
}

// HasLineHeightUnit returns a boolean if a field has been set.
func (o *TypeStyle) HasLineHeightUnit() bool {
	if o != nil && !IsNil(o.LineHeightUnit) {
		return true
	}

	return false
}

// SetLineHeightUnit gets a reference to the given string and assigns it to the LineHeightUnit field.
func (o *TypeStyle) SetLineHeightUnit(v string) {
	o.LineHeightUnit = &v
}

// GetBoundVariables returns the BoundVariables field value if set, zero value otherwise.
func (o *TypeStyle) GetBoundVariables() TypeStyleBoundVariables {
	if o == nil || IsNil(o.BoundVariables) {
		var ret TypeStyleBoundVariables
		return ret
	}
	return *o.BoundVariables
}

// GetBoundVariablesOk returns a tuple with the BoundVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetBoundVariablesOk() (*TypeStyleBoundVariables, bool) {
	if o == nil || IsNil(o.BoundVariables) {
		return nil, false
	}
	return o.BoundVariables, true
}

// HasBoundVariables returns a boolean if a field has been set.
func (o *TypeStyle) HasBoundVariables() bool {
	if o != nil && !IsNil(o.BoundVariables) {
		return true
	}

	return false
}

// SetBoundVariables gets a reference to the given TypeStyleBoundVariables and assigns it to the BoundVariables field.
func (o *TypeStyle) SetBoundVariables(v TypeStyleBoundVariables) {
	o.BoundVariables = &v
}

// GetIsOverrideOverTextStyle returns the IsOverrideOverTextStyle field value if set, zero value otherwise.
func (o *TypeStyle) GetIsOverrideOverTextStyle() bool {
	if o == nil || IsNil(o.IsOverrideOverTextStyle) {
		var ret bool
		return ret
	}
	return *o.IsOverrideOverTextStyle
}

// GetIsOverrideOverTextStyleOk returns a tuple with the IsOverrideOverTextStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetIsOverrideOverTextStyleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOverrideOverTextStyle) {
		return nil, false
	}
	return o.IsOverrideOverTextStyle, true
}

// HasIsOverrideOverTextStyle returns a boolean if a field has been set.
func (o *TypeStyle) HasIsOverrideOverTextStyle() bool {
	if o != nil && !IsNil(o.IsOverrideOverTextStyle) {
		return true
	}

	return false
}

// SetIsOverrideOverTextStyle gets a reference to the given bool and assigns it to the IsOverrideOverTextStyle field.
func (o *TypeStyle) SetIsOverrideOverTextStyle(v bool) {
	o.IsOverrideOverTextStyle = &v
}

// GetSemanticWeight returns the SemanticWeight field value if set, zero value otherwise.
func (o *TypeStyle) GetSemanticWeight() string {
	if o == nil || IsNil(o.SemanticWeight) {
		var ret string
		return ret
	}
	return *o.SemanticWeight
}

// GetSemanticWeightOk returns a tuple with the SemanticWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetSemanticWeightOk() (*string, bool) {
	if o == nil || IsNil(o.SemanticWeight) {
		return nil, false
	}
	return o.SemanticWeight, true
}

// HasSemanticWeight returns a boolean if a field has been set.
func (o *TypeStyle) HasSemanticWeight() bool {
	if o != nil && !IsNil(o.SemanticWeight) {
		return true
	}

	return false
}

// SetSemanticWeight gets a reference to the given string and assigns it to the SemanticWeight field.
func (o *TypeStyle) SetSemanticWeight(v string) {
	o.SemanticWeight = &v
}

// GetSemanticItalic returns the SemanticItalic field value if set, zero value otherwise.
func (o *TypeStyle) GetSemanticItalic() string {
	if o == nil || IsNil(o.SemanticItalic) {
		var ret string
		return ret
	}
	return *o.SemanticItalic
}

// GetSemanticItalicOk returns a tuple with the SemanticItalic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeStyle) GetSemanticItalicOk() (*string, bool) {
	if o == nil || IsNil(o.SemanticItalic) {
		return nil, false
	}
	return o.SemanticItalic, true
}

// HasSemanticItalic returns a boolean if a field has been set.
func (o *TypeStyle) HasSemanticItalic() bool {
	if o != nil && !IsNil(o.SemanticItalic) {
		return true
	}

	return false
}

// SetSemanticItalic gets a reference to the given string and assigns it to the SemanticItalic field.
func (o *TypeStyle) SetSemanticItalic(v string) {
	o.SemanticItalic = &v
}

func (o TypeStyle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypeStyle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FontFamily) {
		toSerialize["fontFamily"] = o.FontFamily
	}
	if o.FontPostScriptName.IsSet() {
		toSerialize["fontPostScriptName"] = o.FontPostScriptName.Get()
	}
	if !IsNil(o.ParagraphSpacing) {
		toSerialize["paragraphSpacing"] = o.ParagraphSpacing
	}
	if !IsNil(o.ParagraphIndent) {
		toSerialize["paragraphIndent"] = o.ParagraphIndent
	}
	if !IsNil(o.ListSpacing) {
		toSerialize["listSpacing"] = o.ListSpacing
	}
	if !IsNil(o.Italic) {
		toSerialize["italic"] = o.Italic
	}
	if !IsNil(o.FontWeight) {
		toSerialize["fontWeight"] = o.FontWeight
	}
	if !IsNil(o.FontSize) {
		toSerialize["fontSize"] = o.FontSize
	}
	if !IsNil(o.TextCase) {
		toSerialize["textCase"] = o.TextCase
	}
	if !IsNil(o.TextDecoration) {
		toSerialize["textDecoration"] = o.TextDecoration
	}
	if !IsNil(o.TextAutoResize) {
		toSerialize["textAutoResize"] = o.TextAutoResize
	}
	if !IsNil(o.TextTruncation) {
		toSerialize["textTruncation"] = o.TextTruncation
	}
	if !IsNil(o.MaxLines) {
		toSerialize["maxLines"] = o.MaxLines
	}
	if !IsNil(o.TextAlignHorizontal) {
		toSerialize["textAlignHorizontal"] = o.TextAlignHorizontal
	}
	if !IsNil(o.TextAlignVertical) {
		toSerialize["textAlignVertical"] = o.TextAlignVertical
	}
	if !IsNil(o.LetterSpacing) {
		toSerialize["letterSpacing"] = o.LetterSpacing
	}
	if !IsNil(o.Fills) {
		toSerialize["fills"] = o.Fills
	}
	if !IsNil(o.Hyperlink) {
		toSerialize["hyperlink"] = o.Hyperlink
	}
	if !IsNil(o.OpentypeFlags) {
		toSerialize["opentypeFlags"] = o.OpentypeFlags
	}
	if !IsNil(o.LineHeightPx) {
		toSerialize["lineHeightPx"] = o.LineHeightPx
	}
	if !IsNil(o.LineHeightPercent) {
		toSerialize["lineHeightPercent"] = o.LineHeightPercent
	}
	if !IsNil(o.LineHeightPercentFontSize) {
		toSerialize["lineHeightPercentFontSize"] = o.LineHeightPercentFontSize
	}
	if !IsNil(o.LineHeightUnit) {
		toSerialize["lineHeightUnit"] = o.LineHeightUnit
	}
	if !IsNil(o.BoundVariables) {
		toSerialize["boundVariables"] = o.BoundVariables
	}
	if !IsNil(o.IsOverrideOverTextStyle) {
		toSerialize["isOverrideOverTextStyle"] = o.IsOverrideOverTextStyle
	}
	if !IsNil(o.SemanticWeight) {
		toSerialize["semanticWeight"] = o.SemanticWeight
	}
	if !IsNil(o.SemanticItalic) {
		toSerialize["semanticItalic"] = o.SemanticItalic
	}
	return toSerialize, nil
}

type NullableTypeStyle struct {
	value *TypeStyle
	isSet bool
}

func (v NullableTypeStyle) Get() *TypeStyle {
	return v.value
}

func (v *NullableTypeStyle) Set(val *TypeStyle) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeStyle) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeStyle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeStyle(val *TypeStyle) *NullableTypeStyle {
	return &NullableTypeStyle{value: val, isSet: true}
}

func (v NullableTypeStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeStyle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



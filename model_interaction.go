/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Interaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Interaction{}

// Interaction An interaction in the Figma viewer, containing a trigger and one or more actions.
type Interaction struct {
	Trigger NullableTrigger `json:"trigger"`
	// The actions that are performed when the trigger is activated.
	Actions []Action `json:"actions,omitempty"`
}

type _Interaction Interaction

// NewInteraction instantiates a new Interaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInteraction(trigger NullableTrigger) *Interaction {
	this := Interaction{}
	this.Trigger = trigger
	return &this
}

// NewInteractionWithDefaults instantiates a new Interaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInteractionWithDefaults() *Interaction {
	this := Interaction{}
	return &this
}

// GetTrigger returns the Trigger field value
// If the value is explicit nil, the zero value for Trigger will be returned
func (o *Interaction) GetTrigger() Trigger {
	if o == nil || o.Trigger.Get() == nil {
		var ret Trigger
		return ret
	}

	return *o.Trigger.Get()
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interaction) GetTriggerOk() (*Trigger, bool) {
	if o == nil {
		return nil, false
	}
	return o.Trigger.Get(), o.Trigger.IsSet()
}

// SetTrigger sets field value
func (o *Interaction) SetTrigger(v Trigger) {
	o.Trigger.Set(&v)
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *Interaction) GetActions() []Action {
	if o == nil || IsNil(o.Actions) {
		var ret []Action
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interaction) GetActionsOk() ([]Action, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *Interaction) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []Action and assigns it to the Actions field.
func (o *Interaction) SetActions(v []Action) {
	o.Actions = v
}

func (o Interaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Interaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trigger"] = o.Trigger.Get()
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	return toSerialize, nil
}

func (o *Interaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trigger",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInteraction := _Interaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInteraction)

	if err != nil {
		return err
	}

	*o = Interaction(varInteraction)

	return err
}

type NullableInteraction struct {
	value *Interaction
	isSet bool
}

func (v NullableInteraction) Get() *Interaction {
	return v.value
}

func (v *NullableInteraction) Set(val *Interaction) {
	v.value = val
	v.isSet = true
}

func (v NullableInteraction) IsSet() bool {
	return v.isSet
}

func (v *NullableInteraction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInteraction(val *Interaction) *NullableInteraction {
	return &NullableInteraction{value: val, isSet: true}
}

func (v NullableInteraction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInteraction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Comment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Comment{}

// Comment A comment or reply left by a user.
type Comment struct {
	// Unique identifier for comment.
	Id string `json:"id"`
	ClientMeta CommentClientMeta `json:"client_meta"`
	// The file in which the comment lives
	FileKey string `json:"file_key"`
	// If present, the id of the comment to which this is the reply
	ParentId *string `json:"parent_id,omitempty"`
	// The user who left the comment
	User User `json:"user"`
	// The UTC ISO 8601 time at which the comment was left
	CreatedAt time.Time `json:"created_at"`
	// If set, the UTC ISO 8601 time the comment was resolved
	ResolvedAt NullableTime `json:"resolved_at,omitempty"`
	// The content of the comment
	Message string `json:"message"`
	// Only set for top level comments. The number displayed with the comment in the UI
	OrderId NullableString `json:"order_id"`
	// An array of reactions to the comment
	Reactions []Reaction `json:"reactions"`
}

type _Comment Comment

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment(id string, clientMeta CommentClientMeta, fileKey string, user User, createdAt time.Time, message string, orderId NullableString, reactions []Reaction) *Comment {
	this := Comment{}
	this.Id = id
	this.ClientMeta = clientMeta
	this.FileKey = fileKey
	this.User = user
	this.CreatedAt = createdAt
	this.Message = message
	this.OrderId = orderId
	this.Reactions = reactions
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetId returns the Id field value
func (o *Comment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Comment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Comment) SetId(v string) {
	o.Id = v
}

// GetClientMeta returns the ClientMeta field value
func (o *Comment) GetClientMeta() CommentClientMeta {
	if o == nil {
		var ret CommentClientMeta
		return ret
	}

	return o.ClientMeta
}

// GetClientMetaOk returns a tuple with the ClientMeta field value
// and a boolean to check if the value has been set.
func (o *Comment) GetClientMetaOk() (*CommentClientMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientMeta, true
}

// SetClientMeta sets field value
func (o *Comment) SetClientMeta(v CommentClientMeta) {
	o.ClientMeta = v
}

// GetFileKey returns the FileKey field value
func (o *Comment) GetFileKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileKey
}

// GetFileKeyOk returns a tuple with the FileKey field value
// and a boolean to check if the value has been set.
func (o *Comment) GetFileKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileKey, true
}

// SetFileKey sets field value
func (o *Comment) SetFileKey(v string) {
	o.FileKey = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Comment) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Comment) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *Comment) SetParentId(v string) {
	o.ParentId = &v
}

// GetUser returns the User field value
func (o *Comment) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Comment) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Comment) SetUser(v User) {
	o.User = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Comment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Comment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetResolvedAt returns the ResolvedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Comment) GetResolvedAt() time.Time {
	if o == nil || IsNil(o.ResolvedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ResolvedAt.Get()
}

// GetResolvedAtOk returns a tuple with the ResolvedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Comment) GetResolvedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolvedAt.Get(), o.ResolvedAt.IsSet()
}

// HasResolvedAt returns a boolean if a field has been set.
func (o *Comment) HasResolvedAt() bool {
	if o != nil && o.ResolvedAt.IsSet() {
		return true
	}

	return false
}

// SetResolvedAt gets a reference to the given NullableTime and assigns it to the ResolvedAt field.
func (o *Comment) SetResolvedAt(v time.Time) {
	o.ResolvedAt.Set(&v)
}
// SetResolvedAtNil sets the value for ResolvedAt to be an explicit nil
func (o *Comment) SetResolvedAtNil() {
	o.ResolvedAt.Set(nil)
}

// UnsetResolvedAt ensures that no value is present for ResolvedAt, not even an explicit nil
func (o *Comment) UnsetResolvedAt() {
	o.ResolvedAt.Unset()
}

// GetMessage returns the Message field value
func (o *Comment) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Comment) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Comment) SetMessage(v string) {
	o.Message = v
}

// GetOrderId returns the OrderId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Comment) GetOrderId() string {
	if o == nil || o.OrderId.Get() == nil {
		var ret string
		return ret
	}

	return *o.OrderId.Get()
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Comment) GetOrderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrderId.Get(), o.OrderId.IsSet()
}

// SetOrderId sets field value
func (o *Comment) SetOrderId(v string) {
	o.OrderId.Set(&v)
}

// GetReactions returns the Reactions field value
func (o *Comment) GetReactions() []Reaction {
	if o == nil {
		var ret []Reaction
		return ret
	}

	return o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value
// and a boolean to check if the value has been set.
func (o *Comment) GetReactionsOk() ([]Reaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reactions, true
}

// SetReactions sets field value
func (o *Comment) SetReactions(v []Reaction) {
	o.Reactions = v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Comment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["client_meta"] = o.ClientMeta
	toSerialize["file_key"] = o.FileKey
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	toSerialize["user"] = o.User
	toSerialize["created_at"] = o.CreatedAt
	if o.ResolvedAt.IsSet() {
		toSerialize["resolved_at"] = o.ResolvedAt.Get()
	}
	toSerialize["message"] = o.Message
	toSerialize["order_id"] = o.OrderId.Get()
	toSerialize["reactions"] = o.Reactions
	return toSerialize, nil
}

func (o *Comment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"client_meta",
		"file_key",
		"user",
		"created_at",
		"message",
		"order_id",
		"reactions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComment := _Comment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComment)

	if err != nil {
		return err
	}

	*o = Comment(varComment)

	return err
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



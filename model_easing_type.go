/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EasingType This type is a string enum with the following possible values:  - `EASE_IN`: Ease in with an animation curve similar to CSS ease-in. - `EASE_OUT`: Ease out with an animation curve similar to CSS ease-out. - `EASE_IN_AND_OUT`: Ease in and then out with an animation curve similar to CSS ease-in-out. - `LINEAR`: No easing, similar to CSS linear. - `EASE_IN_BACK`: Ease in with an animation curve that moves past the initial keyframe's value and then accelerates as it reaches the end. - `EASE_OUT_BACK`: Ease out with an animation curve that starts fast, then slows and goes past the ending keyframe's value. - `EASE_IN_AND_OUT_BACK`: Ease in and then out with an animation curve that overshoots the initial keyframe's value, then accelerates quickly before it slows and overshoots the ending keyframes value. - `CUSTOM_CUBIC_BEZIER`: User-defined cubic bezier curve. - `GENTLE`: Gentle animation similar to react-spring. - `QUICK`: Quick spring animation, great for toasts and notifications. - `BOUNCY`: Bouncy spring, for delightful animations like a heart bounce. - `SLOW`: Slow spring, useful as a steady, natural way to scale up fullscreen content. - `CUSTOM_SPRING`: User-defined spring animation.
type EasingType string

// List of EasingType
const (
	EASE_IN EasingType = "EASE_IN"
	EASE_OUT EasingType = "EASE_OUT"
	EASE_IN_AND_OUT EasingType = "EASE_IN_AND_OUT"
	LINEAR EasingType = "LINEAR"
	EASE_IN_BACK EasingType = "EASE_IN_BACK"
	EASE_OUT_BACK EasingType = "EASE_OUT_BACK"
	EASE_IN_AND_OUT_BACK EasingType = "EASE_IN_AND_OUT_BACK"
	CUSTOM_CUBIC_BEZIER EasingType = "CUSTOM_CUBIC_BEZIER"
	GENTLE EasingType = "GENTLE"
	QUICK EasingType = "QUICK"
	BOUNCY EasingType = "BOUNCY"
	SLOW EasingType = "SLOW"
	CUSTOM_SPRING EasingType = "CUSTOM_SPRING"
)

// All allowed values of EasingType enum
var AllowedEasingTypeEnumValues = []EasingType{
	"EASE_IN",
	"EASE_OUT",
	"EASE_IN_AND_OUT",
	"LINEAR",
	"EASE_IN_BACK",
	"EASE_OUT_BACK",
	"EASE_IN_AND_OUT_BACK",
	"CUSTOM_CUBIC_BEZIER",
	"GENTLE",
	"QUICK",
	"BOUNCY",
	"SLOW",
	"CUSTOM_SPRING",
}

func (v *EasingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EasingType(value)
	for _, existing := range AllowedEasingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EasingType", value)
}

// NewEasingTypeFromValue returns a pointer to a valid EasingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEasingTypeFromValue(v string) (*EasingType, error) {
	ev := EasingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EasingType: valid values are %v", v, AllowedEasingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EasingType) IsValid() bool {
	for _, existing := range AllowedEasingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EasingType value
func (v EasingType) Ptr() *EasingType {
	return &v
}

type NullableEasingType struct {
	value *EasingType
	isSet bool
}

func (v NullableEasingType) Get() *EasingType {
	return v.value
}

func (v *NullableEasingType) Set(val *EasingType) {
	v.value = val
	v.isSet = true
}

func (v NullableEasingType) IsSet() bool {
	return v.isSet
}

func (v *NullableEasingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEasingType(val *EasingType) *NullableEasingType {
	return &NullableEasingType{value: val, isSet: true}
}

func (v NullableEasingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEasingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


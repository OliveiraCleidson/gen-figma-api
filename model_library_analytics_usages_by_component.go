/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LibraryAnalyticsUsagesByComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LibraryAnalyticsUsagesByComponent{}

// LibraryAnalyticsUsagesByComponent Library analytics usage data broken down by component.
type LibraryAnalyticsUsagesByComponent struct {
	// Unique, stable id of the component.
	ComponentKey string `json:"component_key"`
	// Name of the component.
	ComponentName string `json:"component_name"`
	// The number of instances of the component within the organization.
	NumInstances float32 `json:"num_instances"`
	// The number of teams using the component within the organization.
	NumTeamsUsing float32 `json:"num_teams_using"`
	// The number of files using the component within the organization.
	NumFilesUsing float32 `json:"num_files_using"`
}

type _LibraryAnalyticsUsagesByComponent LibraryAnalyticsUsagesByComponent

// NewLibraryAnalyticsUsagesByComponent instantiates a new LibraryAnalyticsUsagesByComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryAnalyticsUsagesByComponent(componentKey string, componentName string, numInstances float32, numTeamsUsing float32, numFilesUsing float32) *LibraryAnalyticsUsagesByComponent {
	this := LibraryAnalyticsUsagesByComponent{}
	this.ComponentKey = componentKey
	this.ComponentName = componentName
	this.NumInstances = numInstances
	this.NumTeamsUsing = numTeamsUsing
	this.NumFilesUsing = numFilesUsing
	return &this
}

// NewLibraryAnalyticsUsagesByComponentWithDefaults instantiates a new LibraryAnalyticsUsagesByComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryAnalyticsUsagesByComponentWithDefaults() *LibraryAnalyticsUsagesByComponent {
	this := LibraryAnalyticsUsagesByComponent{}
	return &this
}

// GetComponentKey returns the ComponentKey field value
func (o *LibraryAnalyticsUsagesByComponent) GetComponentKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentKey
}

// GetComponentKeyOk returns a tuple with the ComponentKey field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsUsagesByComponent) GetComponentKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentKey, true
}

// SetComponentKey sets field value
func (o *LibraryAnalyticsUsagesByComponent) SetComponentKey(v string) {
	o.ComponentKey = v
}

// GetComponentName returns the ComponentName field value
func (o *LibraryAnalyticsUsagesByComponent) GetComponentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentName
}

// GetComponentNameOk returns a tuple with the ComponentName field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsUsagesByComponent) GetComponentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentName, true
}

// SetComponentName sets field value
func (o *LibraryAnalyticsUsagesByComponent) SetComponentName(v string) {
	o.ComponentName = v
}

// GetNumInstances returns the NumInstances field value
func (o *LibraryAnalyticsUsagesByComponent) GetNumInstances() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NumInstances
}

// GetNumInstancesOk returns a tuple with the NumInstances field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsUsagesByComponent) GetNumInstancesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumInstances, true
}

// SetNumInstances sets field value
func (o *LibraryAnalyticsUsagesByComponent) SetNumInstances(v float32) {
	o.NumInstances = v
}

// GetNumTeamsUsing returns the NumTeamsUsing field value
func (o *LibraryAnalyticsUsagesByComponent) GetNumTeamsUsing() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NumTeamsUsing
}

// GetNumTeamsUsingOk returns a tuple with the NumTeamsUsing field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsUsagesByComponent) GetNumTeamsUsingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumTeamsUsing, true
}

// SetNumTeamsUsing sets field value
func (o *LibraryAnalyticsUsagesByComponent) SetNumTeamsUsing(v float32) {
	o.NumTeamsUsing = v
}

// GetNumFilesUsing returns the NumFilesUsing field value
func (o *LibraryAnalyticsUsagesByComponent) GetNumFilesUsing() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NumFilesUsing
}

// GetNumFilesUsingOk returns a tuple with the NumFilesUsing field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsUsagesByComponent) GetNumFilesUsingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumFilesUsing, true
}

// SetNumFilesUsing sets field value
func (o *LibraryAnalyticsUsagesByComponent) SetNumFilesUsing(v float32) {
	o.NumFilesUsing = v
}

func (o LibraryAnalyticsUsagesByComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LibraryAnalyticsUsagesByComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["component_key"] = o.ComponentKey
	toSerialize["component_name"] = o.ComponentName
	toSerialize["num_instances"] = o.NumInstances
	toSerialize["num_teams_using"] = o.NumTeamsUsing
	toSerialize["num_files_using"] = o.NumFilesUsing
	return toSerialize, nil
}

func (o *LibraryAnalyticsUsagesByComponent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"component_key",
		"component_name",
		"num_instances",
		"num_teams_using",
		"num_files_using",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLibraryAnalyticsUsagesByComponent := _LibraryAnalyticsUsagesByComponent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLibraryAnalyticsUsagesByComponent)

	if err != nil {
		return err
	}

	*o = LibraryAnalyticsUsagesByComponent(varLibraryAnalyticsUsagesByComponent)

	return err
}

type NullableLibraryAnalyticsUsagesByComponent struct {
	value *LibraryAnalyticsUsagesByComponent
	isSet bool
}

func (v NullableLibraryAnalyticsUsagesByComponent) Get() *LibraryAnalyticsUsagesByComponent {
	return v.value
}

func (v *NullableLibraryAnalyticsUsagesByComponent) Set(val *LibraryAnalyticsUsagesByComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryAnalyticsUsagesByComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryAnalyticsUsagesByComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryAnalyticsUsagesByComponent(val *LibraryAnalyticsUsagesByComponent) *NullableLibraryAnalyticsUsagesByComponent {
	return &NullableLibraryAnalyticsUsagesByComponent{value: val, isSet: true}
}

func (v NullableLibraryAnalyticsUsagesByComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryAnalyticsUsagesByComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



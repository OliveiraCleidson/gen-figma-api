/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetVariableModeAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetVariableModeAction{}

// SetVariableModeAction Sets a variable to a specific mode.
type SetVariableModeAction struct {
	Type string `json:"type"`
	VariableCollectionId NullableString `json:"variableCollectionId,omitempty"`
	VariableModeId NullableString `json:"variableModeId,omitempty"`
}

type _SetVariableModeAction SetVariableModeAction

// NewSetVariableModeAction instantiates a new SetVariableModeAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetVariableModeAction(type_ string) *SetVariableModeAction {
	this := SetVariableModeAction{}
	this.Type = type_
	return &this
}

// NewSetVariableModeActionWithDefaults instantiates a new SetVariableModeAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetVariableModeActionWithDefaults() *SetVariableModeAction {
	this := SetVariableModeAction{}
	return &this
}

// GetType returns the Type field value
func (o *SetVariableModeAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SetVariableModeAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SetVariableModeAction) SetType(v string) {
	o.Type = v
}

// GetVariableCollectionId returns the VariableCollectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetVariableModeAction) GetVariableCollectionId() string {
	if o == nil || IsNil(o.VariableCollectionId.Get()) {
		var ret string
		return ret
	}
	return *o.VariableCollectionId.Get()
}

// GetVariableCollectionIdOk returns a tuple with the VariableCollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetVariableModeAction) GetVariableCollectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableCollectionId.Get(), o.VariableCollectionId.IsSet()
}

// HasVariableCollectionId returns a boolean if a field has been set.
func (o *SetVariableModeAction) HasVariableCollectionId() bool {
	if o != nil && o.VariableCollectionId.IsSet() {
		return true
	}

	return false
}

// SetVariableCollectionId gets a reference to the given NullableString and assigns it to the VariableCollectionId field.
func (o *SetVariableModeAction) SetVariableCollectionId(v string) {
	o.VariableCollectionId.Set(&v)
}
// SetVariableCollectionIdNil sets the value for VariableCollectionId to be an explicit nil
func (o *SetVariableModeAction) SetVariableCollectionIdNil() {
	o.VariableCollectionId.Set(nil)
}

// UnsetVariableCollectionId ensures that no value is present for VariableCollectionId, not even an explicit nil
func (o *SetVariableModeAction) UnsetVariableCollectionId() {
	o.VariableCollectionId.Unset()
}

// GetVariableModeId returns the VariableModeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetVariableModeAction) GetVariableModeId() string {
	if o == nil || IsNil(o.VariableModeId.Get()) {
		var ret string
		return ret
	}
	return *o.VariableModeId.Get()
}

// GetVariableModeIdOk returns a tuple with the VariableModeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetVariableModeAction) GetVariableModeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableModeId.Get(), o.VariableModeId.IsSet()
}

// HasVariableModeId returns a boolean if a field has been set.
func (o *SetVariableModeAction) HasVariableModeId() bool {
	if o != nil && o.VariableModeId.IsSet() {
		return true
	}

	return false
}

// SetVariableModeId gets a reference to the given NullableString and assigns it to the VariableModeId field.
func (o *SetVariableModeAction) SetVariableModeId(v string) {
	o.VariableModeId.Set(&v)
}
// SetVariableModeIdNil sets the value for VariableModeId to be an explicit nil
func (o *SetVariableModeAction) SetVariableModeIdNil() {
	o.VariableModeId.Set(nil)
}

// UnsetVariableModeId ensures that no value is present for VariableModeId, not even an explicit nil
func (o *SetVariableModeAction) UnsetVariableModeId() {
	o.VariableModeId.Unset()
}

func (o SetVariableModeAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetVariableModeAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if o.VariableCollectionId.IsSet() {
		toSerialize["variableCollectionId"] = o.VariableCollectionId.Get()
	}
	if o.VariableModeId.IsSet() {
		toSerialize["variableModeId"] = o.VariableModeId.Get()
	}
	return toSerialize, nil
}

func (o *SetVariableModeAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetVariableModeAction := _SetVariableModeAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetVariableModeAction)

	if err != nil {
		return err
	}

	*o = SetVariableModeAction(varSetVariableModeAction)

	return err
}

type NullableSetVariableModeAction struct {
	value *SetVariableModeAction
	isSet bool
}

func (v NullableSetVariableModeAction) Get() *SetVariableModeAction {
	return v.value
}

func (v *NullableSetVariableModeAction) Set(val *SetVariableModeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSetVariableModeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSetVariableModeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetVariableModeAction(val *SetVariableModeAction) *NullableSetVariableModeAction {
	return &NullableSetVariableModeAction{value: val, isSet: true}
}

func (v NullableSetVariableModeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetVariableModeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



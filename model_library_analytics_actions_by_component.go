/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LibraryAnalyticsActionsByComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LibraryAnalyticsActionsByComponent{}

// LibraryAnalyticsActionsByComponent Library analytics actions data broken down by component.
type LibraryAnalyticsActionsByComponent struct {
	// The date in ISO 8601 format. e.g. 2023-12-13
	Week string `json:"week"`
	// Unique, stable id of the component.
	ComponentKey string `json:"component_key"`
	// Name of the component.
	ComponentName string `json:"component_name"`
	// The number of detach events for this period.
	Detachments float32 `json:"detachments"`
	// The number of insertion events for this period.
	Insertions float32 `json:"insertions"`
}

type _LibraryAnalyticsActionsByComponent LibraryAnalyticsActionsByComponent

// NewLibraryAnalyticsActionsByComponent instantiates a new LibraryAnalyticsActionsByComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryAnalyticsActionsByComponent(week string, componentKey string, componentName string, detachments float32, insertions float32) *LibraryAnalyticsActionsByComponent {
	this := LibraryAnalyticsActionsByComponent{}
	this.Week = week
	this.ComponentKey = componentKey
	this.ComponentName = componentName
	this.Detachments = detachments
	this.Insertions = insertions
	return &this
}

// NewLibraryAnalyticsActionsByComponentWithDefaults instantiates a new LibraryAnalyticsActionsByComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryAnalyticsActionsByComponentWithDefaults() *LibraryAnalyticsActionsByComponent {
	this := LibraryAnalyticsActionsByComponent{}
	return &this
}

// GetWeek returns the Week field value
func (o *LibraryAnalyticsActionsByComponent) GetWeek() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Week
}

// GetWeekOk returns a tuple with the Week field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsActionsByComponent) GetWeekOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Week, true
}

// SetWeek sets field value
func (o *LibraryAnalyticsActionsByComponent) SetWeek(v string) {
	o.Week = v
}

// GetComponentKey returns the ComponentKey field value
func (o *LibraryAnalyticsActionsByComponent) GetComponentKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentKey
}

// GetComponentKeyOk returns a tuple with the ComponentKey field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsActionsByComponent) GetComponentKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentKey, true
}

// SetComponentKey sets field value
func (o *LibraryAnalyticsActionsByComponent) SetComponentKey(v string) {
	o.ComponentKey = v
}

// GetComponentName returns the ComponentName field value
func (o *LibraryAnalyticsActionsByComponent) GetComponentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentName
}

// GetComponentNameOk returns a tuple with the ComponentName field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsActionsByComponent) GetComponentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentName, true
}

// SetComponentName sets field value
func (o *LibraryAnalyticsActionsByComponent) SetComponentName(v string) {
	o.ComponentName = v
}

// GetDetachments returns the Detachments field value
func (o *LibraryAnalyticsActionsByComponent) GetDetachments() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Detachments
}

// GetDetachmentsOk returns a tuple with the Detachments field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsActionsByComponent) GetDetachmentsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detachments, true
}

// SetDetachments sets field value
func (o *LibraryAnalyticsActionsByComponent) SetDetachments(v float32) {
	o.Detachments = v
}

// GetInsertions returns the Insertions field value
func (o *LibraryAnalyticsActionsByComponent) GetInsertions() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Insertions
}

// GetInsertionsOk returns a tuple with the Insertions field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsActionsByComponent) GetInsertionsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Insertions, true
}

// SetInsertions sets field value
func (o *LibraryAnalyticsActionsByComponent) SetInsertions(v float32) {
	o.Insertions = v
}

func (o LibraryAnalyticsActionsByComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LibraryAnalyticsActionsByComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["week"] = o.Week
	toSerialize["component_key"] = o.ComponentKey
	toSerialize["component_name"] = o.ComponentName
	toSerialize["detachments"] = o.Detachments
	toSerialize["insertions"] = o.Insertions
	return toSerialize, nil
}

func (o *LibraryAnalyticsActionsByComponent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"week",
		"component_key",
		"component_name",
		"detachments",
		"insertions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLibraryAnalyticsActionsByComponent := _LibraryAnalyticsActionsByComponent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLibraryAnalyticsActionsByComponent)

	if err != nil {
		return err
	}

	*o = LibraryAnalyticsActionsByComponent(varLibraryAnalyticsActionsByComponent)

	return err
}

type NullableLibraryAnalyticsActionsByComponent struct {
	value *LibraryAnalyticsActionsByComponent
	isSet bool
}

func (v NullableLibraryAnalyticsActionsByComponent) Get() *LibraryAnalyticsActionsByComponent {
	return v.value
}

func (v *NullableLibraryAnalyticsActionsByComponent) Set(val *LibraryAnalyticsActionsByComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryAnalyticsActionsByComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryAnalyticsActionsByComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryAnalyticsActionsByComponent(val *LibraryAnalyticsActionsByComponent) *NullableLibraryAnalyticsActionsByComponent {
	return &NullableLibraryAnalyticsActionsByComponent{value: val, isSet: true}
}

func (v NullableLibraryAnalyticsActionsByComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryAnalyticsActionsByComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



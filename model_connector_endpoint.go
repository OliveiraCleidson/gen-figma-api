/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ConnectorEndpoint - Stores canvas location for a connector start/end point.
type ConnectorEndpoint struct {
	ConnectorEndpointOneOf *ConnectorEndpointOneOf
	ConnectorEndpointOneOf1 *ConnectorEndpointOneOf1
}

// ConnectorEndpointOneOfAsConnectorEndpoint is a convenience function that returns ConnectorEndpointOneOf wrapped in ConnectorEndpoint
func ConnectorEndpointOneOfAsConnectorEndpoint(v *ConnectorEndpointOneOf) ConnectorEndpoint {
	return ConnectorEndpoint{
		ConnectorEndpointOneOf: v,
	}
}

// ConnectorEndpointOneOf1AsConnectorEndpoint is a convenience function that returns ConnectorEndpointOneOf1 wrapped in ConnectorEndpoint
func ConnectorEndpointOneOf1AsConnectorEndpoint(v *ConnectorEndpointOneOf1) ConnectorEndpoint {
	return ConnectorEndpoint{
		ConnectorEndpointOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectorEndpoint) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConnectorEndpointOneOf
	err = newStrictDecoder(data).Decode(&dst.ConnectorEndpointOneOf)
	if err == nil {
		jsonConnectorEndpointOneOf, _ := json.Marshal(dst.ConnectorEndpointOneOf)
		if string(jsonConnectorEndpointOneOf) == "{}" { // empty struct
			dst.ConnectorEndpointOneOf = nil
		} else {
			if err = validator.Validate(dst.ConnectorEndpointOneOf); err != nil {
				dst.ConnectorEndpointOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConnectorEndpointOneOf = nil
	}

	// try to unmarshal data into ConnectorEndpointOneOf1
	err = newStrictDecoder(data).Decode(&dst.ConnectorEndpointOneOf1)
	if err == nil {
		jsonConnectorEndpointOneOf1, _ := json.Marshal(dst.ConnectorEndpointOneOf1)
		if string(jsonConnectorEndpointOneOf1) == "{}" { // empty struct
			dst.ConnectorEndpointOneOf1 = nil
		} else {
			if err = validator.Validate(dst.ConnectorEndpointOneOf1); err != nil {
				dst.ConnectorEndpointOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConnectorEndpointOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConnectorEndpointOneOf = nil
		dst.ConnectorEndpointOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ConnectorEndpoint)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ConnectorEndpoint)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectorEndpoint) MarshalJSON() ([]byte, error) {
	if src.ConnectorEndpointOneOf != nil {
		return json.Marshal(&src.ConnectorEndpointOneOf)
	}

	if src.ConnectorEndpointOneOf1 != nil {
		return json.Marshal(&src.ConnectorEndpointOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectorEndpoint) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ConnectorEndpointOneOf != nil {
		return obj.ConnectorEndpointOneOf
	}

	if obj.ConnectorEndpointOneOf1 != nil {
		return obj.ConnectorEndpointOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableConnectorEndpoint struct {
	value *ConnectorEndpoint
	isSet bool
}

func (v NullableConnectorEndpoint) Get() *ConnectorEndpoint {
	return v.value
}

func (v *NullableConnectorEndpoint) Set(val *ConnectorEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorEndpoint(val *ConnectorEndpoint) *NullableConnectorEndpoint {
	return &NullableConnectorEndpoint{value: val, isSet: true}
}

func (v NullableConnectorEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



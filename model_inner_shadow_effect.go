/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InnerShadowEffect type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InnerShadowEffect{}

// InnerShadowEffect struct for InnerShadowEffect
type InnerShadowEffect struct {
	// The color of the shadow
	Color RGBA `json:"color"`
	// Blend mode of the shadow
	BlendMode BlendMode `json:"blendMode"`
	// How far the shadow is projected in the x and y directions
	Offset Vector `json:"offset"`
	// Radius of the blur effect (applies to shadows as well)
	Radius float32 `json:"radius"`
	// The distance by which to expand (or contract) the shadow.  For drop shadows, a positive `spread` value creates a shadow larger than the node, whereas a negative value creates a shadow smaller than the node.  For inner shadows, a positive `spread` value contracts the shadow. Spread values are only accepted on rectangles and ellipses, or on frames, components, and instances with visible fill paints and `clipsContent` enabled. When left unspecified, the default value is 0.
	Spread *float32 `json:"spread,omitempty"`
	// Whether this shadow is visible.
	Visible bool `json:"visible"`
	BoundVariables *BaseShadowEffectBoundVariables `json:"boundVariables,omitempty"`
	// A string literal representing the effect's type. Always check the type before reading other properties.
	Type *string `json:"type,omitempty"`
}

type _InnerShadowEffect InnerShadowEffect

// NewInnerShadowEffect instantiates a new InnerShadowEffect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInnerShadowEffect(color RGBA, blendMode BlendMode, offset Vector, radius float32, visible bool) *InnerShadowEffect {
	this := InnerShadowEffect{}
	this.Color = color
	this.BlendMode = blendMode
	this.Offset = offset
	this.Radius = radius
	var spread float32 = 0
	this.Spread = &spread
	this.Visible = visible
	return &this
}

// NewInnerShadowEffectWithDefaults instantiates a new InnerShadowEffect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInnerShadowEffectWithDefaults() *InnerShadowEffect {
	this := InnerShadowEffect{}
	var spread float32 = 0
	this.Spread = &spread
	return &this
}

// GetColor returns the Color field value
func (o *InnerShadowEffect) GetColor() RGBA {
	if o == nil {
		var ret RGBA
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *InnerShadowEffect) GetColorOk() (*RGBA, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *InnerShadowEffect) SetColor(v RGBA) {
	o.Color = v
}

// GetBlendMode returns the BlendMode field value
func (o *InnerShadowEffect) GetBlendMode() BlendMode {
	if o == nil {
		var ret BlendMode
		return ret
	}

	return o.BlendMode
}

// GetBlendModeOk returns a tuple with the BlendMode field value
// and a boolean to check if the value has been set.
func (o *InnerShadowEffect) GetBlendModeOk() (*BlendMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlendMode, true
}

// SetBlendMode sets field value
func (o *InnerShadowEffect) SetBlendMode(v BlendMode) {
	o.BlendMode = v
}

// GetOffset returns the Offset field value
func (o *InnerShadowEffect) GetOffset() Vector {
	if o == nil {
		var ret Vector
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *InnerShadowEffect) GetOffsetOk() (*Vector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *InnerShadowEffect) SetOffset(v Vector) {
	o.Offset = v
}

// GetRadius returns the Radius field value
func (o *InnerShadowEffect) GetRadius() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Radius
}

// GetRadiusOk returns a tuple with the Radius field value
// and a boolean to check if the value has been set.
func (o *InnerShadowEffect) GetRadiusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Radius, true
}

// SetRadius sets field value
func (o *InnerShadowEffect) SetRadius(v float32) {
	o.Radius = v
}

// GetSpread returns the Spread field value if set, zero value otherwise.
func (o *InnerShadowEffect) GetSpread() float32 {
	if o == nil || IsNil(o.Spread) {
		var ret float32
		return ret
	}
	return *o.Spread
}

// GetSpreadOk returns a tuple with the Spread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InnerShadowEffect) GetSpreadOk() (*float32, bool) {
	if o == nil || IsNil(o.Spread) {
		return nil, false
	}
	return o.Spread, true
}

// HasSpread returns a boolean if a field has been set.
func (o *InnerShadowEffect) HasSpread() bool {
	if o != nil && !IsNil(o.Spread) {
		return true
	}

	return false
}

// SetSpread gets a reference to the given float32 and assigns it to the Spread field.
func (o *InnerShadowEffect) SetSpread(v float32) {
	o.Spread = &v
}

// GetVisible returns the Visible field value
func (o *InnerShadowEffect) GetVisible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value
// and a boolean to check if the value has been set.
func (o *InnerShadowEffect) GetVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visible, true
}

// SetVisible sets field value
func (o *InnerShadowEffect) SetVisible(v bool) {
	o.Visible = v
}

// GetBoundVariables returns the BoundVariables field value if set, zero value otherwise.
func (o *InnerShadowEffect) GetBoundVariables() BaseShadowEffectBoundVariables {
	if o == nil || IsNil(o.BoundVariables) {
		var ret BaseShadowEffectBoundVariables
		return ret
	}
	return *o.BoundVariables
}

// GetBoundVariablesOk returns a tuple with the BoundVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InnerShadowEffect) GetBoundVariablesOk() (*BaseShadowEffectBoundVariables, bool) {
	if o == nil || IsNil(o.BoundVariables) {
		return nil, false
	}
	return o.BoundVariables, true
}

// HasBoundVariables returns a boolean if a field has been set.
func (o *InnerShadowEffect) HasBoundVariables() bool {
	if o != nil && !IsNil(o.BoundVariables) {
		return true
	}

	return false
}

// SetBoundVariables gets a reference to the given BaseShadowEffectBoundVariables and assigns it to the BoundVariables field.
func (o *InnerShadowEffect) SetBoundVariables(v BaseShadowEffectBoundVariables) {
	o.BoundVariables = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InnerShadowEffect) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InnerShadowEffect) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InnerShadowEffect) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InnerShadowEffect) SetType(v string) {
	o.Type = &v
}

func (o InnerShadowEffect) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InnerShadowEffect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["color"] = o.Color
	toSerialize["blendMode"] = o.BlendMode
	toSerialize["offset"] = o.Offset
	toSerialize["radius"] = o.Radius
	if !IsNil(o.Spread) {
		toSerialize["spread"] = o.Spread
	}
	toSerialize["visible"] = o.Visible
	if !IsNil(o.BoundVariables) {
		toSerialize["boundVariables"] = o.BoundVariables
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *InnerShadowEffect) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"color",
		"blendMode",
		"offset",
		"radius",
		"visible",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInnerShadowEffect := _InnerShadowEffect{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInnerShadowEffect)

	if err != nil {
		return err
	}

	*o = InnerShadowEffect(varInnerShadowEffect)

	return err
}

type NullableInnerShadowEffect struct {
	value *InnerShadowEffect
	isSet bool
}

func (v NullableInnerShadowEffect) Get() *InnerShadowEffect {
	return v.value
}

func (v *NullableInnerShadowEffect) Set(val *InnerShadowEffect) {
	v.value = val
	v.isSet = true
}

func (v NullableInnerShadowEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableInnerShadowEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInnerShadowEffect(val *InnerShadowEffect) *NullableInnerShadowEffect {
	return &NullableInnerShadowEffect{value: val, isSet: true}
}

func (v NullableInnerShadowEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInnerShadowEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



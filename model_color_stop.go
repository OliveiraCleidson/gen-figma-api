/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ColorStop type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColorStop{}

// ColorStop A single color stop with its position along the gradient axis, color, and bound variables if any
type ColorStop struct {
	// Value between 0 and 1 representing position along gradient axis.
	Position float32 `json:"position"`
	// Color attached to corresponding position.
	Color RGBA `json:"color"`
	BoundVariables *ColorStopBoundVariables `json:"boundVariables,omitempty"`
}

type _ColorStop ColorStop

// NewColorStop instantiates a new ColorStop object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorStop(position float32, color RGBA) *ColorStop {
	this := ColorStop{}
	this.Position = position
	this.Color = color
	return &this
}

// NewColorStopWithDefaults instantiates a new ColorStop object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorStopWithDefaults() *ColorStop {
	this := ColorStop{}
	return &this
}

// GetPosition returns the Position field value
func (o *ColorStop) GetPosition() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *ColorStop) GetPositionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *ColorStop) SetPosition(v float32) {
	o.Position = v
}

// GetColor returns the Color field value
func (o *ColorStop) GetColor() RGBA {
	if o == nil {
		var ret RGBA
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *ColorStop) GetColorOk() (*RGBA, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *ColorStop) SetColor(v RGBA) {
	o.Color = v
}

// GetBoundVariables returns the BoundVariables field value if set, zero value otherwise.
func (o *ColorStop) GetBoundVariables() ColorStopBoundVariables {
	if o == nil || IsNil(o.BoundVariables) {
		var ret ColorStopBoundVariables
		return ret
	}
	return *o.BoundVariables
}

// GetBoundVariablesOk returns a tuple with the BoundVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorStop) GetBoundVariablesOk() (*ColorStopBoundVariables, bool) {
	if o == nil || IsNil(o.BoundVariables) {
		return nil, false
	}
	return o.BoundVariables, true
}

// HasBoundVariables returns a boolean if a field has been set.
func (o *ColorStop) HasBoundVariables() bool {
	if o != nil && !IsNil(o.BoundVariables) {
		return true
	}

	return false
}

// SetBoundVariables gets a reference to the given ColorStopBoundVariables and assigns it to the BoundVariables field.
func (o *ColorStop) SetBoundVariables(v ColorStopBoundVariables) {
	o.BoundVariables = &v
}

func (o ColorStop) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColorStop) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["position"] = o.Position
	toSerialize["color"] = o.Color
	if !IsNil(o.BoundVariables) {
		toSerialize["boundVariables"] = o.BoundVariables
	}
	return toSerialize, nil
}

func (o *ColorStop) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"position",
		"color",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varColorStop := _ColorStop{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varColorStop)

	if err != nil {
		return err
	}

	*o = ColorStop(varColorStop)

	return err
}

type NullableColorStop struct {
	value *ColorStop
	isSet bool
}

func (v NullableColorStop) Get() *ColorStop {
	return v.value
}

func (v *NullableColorStop) Set(val *ColorStop) {
	v.value = val
	v.isSet = true
}

func (v NullableColorStop) IsSet() bool {
	return v.isSet
}

func (v *NullableColorStop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorStop(val *ColorStop) *NullableColorStop {
	return &NullableColorStop{value: val, isSet: true}
}

func (v NullableColorStop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorStop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



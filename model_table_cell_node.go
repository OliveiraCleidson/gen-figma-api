/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TableCellNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableCellNode{}

// TableCellNode struct for TableCellNode
type TableCellNode struct {
	// A string uniquely identifying this node within the document.
	Id string `json:"id"`
	// The name given to the node by the user in the tool.
	Name string `json:"name"`
	// The type of this node, represented by the string literal \"TABLE_CELL\"
	Type string `json:"type"`
	// Whether or not the node is visible on the canvas.
	Visible *bool `json:"visible,omitempty"`
	// If true, layer is locked and cannot be edited
	Locked *bool `json:"locked,omitempty"`
	// Whether the layer is fixed while the parent is scrolling
	// Deprecated
	IsFixed *bool `json:"isFixed,omitempty"`
	// How layer should be treated when the frame is resized
	ScrollBehavior string `json:"scrollBehavior"`
	// The rotation of the node, if not 0.
	Rotation *float32 `json:"rotation,omitempty"`
	// A mapping of a layer's property to component property name of component properties attached to this node. The component property name can be used to look up more information on the corresponding component's or component set's componentPropertyDefinitions.
	ComponentPropertyReferences map[string]string `json:"componentPropertyReferences,omitempty"`
	PluginData interface{} `json:"pluginData,omitempty"`
	SharedPluginData interface{} `json:"sharedPluginData,omitempty"`
	BoundVariables *IsLayerTraitBoundVariables `json:"boundVariables,omitempty"`
	// A mapping of variable collection ID to mode ID representing the explicitly set modes for this node.
	ExplicitVariableModes map[string]string `json:"explicitVariableModes,omitempty"`
	// An array of fill paints applied to the node.
	Fills []Paint `json:"fills"`
	// A mapping of a StyleType to style ID (see Style) of styles present on this node. The style ID can be used to look up more information about the style in the top-level styles field.
	Styles map[string]string `json:"styles,omitempty"`
	AbsoluteBoundingBox Rectangle `json:"absoluteBoundingBox"`
	AbsoluteRenderBounds Rectangle `json:"absoluteRenderBounds"`
	// Keep height and width constrained to same ratio.
	PreserveRatio *bool `json:"preserveRatio,omitempty"`
	// Horizontal and vertical layout constraints for node.
	Constraints *LayoutConstraint `json:"constraints,omitempty"`
	// A transformation matrix is standard way in computer graphics to represent translation and rotation. These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1]. This is known as an affine transform and is enough to represent translation, rotation, and skew.  The identity transform is [[1, 0, 0], [0, 1, 0]].  A translation matrix will typically look like:  ``` [[1, 0, tx],   [0, 1, ty]] ```  and a rotation matrix will typically look like:  ``` [[cos(angle), sin(angle), 0],   [-sin(angle), cos(angle), 0]] ```  Another way to think about this transform is as three vectors:  - The x axis (t[0][0], t[1][0]) - The y axis (t[0][1], t[1][1]) - The translation offset (t[0][2], t[1][2])  The most common usage of the Transform matrix is the `relativeTransform property`. This particular usage of the matrix has a few additional restrictions. The translation offset can take on any value but we do enforce that the axis vectors are unit vectors (i.e. have length 1). The axes are not required to be at 90Â° angles to each other.
	RelativeTransform [][]float32 `json:"relativeTransform,omitempty"`
	// Width and height of element. This is different from the width and height of the bounding box in that the absolute bounding box represents the element after scaling and rotation. Only present if `geometry=paths` is passed.
	Size *Vector `json:"size,omitempty"`
	//  Determines if the layer should stretch along the parent's counter axis. This property is only provided for direct children of auto-layout frames.  - `INHERIT` - `STRETCH`  In previous versions of auto layout, determined how the layer is aligned inside an auto-layout frame. This property is only provided for direct children of auto-layout frames.  - `MIN` - `CENTER` - `MAX` - `STRETCH`  In horizontal auto-layout frames, \"MIN\" and \"MAX\" correspond to \"TOP\" and \"BOTTOM\". In vertical auto-layout frames, \"MIN\" and \"MAX\" correspond to \"LEFT\" and \"RIGHT\".
	LayoutAlign *string `json:"layoutAlign,omitempty"`
	// This property is applicable only for direct children of auto-layout frames, ignored otherwise. Determines whether a layer should stretch along the parent's primary axis. A `0` corresponds to a fixed size and `1` corresponds to stretch.
	LayoutGrow *float32 `json:"layoutGrow,omitempty"`
	// Determines whether a layer's size and position should be determined by auto-layout settings or manually adjustable.
	LayoutPositioning *string `json:"layoutPositioning,omitempty"`
	// The minimum width of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
	MinWidth *float32 `json:"minWidth,omitempty"`
	// The maximum width of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
	MaxWidth *float32 `json:"maxWidth,omitempty"`
	// The minimum height of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
	MinHeight *float32 `json:"minHeight,omitempty"`
	// The maximum height of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
	MaxHeight *float32 `json:"maxHeight,omitempty"`
	// The horizontal sizing setting on this auto-layout frame or frame child. - `FIXED` - `HUG`: only valid on auto-layout frames and text nodes - `FILL`: only valid on auto-layout frame children
	LayoutSizingHorizontal *string `json:"layoutSizingHorizontal,omitempty"`
	// The vertical sizing setting on this auto-layout frame or frame child. - `FIXED` - `HUG`: only valid on auto-layout frames and text nodes - `FILL`: only valid on auto-layout frame children
	LayoutSizingVertical *string `json:"layoutSizingVertical,omitempty"`
	// Text contained within a text box.
	Characters string `json:"characters"`
}

type _TableCellNode TableCellNode

// NewTableCellNode instantiates a new TableCellNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableCellNode(id string, name string, type_ string, scrollBehavior string, fills []Paint, absoluteBoundingBox Rectangle, absoluteRenderBounds Rectangle, characters string) *TableCellNode {
	this := TableCellNode{}
	this.Id = id
	this.Name = name
	this.Type = type_
	var visible bool = true
	this.Visible = &visible
	var locked bool = false
	this.Locked = &locked
	var isFixed bool = false
	this.IsFixed = &isFixed
	this.ScrollBehavior = scrollBehavior
	var rotation float32 = 0
	this.Rotation = &rotation
	this.Fills = fills
	this.AbsoluteBoundingBox = absoluteBoundingBox
	this.AbsoluteRenderBounds = absoluteRenderBounds
	var preserveRatio bool = false
	this.PreserveRatio = &preserveRatio
	var layoutGrow float32 = 0
	this.LayoutGrow = &layoutGrow
	var layoutPositioning string = "AUTO"
	this.LayoutPositioning = &layoutPositioning
	var minWidth float32 = 0
	this.MinWidth = &minWidth
	var maxWidth float32 = 0
	this.MaxWidth = &maxWidth
	var minHeight float32 = 0
	this.MinHeight = &minHeight
	var maxHeight float32 = 0
	this.MaxHeight = &maxHeight
	this.Characters = characters
	return &this
}

// NewTableCellNodeWithDefaults instantiates a new TableCellNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableCellNodeWithDefaults() *TableCellNode {
	this := TableCellNode{}
	var visible bool = true
	this.Visible = &visible
	var locked bool = false
	this.Locked = &locked
	var isFixed bool = false
	this.IsFixed = &isFixed
	var scrollBehavior string = "SCROLLS"
	this.ScrollBehavior = scrollBehavior
	var rotation float32 = 0
	this.Rotation = &rotation
	var preserveRatio bool = false
	this.PreserveRatio = &preserveRatio
	var layoutGrow float32 = 0
	this.LayoutGrow = &layoutGrow
	var layoutPositioning string = "AUTO"
	this.LayoutPositioning = &layoutPositioning
	var minWidth float32 = 0
	this.MinWidth = &minWidth
	var maxWidth float32 = 0
	this.MaxWidth = &maxWidth
	var minHeight float32 = 0
	this.MinHeight = &minHeight
	var maxHeight float32 = 0
	this.MaxHeight = &maxHeight
	return &this
}

// GetId returns the Id field value
func (o *TableCellNode) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TableCellNode) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TableCellNode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TableCellNode) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *TableCellNode) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TableCellNode) SetType(v string) {
	o.Type = v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *TableCellNode) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *TableCellNode) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *TableCellNode) SetVisible(v bool) {
	o.Visible = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *TableCellNode) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *TableCellNode) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *TableCellNode) SetLocked(v bool) {
	o.Locked = &v
}

// GetIsFixed returns the IsFixed field value if set, zero value otherwise.
// Deprecated
func (o *TableCellNode) GetIsFixed() bool {
	if o == nil || IsNil(o.IsFixed) {
		var ret bool
		return ret
	}
	return *o.IsFixed
}

// GetIsFixedOk returns a tuple with the IsFixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TableCellNode) GetIsFixedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFixed) {
		return nil, false
	}
	return o.IsFixed, true
}

// HasIsFixed returns a boolean if a field has been set.
func (o *TableCellNode) HasIsFixed() bool {
	if o != nil && !IsNil(o.IsFixed) {
		return true
	}

	return false
}

// SetIsFixed gets a reference to the given bool and assigns it to the IsFixed field.
// Deprecated
func (o *TableCellNode) SetIsFixed(v bool) {
	o.IsFixed = &v
}

// GetScrollBehavior returns the ScrollBehavior field value
func (o *TableCellNode) GetScrollBehavior() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScrollBehavior
}

// GetScrollBehaviorOk returns a tuple with the ScrollBehavior field value
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetScrollBehaviorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScrollBehavior, true
}

// SetScrollBehavior sets field value
func (o *TableCellNode) SetScrollBehavior(v string) {
	o.ScrollBehavior = v
}

// GetRotation returns the Rotation field value if set, zero value otherwise.
func (o *TableCellNode) GetRotation() float32 {
	if o == nil || IsNil(o.Rotation) {
		var ret float32
		return ret
	}
	return *o.Rotation
}

// GetRotationOk returns a tuple with the Rotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetRotationOk() (*float32, bool) {
	if o == nil || IsNil(o.Rotation) {
		return nil, false
	}
	return o.Rotation, true
}

// HasRotation returns a boolean if a field has been set.
func (o *TableCellNode) HasRotation() bool {
	if o != nil && !IsNil(o.Rotation) {
		return true
	}

	return false
}

// SetRotation gets a reference to the given float32 and assigns it to the Rotation field.
func (o *TableCellNode) SetRotation(v float32) {
	o.Rotation = &v
}

// GetComponentPropertyReferences returns the ComponentPropertyReferences field value if set, zero value otherwise.
func (o *TableCellNode) GetComponentPropertyReferences() map[string]string {
	if o == nil || IsNil(o.ComponentPropertyReferences) {
		var ret map[string]string
		return ret
	}
	return o.ComponentPropertyReferences
}

// GetComponentPropertyReferencesOk returns a tuple with the ComponentPropertyReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetComponentPropertyReferencesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.ComponentPropertyReferences) {
		return map[string]string{}, false
	}
	return o.ComponentPropertyReferences, true
}

// HasComponentPropertyReferences returns a boolean if a field has been set.
func (o *TableCellNode) HasComponentPropertyReferences() bool {
	if o != nil && !IsNil(o.ComponentPropertyReferences) {
		return true
	}

	return false
}

// SetComponentPropertyReferences gets a reference to the given map[string]string and assigns it to the ComponentPropertyReferences field.
func (o *TableCellNode) SetComponentPropertyReferences(v map[string]string) {
	o.ComponentPropertyReferences = v
}

// GetPluginData returns the PluginData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TableCellNode) GetPluginData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PluginData
}

// GetPluginDataOk returns a tuple with the PluginData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TableCellNode) GetPluginDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.PluginData) {
		return nil, false
	}
	return &o.PluginData, true
}

// HasPluginData returns a boolean if a field has been set.
func (o *TableCellNode) HasPluginData() bool {
	if o != nil && !IsNil(o.PluginData) {
		return true
	}

	return false
}

// SetPluginData gets a reference to the given interface{} and assigns it to the PluginData field.
func (o *TableCellNode) SetPluginData(v interface{}) {
	o.PluginData = v
}

// GetSharedPluginData returns the SharedPluginData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TableCellNode) GetSharedPluginData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SharedPluginData
}

// GetSharedPluginDataOk returns a tuple with the SharedPluginData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TableCellNode) GetSharedPluginDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SharedPluginData) {
		return nil, false
	}
	return &o.SharedPluginData, true
}

// HasSharedPluginData returns a boolean if a field has been set.
func (o *TableCellNode) HasSharedPluginData() bool {
	if o != nil && !IsNil(o.SharedPluginData) {
		return true
	}

	return false
}

// SetSharedPluginData gets a reference to the given interface{} and assigns it to the SharedPluginData field.
func (o *TableCellNode) SetSharedPluginData(v interface{}) {
	o.SharedPluginData = v
}

// GetBoundVariables returns the BoundVariables field value if set, zero value otherwise.
func (o *TableCellNode) GetBoundVariables() IsLayerTraitBoundVariables {
	if o == nil || IsNil(o.BoundVariables) {
		var ret IsLayerTraitBoundVariables
		return ret
	}
	return *o.BoundVariables
}

// GetBoundVariablesOk returns a tuple with the BoundVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetBoundVariablesOk() (*IsLayerTraitBoundVariables, bool) {
	if o == nil || IsNil(o.BoundVariables) {
		return nil, false
	}
	return o.BoundVariables, true
}

// HasBoundVariables returns a boolean if a field has been set.
func (o *TableCellNode) HasBoundVariables() bool {
	if o != nil && !IsNil(o.BoundVariables) {
		return true
	}

	return false
}

// SetBoundVariables gets a reference to the given IsLayerTraitBoundVariables and assigns it to the BoundVariables field.
func (o *TableCellNode) SetBoundVariables(v IsLayerTraitBoundVariables) {
	o.BoundVariables = &v
}

// GetExplicitVariableModes returns the ExplicitVariableModes field value if set, zero value otherwise.
func (o *TableCellNode) GetExplicitVariableModes() map[string]string {
	if o == nil || IsNil(o.ExplicitVariableModes) {
		var ret map[string]string
		return ret
	}
	return o.ExplicitVariableModes
}

// GetExplicitVariableModesOk returns a tuple with the ExplicitVariableModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetExplicitVariableModesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.ExplicitVariableModes) {
		return map[string]string{}, false
	}
	return o.ExplicitVariableModes, true
}

// HasExplicitVariableModes returns a boolean if a field has been set.
func (o *TableCellNode) HasExplicitVariableModes() bool {
	if o != nil && !IsNil(o.ExplicitVariableModes) {
		return true
	}

	return false
}

// SetExplicitVariableModes gets a reference to the given map[string]string and assigns it to the ExplicitVariableModes field.
func (o *TableCellNode) SetExplicitVariableModes(v map[string]string) {
	o.ExplicitVariableModes = v
}

// GetFills returns the Fills field value
func (o *TableCellNode) GetFills() []Paint {
	if o == nil {
		var ret []Paint
		return ret
	}

	return o.Fills
}

// GetFillsOk returns a tuple with the Fills field value
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetFillsOk() ([]Paint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fills, true
}

// SetFills sets field value
func (o *TableCellNode) SetFills(v []Paint) {
	o.Fills = v
}

// GetStyles returns the Styles field value if set, zero value otherwise.
func (o *TableCellNode) GetStyles() map[string]string {
	if o == nil || IsNil(o.Styles) {
		var ret map[string]string
		return ret
	}
	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetStylesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Styles) {
		return map[string]string{}, false
	}
	return o.Styles, true
}

// HasStyles returns a boolean if a field has been set.
func (o *TableCellNode) HasStyles() bool {
	if o != nil && !IsNil(o.Styles) {
		return true
	}

	return false
}

// SetStyles gets a reference to the given map[string]string and assigns it to the Styles field.
func (o *TableCellNode) SetStyles(v map[string]string) {
	o.Styles = v
}

// GetAbsoluteBoundingBox returns the AbsoluteBoundingBox field value
func (o *TableCellNode) GetAbsoluteBoundingBox() Rectangle {
	if o == nil {
		var ret Rectangle
		return ret
	}

	return o.AbsoluteBoundingBox
}

// GetAbsoluteBoundingBoxOk returns a tuple with the AbsoluteBoundingBox field value
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetAbsoluteBoundingBoxOk() (*Rectangle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbsoluteBoundingBox, true
}

// SetAbsoluteBoundingBox sets field value
func (o *TableCellNode) SetAbsoluteBoundingBox(v Rectangle) {
	o.AbsoluteBoundingBox = v
}

// GetAbsoluteRenderBounds returns the AbsoluteRenderBounds field value
func (o *TableCellNode) GetAbsoluteRenderBounds() Rectangle {
	if o == nil {
		var ret Rectangle
		return ret
	}

	return o.AbsoluteRenderBounds
}

// GetAbsoluteRenderBoundsOk returns a tuple with the AbsoluteRenderBounds field value
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetAbsoluteRenderBoundsOk() (*Rectangle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbsoluteRenderBounds, true
}

// SetAbsoluteRenderBounds sets field value
func (o *TableCellNode) SetAbsoluteRenderBounds(v Rectangle) {
	o.AbsoluteRenderBounds = v
}

// GetPreserveRatio returns the PreserveRatio field value if set, zero value otherwise.
func (o *TableCellNode) GetPreserveRatio() bool {
	if o == nil || IsNil(o.PreserveRatio) {
		var ret bool
		return ret
	}
	return *o.PreserveRatio
}

// GetPreserveRatioOk returns a tuple with the PreserveRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetPreserveRatioOk() (*bool, bool) {
	if o == nil || IsNil(o.PreserveRatio) {
		return nil, false
	}
	return o.PreserveRatio, true
}

// HasPreserveRatio returns a boolean if a field has been set.
func (o *TableCellNode) HasPreserveRatio() bool {
	if o != nil && !IsNil(o.PreserveRatio) {
		return true
	}

	return false
}

// SetPreserveRatio gets a reference to the given bool and assigns it to the PreserveRatio field.
func (o *TableCellNode) SetPreserveRatio(v bool) {
	o.PreserveRatio = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *TableCellNode) GetConstraints() LayoutConstraint {
	if o == nil || IsNil(o.Constraints) {
		var ret LayoutConstraint
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetConstraintsOk() (*LayoutConstraint, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *TableCellNode) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given LayoutConstraint and assigns it to the Constraints field.
func (o *TableCellNode) SetConstraints(v LayoutConstraint) {
	o.Constraints = &v
}

// GetRelativeTransform returns the RelativeTransform field value if set, zero value otherwise.
func (o *TableCellNode) GetRelativeTransform() [][]float32 {
	if o == nil || IsNil(o.RelativeTransform) {
		var ret [][]float32
		return ret
	}
	return o.RelativeTransform
}

// GetRelativeTransformOk returns a tuple with the RelativeTransform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetRelativeTransformOk() ([][]float32, bool) {
	if o == nil || IsNil(o.RelativeTransform) {
		return nil, false
	}
	return o.RelativeTransform, true
}

// HasRelativeTransform returns a boolean if a field has been set.
func (o *TableCellNode) HasRelativeTransform() bool {
	if o != nil && !IsNil(o.RelativeTransform) {
		return true
	}

	return false
}

// SetRelativeTransform gets a reference to the given [][]float32 and assigns it to the RelativeTransform field.
func (o *TableCellNode) SetRelativeTransform(v [][]float32) {
	o.RelativeTransform = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *TableCellNode) GetSize() Vector {
	if o == nil || IsNil(o.Size) {
		var ret Vector
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetSizeOk() (*Vector, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *TableCellNode) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given Vector and assigns it to the Size field.
func (o *TableCellNode) SetSize(v Vector) {
	o.Size = &v
}

// GetLayoutAlign returns the LayoutAlign field value if set, zero value otherwise.
func (o *TableCellNode) GetLayoutAlign() string {
	if o == nil || IsNil(o.LayoutAlign) {
		var ret string
		return ret
	}
	return *o.LayoutAlign
}

// GetLayoutAlignOk returns a tuple with the LayoutAlign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetLayoutAlignOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutAlign) {
		return nil, false
	}
	return o.LayoutAlign, true
}

// HasLayoutAlign returns a boolean if a field has been set.
func (o *TableCellNode) HasLayoutAlign() bool {
	if o != nil && !IsNil(o.LayoutAlign) {
		return true
	}

	return false
}

// SetLayoutAlign gets a reference to the given string and assigns it to the LayoutAlign field.
func (o *TableCellNode) SetLayoutAlign(v string) {
	o.LayoutAlign = &v
}

// GetLayoutGrow returns the LayoutGrow field value if set, zero value otherwise.
func (o *TableCellNode) GetLayoutGrow() float32 {
	if o == nil || IsNil(o.LayoutGrow) {
		var ret float32
		return ret
	}
	return *o.LayoutGrow
}

// GetLayoutGrowOk returns a tuple with the LayoutGrow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetLayoutGrowOk() (*float32, bool) {
	if o == nil || IsNil(o.LayoutGrow) {
		return nil, false
	}
	return o.LayoutGrow, true
}

// HasLayoutGrow returns a boolean if a field has been set.
func (o *TableCellNode) HasLayoutGrow() bool {
	if o != nil && !IsNil(o.LayoutGrow) {
		return true
	}

	return false
}

// SetLayoutGrow gets a reference to the given float32 and assigns it to the LayoutGrow field.
func (o *TableCellNode) SetLayoutGrow(v float32) {
	o.LayoutGrow = &v
}

// GetLayoutPositioning returns the LayoutPositioning field value if set, zero value otherwise.
func (o *TableCellNode) GetLayoutPositioning() string {
	if o == nil || IsNil(o.LayoutPositioning) {
		var ret string
		return ret
	}
	return *o.LayoutPositioning
}

// GetLayoutPositioningOk returns a tuple with the LayoutPositioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetLayoutPositioningOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutPositioning) {
		return nil, false
	}
	return o.LayoutPositioning, true
}

// HasLayoutPositioning returns a boolean if a field has been set.
func (o *TableCellNode) HasLayoutPositioning() bool {
	if o != nil && !IsNil(o.LayoutPositioning) {
		return true
	}

	return false
}

// SetLayoutPositioning gets a reference to the given string and assigns it to the LayoutPositioning field.
func (o *TableCellNode) SetLayoutPositioning(v string) {
	o.LayoutPositioning = &v
}

// GetMinWidth returns the MinWidth field value if set, zero value otherwise.
func (o *TableCellNode) GetMinWidth() float32 {
	if o == nil || IsNil(o.MinWidth) {
		var ret float32
		return ret
	}
	return *o.MinWidth
}

// GetMinWidthOk returns a tuple with the MinWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetMinWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.MinWidth) {
		return nil, false
	}
	return o.MinWidth, true
}

// HasMinWidth returns a boolean if a field has been set.
func (o *TableCellNode) HasMinWidth() bool {
	if o != nil && !IsNil(o.MinWidth) {
		return true
	}

	return false
}

// SetMinWidth gets a reference to the given float32 and assigns it to the MinWidth field.
func (o *TableCellNode) SetMinWidth(v float32) {
	o.MinWidth = &v
}

// GetMaxWidth returns the MaxWidth field value if set, zero value otherwise.
func (o *TableCellNode) GetMaxWidth() float32 {
	if o == nil || IsNil(o.MaxWidth) {
		var ret float32
		return ret
	}
	return *o.MaxWidth
}

// GetMaxWidthOk returns a tuple with the MaxWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetMaxWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxWidth) {
		return nil, false
	}
	return o.MaxWidth, true
}

// HasMaxWidth returns a boolean if a field has been set.
func (o *TableCellNode) HasMaxWidth() bool {
	if o != nil && !IsNil(o.MaxWidth) {
		return true
	}

	return false
}

// SetMaxWidth gets a reference to the given float32 and assigns it to the MaxWidth field.
func (o *TableCellNode) SetMaxWidth(v float32) {
	o.MaxWidth = &v
}

// GetMinHeight returns the MinHeight field value if set, zero value otherwise.
func (o *TableCellNode) GetMinHeight() float32 {
	if o == nil || IsNil(o.MinHeight) {
		var ret float32
		return ret
	}
	return *o.MinHeight
}

// GetMinHeightOk returns a tuple with the MinHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetMinHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.MinHeight) {
		return nil, false
	}
	return o.MinHeight, true
}

// HasMinHeight returns a boolean if a field has been set.
func (o *TableCellNode) HasMinHeight() bool {
	if o != nil && !IsNil(o.MinHeight) {
		return true
	}

	return false
}

// SetMinHeight gets a reference to the given float32 and assigns it to the MinHeight field.
func (o *TableCellNode) SetMinHeight(v float32) {
	o.MinHeight = &v
}

// GetMaxHeight returns the MaxHeight field value if set, zero value otherwise.
func (o *TableCellNode) GetMaxHeight() float32 {
	if o == nil || IsNil(o.MaxHeight) {
		var ret float32
		return ret
	}
	return *o.MaxHeight
}

// GetMaxHeightOk returns a tuple with the MaxHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetMaxHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxHeight) {
		return nil, false
	}
	return o.MaxHeight, true
}

// HasMaxHeight returns a boolean if a field has been set.
func (o *TableCellNode) HasMaxHeight() bool {
	if o != nil && !IsNil(o.MaxHeight) {
		return true
	}

	return false
}

// SetMaxHeight gets a reference to the given float32 and assigns it to the MaxHeight field.
func (o *TableCellNode) SetMaxHeight(v float32) {
	o.MaxHeight = &v
}

// GetLayoutSizingHorizontal returns the LayoutSizingHorizontal field value if set, zero value otherwise.
func (o *TableCellNode) GetLayoutSizingHorizontal() string {
	if o == nil || IsNil(o.LayoutSizingHorizontal) {
		var ret string
		return ret
	}
	return *o.LayoutSizingHorizontal
}

// GetLayoutSizingHorizontalOk returns a tuple with the LayoutSizingHorizontal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetLayoutSizingHorizontalOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutSizingHorizontal) {
		return nil, false
	}
	return o.LayoutSizingHorizontal, true
}

// HasLayoutSizingHorizontal returns a boolean if a field has been set.
func (o *TableCellNode) HasLayoutSizingHorizontal() bool {
	if o != nil && !IsNil(o.LayoutSizingHorizontal) {
		return true
	}

	return false
}

// SetLayoutSizingHorizontal gets a reference to the given string and assigns it to the LayoutSizingHorizontal field.
func (o *TableCellNode) SetLayoutSizingHorizontal(v string) {
	o.LayoutSizingHorizontal = &v
}

// GetLayoutSizingVertical returns the LayoutSizingVertical field value if set, zero value otherwise.
func (o *TableCellNode) GetLayoutSizingVertical() string {
	if o == nil || IsNil(o.LayoutSizingVertical) {
		var ret string
		return ret
	}
	return *o.LayoutSizingVertical
}

// GetLayoutSizingVerticalOk returns a tuple with the LayoutSizingVertical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetLayoutSizingVerticalOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutSizingVertical) {
		return nil, false
	}
	return o.LayoutSizingVertical, true
}

// HasLayoutSizingVertical returns a boolean if a field has been set.
func (o *TableCellNode) HasLayoutSizingVertical() bool {
	if o != nil && !IsNil(o.LayoutSizingVertical) {
		return true
	}

	return false
}

// SetLayoutSizingVertical gets a reference to the given string and assigns it to the LayoutSizingVertical field.
func (o *TableCellNode) SetLayoutSizingVertical(v string) {
	o.LayoutSizingVertical = &v
}

// GetCharacters returns the Characters field value
func (o *TableCellNode) GetCharacters() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Characters
}

// GetCharactersOk returns a tuple with the Characters field value
// and a boolean to check if the value has been set.
func (o *TableCellNode) GetCharactersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Characters, true
}

// SetCharacters sets field value
func (o *TableCellNode) SetCharacters(v string) {
	o.Characters = v
}

func (o TableCellNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableCellNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.IsFixed) {
		toSerialize["isFixed"] = o.IsFixed
	}
	toSerialize["scrollBehavior"] = o.ScrollBehavior
	if !IsNil(o.Rotation) {
		toSerialize["rotation"] = o.Rotation
	}
	if !IsNil(o.ComponentPropertyReferences) {
		toSerialize["componentPropertyReferences"] = o.ComponentPropertyReferences
	}
	if o.PluginData != nil {
		toSerialize["pluginData"] = o.PluginData
	}
	if o.SharedPluginData != nil {
		toSerialize["sharedPluginData"] = o.SharedPluginData
	}
	if !IsNil(o.BoundVariables) {
		toSerialize["boundVariables"] = o.BoundVariables
	}
	if !IsNil(o.ExplicitVariableModes) {
		toSerialize["explicitVariableModes"] = o.ExplicitVariableModes
	}
	toSerialize["fills"] = o.Fills
	if !IsNil(o.Styles) {
		toSerialize["styles"] = o.Styles
	}
	toSerialize["absoluteBoundingBox"] = o.AbsoluteBoundingBox
	toSerialize["absoluteRenderBounds"] = o.AbsoluteRenderBounds
	if !IsNil(o.PreserveRatio) {
		toSerialize["preserveRatio"] = o.PreserveRatio
	}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.RelativeTransform) {
		toSerialize["relativeTransform"] = o.RelativeTransform
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.LayoutAlign) {
		toSerialize["layoutAlign"] = o.LayoutAlign
	}
	if !IsNil(o.LayoutGrow) {
		toSerialize["layoutGrow"] = o.LayoutGrow
	}
	if !IsNil(o.LayoutPositioning) {
		toSerialize["layoutPositioning"] = o.LayoutPositioning
	}
	if !IsNil(o.MinWidth) {
		toSerialize["minWidth"] = o.MinWidth
	}
	if !IsNil(o.MaxWidth) {
		toSerialize["maxWidth"] = o.MaxWidth
	}
	if !IsNil(o.MinHeight) {
		toSerialize["minHeight"] = o.MinHeight
	}
	if !IsNil(o.MaxHeight) {
		toSerialize["maxHeight"] = o.MaxHeight
	}
	if !IsNil(o.LayoutSizingHorizontal) {
		toSerialize["layoutSizingHorizontal"] = o.LayoutSizingHorizontal
	}
	if !IsNil(o.LayoutSizingVertical) {
		toSerialize["layoutSizingVertical"] = o.LayoutSizingVertical
	}
	toSerialize["characters"] = o.Characters
	return toSerialize, nil
}

func (o *TableCellNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"type",
		"scrollBehavior",
		"fills",
		"absoluteBoundingBox",
		"absoluteRenderBounds",
		"characters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTableCellNode := _TableCellNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTableCellNode)

	if err != nil {
		return err
	}

	*o = TableCellNode(varTableCellNode)

	return err
}

type NullableTableCellNode struct {
	value *TableCellNode
	isSet bool
}

func (v NullableTableCellNode) Get() *TableCellNode {
	return v.value
}

func (v *NullableTableCellNode) Set(val *TableCellNode) {
	v.value = val
	v.isSet = true
}

func (v NullableTableCellNode) IsSet() bool {
	return v.isSet
}

func (v *NullableTableCellNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableCellNode(val *TableCellNode) *NullableTableCellNode {
	return &NullableTableCellNode{value: val, isSet: true}
}

func (v NullableTableCellNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableCellNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



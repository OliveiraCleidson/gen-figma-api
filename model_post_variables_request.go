/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PostVariablesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostVariablesRequest{}

// PostVariablesRequest struct for PostVariablesRequest
type PostVariablesRequest struct {
	// For creating, updating, and deleting variable collections.
	VariableCollections []VariableCollectionChange `json:"variableCollections,omitempty"`
	// For creating, updating, and deleting modes within variable collections.
	VariableModes []VariableModeChange `json:"variableModes,omitempty"`
	// For creating, updating, and deleting variables.
	Variables []VariableChange `json:"variables,omitempty"`
	// For setting a specific value, given a variable and a mode.
	VariableModeValues []VariableModeValue `json:"variableModeValues,omitempty"`
}

// NewPostVariablesRequest instantiates a new PostVariablesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostVariablesRequest() *PostVariablesRequest {
	this := PostVariablesRequest{}
	return &this
}

// NewPostVariablesRequestWithDefaults instantiates a new PostVariablesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostVariablesRequestWithDefaults() *PostVariablesRequest {
	this := PostVariablesRequest{}
	return &this
}

// GetVariableCollections returns the VariableCollections field value if set, zero value otherwise.
func (o *PostVariablesRequest) GetVariableCollections() []VariableCollectionChange {
	if o == nil || IsNil(o.VariableCollections) {
		var ret []VariableCollectionChange
		return ret
	}
	return o.VariableCollections
}

// GetVariableCollectionsOk returns a tuple with the VariableCollections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostVariablesRequest) GetVariableCollectionsOk() ([]VariableCollectionChange, bool) {
	if o == nil || IsNil(o.VariableCollections) {
		return nil, false
	}
	return o.VariableCollections, true
}

// HasVariableCollections returns a boolean if a field has been set.
func (o *PostVariablesRequest) HasVariableCollections() bool {
	if o != nil && !IsNil(o.VariableCollections) {
		return true
	}

	return false
}

// SetVariableCollections gets a reference to the given []VariableCollectionChange and assigns it to the VariableCollections field.
func (o *PostVariablesRequest) SetVariableCollections(v []VariableCollectionChange) {
	o.VariableCollections = v
}

// GetVariableModes returns the VariableModes field value if set, zero value otherwise.
func (o *PostVariablesRequest) GetVariableModes() []VariableModeChange {
	if o == nil || IsNil(o.VariableModes) {
		var ret []VariableModeChange
		return ret
	}
	return o.VariableModes
}

// GetVariableModesOk returns a tuple with the VariableModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostVariablesRequest) GetVariableModesOk() ([]VariableModeChange, bool) {
	if o == nil || IsNil(o.VariableModes) {
		return nil, false
	}
	return o.VariableModes, true
}

// HasVariableModes returns a boolean if a field has been set.
func (o *PostVariablesRequest) HasVariableModes() bool {
	if o != nil && !IsNil(o.VariableModes) {
		return true
	}

	return false
}

// SetVariableModes gets a reference to the given []VariableModeChange and assigns it to the VariableModes field.
func (o *PostVariablesRequest) SetVariableModes(v []VariableModeChange) {
	o.VariableModes = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *PostVariablesRequest) GetVariables() []VariableChange {
	if o == nil || IsNil(o.Variables) {
		var ret []VariableChange
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostVariablesRequest) GetVariablesOk() ([]VariableChange, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *PostVariablesRequest) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []VariableChange and assigns it to the Variables field.
func (o *PostVariablesRequest) SetVariables(v []VariableChange) {
	o.Variables = v
}

// GetVariableModeValues returns the VariableModeValues field value if set, zero value otherwise.
func (o *PostVariablesRequest) GetVariableModeValues() []VariableModeValue {
	if o == nil || IsNil(o.VariableModeValues) {
		var ret []VariableModeValue
		return ret
	}
	return o.VariableModeValues
}

// GetVariableModeValuesOk returns a tuple with the VariableModeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostVariablesRequest) GetVariableModeValuesOk() ([]VariableModeValue, bool) {
	if o == nil || IsNil(o.VariableModeValues) {
		return nil, false
	}
	return o.VariableModeValues, true
}

// HasVariableModeValues returns a boolean if a field has been set.
func (o *PostVariablesRequest) HasVariableModeValues() bool {
	if o != nil && !IsNil(o.VariableModeValues) {
		return true
	}

	return false
}

// SetVariableModeValues gets a reference to the given []VariableModeValue and assigns it to the VariableModeValues field.
func (o *PostVariablesRequest) SetVariableModeValues(v []VariableModeValue) {
	o.VariableModeValues = v
}

func (o PostVariablesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostVariablesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VariableCollections) {
		toSerialize["variableCollections"] = o.VariableCollections
	}
	if !IsNil(o.VariableModes) {
		toSerialize["variableModes"] = o.VariableModes
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.VariableModeValues) {
		toSerialize["variableModeValues"] = o.VariableModeValues
	}
	return toSerialize, nil
}

type NullablePostVariablesRequest struct {
	value *PostVariablesRequest
	isSet bool
}

func (v NullablePostVariablesRequest) Get() *PostVariablesRequest {
	return v.value
}

func (v *NullablePostVariablesRequest) Set(val *PostVariablesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostVariablesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostVariablesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostVariablesRequest(val *PostVariablesRequest) *NullablePostVariablesRequest {
	return &NullablePostVariablesRequest{value: val, isSet: true}
}

func (v NullablePostVariablesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostVariablesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



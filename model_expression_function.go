/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExpressionFunction Defines the list of operators available to use in an Expression.
type ExpressionFunction string

// List of ExpressionFunction
const (
	ADDITION ExpressionFunction = "ADDITION"
	SUBTRACTION ExpressionFunction = "SUBTRACTION"
	MULTIPLICATION ExpressionFunction = "MULTIPLICATION"
	DIVISION ExpressionFunction = "DIVISION"
	EQUALS ExpressionFunction = "EQUALS"
	NOT_EQUAL ExpressionFunction = "NOT_EQUAL"
	LESS_THAN ExpressionFunction = "LESS_THAN"
	LESS_THAN_OR_EQUAL ExpressionFunction = "LESS_THAN_OR_EQUAL"
	GREATER_THAN ExpressionFunction = "GREATER_THAN"
	GREATER_THAN_OR_EQUAL ExpressionFunction = "GREATER_THAN_OR_EQUAL"
	AND ExpressionFunction = "AND"
	OR ExpressionFunction = "OR"
	VAR_MODE_LOOKUP ExpressionFunction = "VAR_MODE_LOOKUP"
	NEGATE ExpressionFunction = "NEGATE"
	NOT ExpressionFunction = "NOT"
)

// All allowed values of ExpressionFunction enum
var AllowedExpressionFunctionEnumValues = []ExpressionFunction{
	"ADDITION",
	"SUBTRACTION",
	"MULTIPLICATION",
	"DIVISION",
	"EQUALS",
	"NOT_EQUAL",
	"LESS_THAN",
	"LESS_THAN_OR_EQUAL",
	"GREATER_THAN",
	"GREATER_THAN_OR_EQUAL",
	"AND",
	"OR",
	"VAR_MODE_LOOKUP",
	"NEGATE",
	"NOT",
}

func (v *ExpressionFunction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExpressionFunction(value)
	for _, existing := range AllowedExpressionFunctionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExpressionFunction", value)
}

// NewExpressionFunctionFromValue returns a pointer to a valid ExpressionFunction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExpressionFunctionFromValue(v string) (*ExpressionFunction, error) {
	ev := ExpressionFunction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExpressionFunction: valid values are %v", v, AllowedExpressionFunctionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExpressionFunction) IsValid() bool {
	for _, existing := range AllowedExpressionFunctionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExpressionFunction value
func (v ExpressionFunction) Ptr() *ExpressionFunction {
	return &v
}

type NullableExpressionFunction struct {
	value *ExpressionFunction
	isSet bool
}

func (v NullableExpressionFunction) Get() *ExpressionFunction {
	return v.value
}

func (v *NullableExpressionFunction) Set(val *ExpressionFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableExpressionFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableExpressionFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpressionFunction(val *ExpressionFunction) *NullableExpressionFunction {
	return &NullableExpressionFunction{value: val, isSet: true}
}

func (v NullableExpressionFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpressionFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConditionalBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionalBlock{}

// ConditionalBlock Either the if or else conditional blocks. The if block contains a condition to check. If that condition is met then it will run those list of actions, else it will run the actions in the else block.
type ConditionalBlock struct {
	Condition *VariableData `json:"condition,omitempty"`
	Actions []Action `json:"actions"`
}

type _ConditionalBlock ConditionalBlock

// NewConditionalBlock instantiates a new ConditionalBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionalBlock(actions []Action) *ConditionalBlock {
	this := ConditionalBlock{}
	this.Actions = actions
	return &this
}

// NewConditionalBlockWithDefaults instantiates a new ConditionalBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionalBlockWithDefaults() *ConditionalBlock {
	this := ConditionalBlock{}
	return &this
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ConditionalBlock) GetCondition() VariableData {
	if o == nil || IsNil(o.Condition) {
		var ret VariableData
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalBlock) GetConditionOk() (*VariableData, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ConditionalBlock) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given VariableData and assigns it to the Condition field.
func (o *ConditionalBlock) SetCondition(v VariableData) {
	o.Condition = &v
}

// GetActions returns the Actions field value
func (o *ConditionalBlock) GetActions() []Action {
	if o == nil {
		var ret []Action
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *ConditionalBlock) GetActionsOk() ([]Action, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *ConditionalBlock) SetActions(v []Action) {
	o.Actions = v
}

func (o ConditionalBlock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionalBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	toSerialize["actions"] = o.Actions
	return toSerialize, nil
}

func (o *ConditionalBlock) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConditionalBlock := _ConditionalBlock{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConditionalBlock)

	if err != nil {
		return err
	}

	*o = ConditionalBlock(varConditionalBlock)

	return err
}

type NullableConditionalBlock struct {
	value *ConditionalBlock
	isSet bool
}

func (v NullableConditionalBlock) Get() *ConditionalBlock {
	return v.value
}

func (v *NullableConditionalBlock) Set(val *ConditionalBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionalBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionalBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionalBlock(val *ConditionalBlock) *NullableConditionalBlock {
	return &NullableConditionalBlock{value: val, isSet: true}
}

func (v NullableConditionalBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionalBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



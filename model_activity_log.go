/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActivityLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityLog{}

// ActivityLog An event returned by the Activity Logs API.
type ActivityLog struct {
	// The ID of the event.
	Id string `json:"id"`
	// The timestamp of the event in seconds since the Unix epoch.
	Timestamp float32 `json:"timestamp"`
	Actor ActivityLogActor `json:"actor"`
	Action ActivityLogAction `json:"action"`
	Entity ActivityLogEntity `json:"entity"`
	Context ActivityLogContext `json:"context"`
}

type _ActivityLog ActivityLog

// NewActivityLog instantiates a new ActivityLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityLog(id string, timestamp float32, actor ActivityLogActor, action ActivityLogAction, entity ActivityLogEntity, context ActivityLogContext) *ActivityLog {
	this := ActivityLog{}
	this.Id = id
	this.Timestamp = timestamp
	this.Actor = actor
	this.Action = action
	this.Entity = entity
	this.Context = context
	return &this
}

// NewActivityLogWithDefaults instantiates a new ActivityLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityLogWithDefaults() *ActivityLog {
	this := ActivityLog{}
	return &this
}

// GetId returns the Id field value
func (o *ActivityLog) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActivityLog) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActivityLog) SetId(v string) {
	o.Id = v
}

// GetTimestamp returns the Timestamp field value
func (o *ActivityLog) GetTimestamp() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ActivityLog) GetTimestampOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ActivityLog) SetTimestamp(v float32) {
	o.Timestamp = v
}

// GetActor returns the Actor field value
func (o *ActivityLog) GetActor() ActivityLogActor {
	if o == nil {
		var ret ActivityLogActor
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *ActivityLog) GetActorOk() (*ActivityLogActor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *ActivityLog) SetActor(v ActivityLogActor) {
	o.Actor = v
}

// GetAction returns the Action field value
func (o *ActivityLog) GetAction() ActivityLogAction {
	if o == nil {
		var ret ActivityLogAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ActivityLog) GetActionOk() (*ActivityLogAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ActivityLog) SetAction(v ActivityLogAction) {
	o.Action = v
}

// GetEntity returns the Entity field value
func (o *ActivityLog) GetEntity() ActivityLogEntity {
	if o == nil {
		var ret ActivityLogEntity
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *ActivityLog) GetEntityOk() (*ActivityLogEntity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *ActivityLog) SetEntity(v ActivityLogEntity) {
	o.Entity = v
}

// GetContext returns the Context field value
func (o *ActivityLog) GetContext() ActivityLogContext {
	if o == nil {
		var ret ActivityLogContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *ActivityLog) GetContextOk() (*ActivityLogContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *ActivityLog) SetContext(v ActivityLogContext) {
	o.Context = v
}

func (o ActivityLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["actor"] = o.Actor
	toSerialize["action"] = o.Action
	toSerialize["entity"] = o.Entity
	toSerialize["context"] = o.Context
	return toSerialize, nil
}

func (o *ActivityLog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"timestamp",
		"actor",
		"action",
		"entity",
		"context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivityLog := _ActivityLog{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivityLog)

	if err != nil {
		return err
	}

	*o = ActivityLog(varActivityLog)

	return err
}

type NullableActivityLog struct {
	value *ActivityLog
	isSet bool
}

func (v NullableActivityLog) Get() *ActivityLog {
	return v.value
}

func (v *NullableActivityLog) Set(val *ActivityLog) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityLog) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityLog(val *ActivityLog) *NullableActivityLog {
	return &NullableActivityLog{value: val, isSet: true}
}

func (v NullableActivityLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



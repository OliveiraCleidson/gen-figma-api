/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VariableData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableData{}

// VariableData A value to set a variable to during prototyping.
type VariableData struct {
	Type *VariableDataType `json:"type,omitempty"`
	ResolvedType *VariableResolvedDataType `json:"resolvedType,omitempty"`
	Value *VariableDataValue `json:"value,omitempty"`
}

// NewVariableData instantiates a new VariableData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableData() *VariableData {
	this := VariableData{}
	return &this
}

// NewVariableDataWithDefaults instantiates a new VariableData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableDataWithDefaults() *VariableData {
	this := VariableData{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VariableData) GetType() VariableDataType {
	if o == nil || IsNil(o.Type) {
		var ret VariableDataType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableData) GetTypeOk() (*VariableDataType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VariableData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given VariableDataType and assigns it to the Type field.
func (o *VariableData) SetType(v VariableDataType) {
	o.Type = &v
}

// GetResolvedType returns the ResolvedType field value if set, zero value otherwise.
func (o *VariableData) GetResolvedType() VariableResolvedDataType {
	if o == nil || IsNil(o.ResolvedType) {
		var ret VariableResolvedDataType
		return ret
	}
	return *o.ResolvedType
}

// GetResolvedTypeOk returns a tuple with the ResolvedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableData) GetResolvedTypeOk() (*VariableResolvedDataType, bool) {
	if o == nil || IsNil(o.ResolvedType) {
		return nil, false
	}
	return o.ResolvedType, true
}

// HasResolvedType returns a boolean if a field has been set.
func (o *VariableData) HasResolvedType() bool {
	if o != nil && !IsNil(o.ResolvedType) {
		return true
	}

	return false
}

// SetResolvedType gets a reference to the given VariableResolvedDataType and assigns it to the ResolvedType field.
func (o *VariableData) SetResolvedType(v VariableResolvedDataType) {
	o.ResolvedType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VariableData) GetValue() VariableDataValue {
	if o == nil || IsNil(o.Value) {
		var ret VariableDataValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableData) GetValueOk() (*VariableDataValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VariableData) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given VariableDataValue and assigns it to the Value field.
func (o *VariableData) SetValue(v VariableDataValue) {
	o.Value = &v
}

func (o VariableData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ResolvedType) {
		toSerialize["resolvedType"] = o.ResolvedType
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableVariableData struct {
	value *VariableData
	isSet bool
}

func (v NullableVariableData) Get() *VariableData {
	return v.value
}

func (v *NullableVariableData) Set(val *VariableData) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableData) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableData(val *VariableData) *NullableVariableData {
	return &NullableVariableData{value: val, isSet: true}
}

func (v NullableVariableData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// SubcanvasNode - struct for SubcanvasNode
type SubcanvasNode struct {
	BooleanOperationNode *BooleanOperationNode
	ComponentNode *ComponentNode
	ComponentSetNode *ComponentSetNode
	ConnectorNode *ConnectorNode
	EllipseNode *EllipseNode
	EmbedNode *EmbedNode
	FrameNode *FrameNode
	GroupNode *GroupNode
	InstanceNode *InstanceNode
	LineNode *LineNode
	LinkUnfurlNode *LinkUnfurlNode
	RectangleNode *RectangleNode
	RegularPolygonNode *RegularPolygonNode
	SectionNode *SectionNode
	ShapeWithTextNode *ShapeWithTextNode
	SliceNode *SliceNode
	StarNode *StarNode
	StickyNode *StickyNode
	TableCellNode *TableCellNode
	TableNode *TableNode
	TextNode *TextNode
	VectorNode *VectorNode
	WashiTapeNode *WashiTapeNode
	WidgetNode *WidgetNode
}

// BooleanOperationNodeAsSubcanvasNode is a convenience function that returns BooleanOperationNode wrapped in SubcanvasNode
func BooleanOperationNodeAsSubcanvasNode(v *BooleanOperationNode) SubcanvasNode {
	return SubcanvasNode{
		BooleanOperationNode: v,
	}
}

// ComponentNodeAsSubcanvasNode is a convenience function that returns ComponentNode wrapped in SubcanvasNode
func ComponentNodeAsSubcanvasNode(v *ComponentNode) SubcanvasNode {
	return SubcanvasNode{
		ComponentNode: v,
	}
}

// ComponentSetNodeAsSubcanvasNode is a convenience function that returns ComponentSetNode wrapped in SubcanvasNode
func ComponentSetNodeAsSubcanvasNode(v *ComponentSetNode) SubcanvasNode {
	return SubcanvasNode{
		ComponentSetNode: v,
	}
}

// ConnectorNodeAsSubcanvasNode is a convenience function that returns ConnectorNode wrapped in SubcanvasNode
func ConnectorNodeAsSubcanvasNode(v *ConnectorNode) SubcanvasNode {
	return SubcanvasNode{
		ConnectorNode: v,
	}
}

// EllipseNodeAsSubcanvasNode is a convenience function that returns EllipseNode wrapped in SubcanvasNode
func EllipseNodeAsSubcanvasNode(v *EllipseNode) SubcanvasNode {
	return SubcanvasNode{
		EllipseNode: v,
	}
}

// EmbedNodeAsSubcanvasNode is a convenience function that returns EmbedNode wrapped in SubcanvasNode
func EmbedNodeAsSubcanvasNode(v *EmbedNode) SubcanvasNode {
	return SubcanvasNode{
		EmbedNode: v,
	}
}

// FrameNodeAsSubcanvasNode is a convenience function that returns FrameNode wrapped in SubcanvasNode
func FrameNodeAsSubcanvasNode(v *FrameNode) SubcanvasNode {
	return SubcanvasNode{
		FrameNode: v,
	}
}

// GroupNodeAsSubcanvasNode is a convenience function that returns GroupNode wrapped in SubcanvasNode
func GroupNodeAsSubcanvasNode(v *GroupNode) SubcanvasNode {
	return SubcanvasNode{
		GroupNode: v,
	}
}

// InstanceNodeAsSubcanvasNode is a convenience function that returns InstanceNode wrapped in SubcanvasNode
func InstanceNodeAsSubcanvasNode(v *InstanceNode) SubcanvasNode {
	return SubcanvasNode{
		InstanceNode: v,
	}
}

// LineNodeAsSubcanvasNode is a convenience function that returns LineNode wrapped in SubcanvasNode
func LineNodeAsSubcanvasNode(v *LineNode) SubcanvasNode {
	return SubcanvasNode{
		LineNode: v,
	}
}

// LinkUnfurlNodeAsSubcanvasNode is a convenience function that returns LinkUnfurlNode wrapped in SubcanvasNode
func LinkUnfurlNodeAsSubcanvasNode(v *LinkUnfurlNode) SubcanvasNode {
	return SubcanvasNode{
		LinkUnfurlNode: v,
	}
}

// RectangleNodeAsSubcanvasNode is a convenience function that returns RectangleNode wrapped in SubcanvasNode
func RectangleNodeAsSubcanvasNode(v *RectangleNode) SubcanvasNode {
	return SubcanvasNode{
		RectangleNode: v,
	}
}

// RegularPolygonNodeAsSubcanvasNode is a convenience function that returns RegularPolygonNode wrapped in SubcanvasNode
func RegularPolygonNodeAsSubcanvasNode(v *RegularPolygonNode) SubcanvasNode {
	return SubcanvasNode{
		RegularPolygonNode: v,
	}
}

// SectionNodeAsSubcanvasNode is a convenience function that returns SectionNode wrapped in SubcanvasNode
func SectionNodeAsSubcanvasNode(v *SectionNode) SubcanvasNode {
	return SubcanvasNode{
		SectionNode: v,
	}
}

// ShapeWithTextNodeAsSubcanvasNode is a convenience function that returns ShapeWithTextNode wrapped in SubcanvasNode
func ShapeWithTextNodeAsSubcanvasNode(v *ShapeWithTextNode) SubcanvasNode {
	return SubcanvasNode{
		ShapeWithTextNode: v,
	}
}

// SliceNodeAsSubcanvasNode is a convenience function that returns SliceNode wrapped in SubcanvasNode
func SliceNodeAsSubcanvasNode(v *SliceNode) SubcanvasNode {
	return SubcanvasNode{
		SliceNode: v,
	}
}

// StarNodeAsSubcanvasNode is a convenience function that returns StarNode wrapped in SubcanvasNode
func StarNodeAsSubcanvasNode(v *StarNode) SubcanvasNode {
	return SubcanvasNode{
		StarNode: v,
	}
}

// StickyNodeAsSubcanvasNode is a convenience function that returns StickyNode wrapped in SubcanvasNode
func StickyNodeAsSubcanvasNode(v *StickyNode) SubcanvasNode {
	return SubcanvasNode{
		StickyNode: v,
	}
}

// TableCellNodeAsSubcanvasNode is a convenience function that returns TableCellNode wrapped in SubcanvasNode
func TableCellNodeAsSubcanvasNode(v *TableCellNode) SubcanvasNode {
	return SubcanvasNode{
		TableCellNode: v,
	}
}

// TableNodeAsSubcanvasNode is a convenience function that returns TableNode wrapped in SubcanvasNode
func TableNodeAsSubcanvasNode(v *TableNode) SubcanvasNode {
	return SubcanvasNode{
		TableNode: v,
	}
}

// TextNodeAsSubcanvasNode is a convenience function that returns TextNode wrapped in SubcanvasNode
func TextNodeAsSubcanvasNode(v *TextNode) SubcanvasNode {
	return SubcanvasNode{
		TextNode: v,
	}
}

// VectorNodeAsSubcanvasNode is a convenience function that returns VectorNode wrapped in SubcanvasNode
func VectorNodeAsSubcanvasNode(v *VectorNode) SubcanvasNode {
	return SubcanvasNode{
		VectorNode: v,
	}
}

// WashiTapeNodeAsSubcanvasNode is a convenience function that returns WashiTapeNode wrapped in SubcanvasNode
func WashiTapeNodeAsSubcanvasNode(v *WashiTapeNode) SubcanvasNode {
	return SubcanvasNode{
		WashiTapeNode: v,
	}
}

// WidgetNodeAsSubcanvasNode is a convenience function that returns WidgetNode wrapped in SubcanvasNode
func WidgetNodeAsSubcanvasNode(v *WidgetNode) SubcanvasNode {
	return SubcanvasNode{
		WidgetNode: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubcanvasNode) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BooleanOperationNode
	err = newStrictDecoder(data).Decode(&dst.BooleanOperationNode)
	if err == nil {
		jsonBooleanOperationNode, _ := json.Marshal(dst.BooleanOperationNode)
		if string(jsonBooleanOperationNode) == "{}" { // empty struct
			dst.BooleanOperationNode = nil
		} else {
			if err = validator.Validate(dst.BooleanOperationNode); err != nil {
				dst.BooleanOperationNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.BooleanOperationNode = nil
	}

	// try to unmarshal data into ComponentNode
	err = newStrictDecoder(data).Decode(&dst.ComponentNode)
	if err == nil {
		jsonComponentNode, _ := json.Marshal(dst.ComponentNode)
		if string(jsonComponentNode) == "{}" { // empty struct
			dst.ComponentNode = nil
		} else {
			if err = validator.Validate(dst.ComponentNode); err != nil {
				dst.ComponentNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.ComponentNode = nil
	}

	// try to unmarshal data into ComponentSetNode
	err = newStrictDecoder(data).Decode(&dst.ComponentSetNode)
	if err == nil {
		jsonComponentSetNode, _ := json.Marshal(dst.ComponentSetNode)
		if string(jsonComponentSetNode) == "{}" { // empty struct
			dst.ComponentSetNode = nil
		} else {
			if err = validator.Validate(dst.ComponentSetNode); err != nil {
				dst.ComponentSetNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.ComponentSetNode = nil
	}

	// try to unmarshal data into ConnectorNode
	err = newStrictDecoder(data).Decode(&dst.ConnectorNode)
	if err == nil {
		jsonConnectorNode, _ := json.Marshal(dst.ConnectorNode)
		if string(jsonConnectorNode) == "{}" { // empty struct
			dst.ConnectorNode = nil
		} else {
			if err = validator.Validate(dst.ConnectorNode); err != nil {
				dst.ConnectorNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConnectorNode = nil
	}

	// try to unmarshal data into EllipseNode
	err = newStrictDecoder(data).Decode(&dst.EllipseNode)
	if err == nil {
		jsonEllipseNode, _ := json.Marshal(dst.EllipseNode)
		if string(jsonEllipseNode) == "{}" { // empty struct
			dst.EllipseNode = nil
		} else {
			if err = validator.Validate(dst.EllipseNode); err != nil {
				dst.EllipseNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.EllipseNode = nil
	}

	// try to unmarshal data into EmbedNode
	err = newStrictDecoder(data).Decode(&dst.EmbedNode)
	if err == nil {
		jsonEmbedNode, _ := json.Marshal(dst.EmbedNode)
		if string(jsonEmbedNode) == "{}" { // empty struct
			dst.EmbedNode = nil
		} else {
			if err = validator.Validate(dst.EmbedNode); err != nil {
				dst.EmbedNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmbedNode = nil
	}

	// try to unmarshal data into FrameNode
	err = newStrictDecoder(data).Decode(&dst.FrameNode)
	if err == nil {
		jsonFrameNode, _ := json.Marshal(dst.FrameNode)
		if string(jsonFrameNode) == "{}" { // empty struct
			dst.FrameNode = nil
		} else {
			if err = validator.Validate(dst.FrameNode); err != nil {
				dst.FrameNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.FrameNode = nil
	}

	// try to unmarshal data into GroupNode
	err = newStrictDecoder(data).Decode(&dst.GroupNode)
	if err == nil {
		jsonGroupNode, _ := json.Marshal(dst.GroupNode)
		if string(jsonGroupNode) == "{}" { // empty struct
			dst.GroupNode = nil
		} else {
			if err = validator.Validate(dst.GroupNode); err != nil {
				dst.GroupNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.GroupNode = nil
	}

	// try to unmarshal data into InstanceNode
	err = newStrictDecoder(data).Decode(&dst.InstanceNode)
	if err == nil {
		jsonInstanceNode, _ := json.Marshal(dst.InstanceNode)
		if string(jsonInstanceNode) == "{}" { // empty struct
			dst.InstanceNode = nil
		} else {
			if err = validator.Validate(dst.InstanceNode); err != nil {
				dst.InstanceNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.InstanceNode = nil
	}

	// try to unmarshal data into LineNode
	err = newStrictDecoder(data).Decode(&dst.LineNode)
	if err == nil {
		jsonLineNode, _ := json.Marshal(dst.LineNode)
		if string(jsonLineNode) == "{}" { // empty struct
			dst.LineNode = nil
		} else {
			if err = validator.Validate(dst.LineNode); err != nil {
				dst.LineNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.LineNode = nil
	}

	// try to unmarshal data into LinkUnfurlNode
	err = newStrictDecoder(data).Decode(&dst.LinkUnfurlNode)
	if err == nil {
		jsonLinkUnfurlNode, _ := json.Marshal(dst.LinkUnfurlNode)
		if string(jsonLinkUnfurlNode) == "{}" { // empty struct
			dst.LinkUnfurlNode = nil
		} else {
			if err = validator.Validate(dst.LinkUnfurlNode); err != nil {
				dst.LinkUnfurlNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.LinkUnfurlNode = nil
	}

	// try to unmarshal data into RectangleNode
	err = newStrictDecoder(data).Decode(&dst.RectangleNode)
	if err == nil {
		jsonRectangleNode, _ := json.Marshal(dst.RectangleNode)
		if string(jsonRectangleNode) == "{}" { // empty struct
			dst.RectangleNode = nil
		} else {
			if err = validator.Validate(dst.RectangleNode); err != nil {
				dst.RectangleNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.RectangleNode = nil
	}

	// try to unmarshal data into RegularPolygonNode
	err = newStrictDecoder(data).Decode(&dst.RegularPolygonNode)
	if err == nil {
		jsonRegularPolygonNode, _ := json.Marshal(dst.RegularPolygonNode)
		if string(jsonRegularPolygonNode) == "{}" { // empty struct
			dst.RegularPolygonNode = nil
		} else {
			if err = validator.Validate(dst.RegularPolygonNode); err != nil {
				dst.RegularPolygonNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.RegularPolygonNode = nil
	}

	// try to unmarshal data into SectionNode
	err = newStrictDecoder(data).Decode(&dst.SectionNode)
	if err == nil {
		jsonSectionNode, _ := json.Marshal(dst.SectionNode)
		if string(jsonSectionNode) == "{}" { // empty struct
			dst.SectionNode = nil
		} else {
			if err = validator.Validate(dst.SectionNode); err != nil {
				dst.SectionNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.SectionNode = nil
	}

	// try to unmarshal data into ShapeWithTextNode
	err = newStrictDecoder(data).Decode(&dst.ShapeWithTextNode)
	if err == nil {
		jsonShapeWithTextNode, _ := json.Marshal(dst.ShapeWithTextNode)
		if string(jsonShapeWithTextNode) == "{}" { // empty struct
			dst.ShapeWithTextNode = nil
		} else {
			if err = validator.Validate(dst.ShapeWithTextNode); err != nil {
				dst.ShapeWithTextNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.ShapeWithTextNode = nil
	}

	// try to unmarshal data into SliceNode
	err = newStrictDecoder(data).Decode(&dst.SliceNode)
	if err == nil {
		jsonSliceNode, _ := json.Marshal(dst.SliceNode)
		if string(jsonSliceNode) == "{}" { // empty struct
			dst.SliceNode = nil
		} else {
			if err = validator.Validate(dst.SliceNode); err != nil {
				dst.SliceNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.SliceNode = nil
	}

	// try to unmarshal data into StarNode
	err = newStrictDecoder(data).Decode(&dst.StarNode)
	if err == nil {
		jsonStarNode, _ := json.Marshal(dst.StarNode)
		if string(jsonStarNode) == "{}" { // empty struct
			dst.StarNode = nil
		} else {
			if err = validator.Validate(dst.StarNode); err != nil {
				dst.StarNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.StarNode = nil
	}

	// try to unmarshal data into StickyNode
	err = newStrictDecoder(data).Decode(&dst.StickyNode)
	if err == nil {
		jsonStickyNode, _ := json.Marshal(dst.StickyNode)
		if string(jsonStickyNode) == "{}" { // empty struct
			dst.StickyNode = nil
		} else {
			if err = validator.Validate(dst.StickyNode); err != nil {
				dst.StickyNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.StickyNode = nil
	}

	// try to unmarshal data into TableCellNode
	err = newStrictDecoder(data).Decode(&dst.TableCellNode)
	if err == nil {
		jsonTableCellNode, _ := json.Marshal(dst.TableCellNode)
		if string(jsonTableCellNode) == "{}" { // empty struct
			dst.TableCellNode = nil
		} else {
			if err = validator.Validate(dst.TableCellNode); err != nil {
				dst.TableCellNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.TableCellNode = nil
	}

	// try to unmarshal data into TableNode
	err = newStrictDecoder(data).Decode(&dst.TableNode)
	if err == nil {
		jsonTableNode, _ := json.Marshal(dst.TableNode)
		if string(jsonTableNode) == "{}" { // empty struct
			dst.TableNode = nil
		} else {
			if err = validator.Validate(dst.TableNode); err != nil {
				dst.TableNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.TableNode = nil
	}

	// try to unmarshal data into TextNode
	err = newStrictDecoder(data).Decode(&dst.TextNode)
	if err == nil {
		jsonTextNode, _ := json.Marshal(dst.TextNode)
		if string(jsonTextNode) == "{}" { // empty struct
			dst.TextNode = nil
		} else {
			if err = validator.Validate(dst.TextNode); err != nil {
				dst.TextNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextNode = nil
	}

	// try to unmarshal data into VectorNode
	err = newStrictDecoder(data).Decode(&dst.VectorNode)
	if err == nil {
		jsonVectorNode, _ := json.Marshal(dst.VectorNode)
		if string(jsonVectorNode) == "{}" { // empty struct
			dst.VectorNode = nil
		} else {
			if err = validator.Validate(dst.VectorNode); err != nil {
				dst.VectorNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.VectorNode = nil
	}

	// try to unmarshal data into WashiTapeNode
	err = newStrictDecoder(data).Decode(&dst.WashiTapeNode)
	if err == nil {
		jsonWashiTapeNode, _ := json.Marshal(dst.WashiTapeNode)
		if string(jsonWashiTapeNode) == "{}" { // empty struct
			dst.WashiTapeNode = nil
		} else {
			if err = validator.Validate(dst.WashiTapeNode); err != nil {
				dst.WashiTapeNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.WashiTapeNode = nil
	}

	// try to unmarshal data into WidgetNode
	err = newStrictDecoder(data).Decode(&dst.WidgetNode)
	if err == nil {
		jsonWidgetNode, _ := json.Marshal(dst.WidgetNode)
		if string(jsonWidgetNode) == "{}" { // empty struct
			dst.WidgetNode = nil
		} else {
			if err = validator.Validate(dst.WidgetNode); err != nil {
				dst.WidgetNode = nil
			} else {
				match++
			}
		}
	} else {
		dst.WidgetNode = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BooleanOperationNode = nil
		dst.ComponentNode = nil
		dst.ComponentSetNode = nil
		dst.ConnectorNode = nil
		dst.EllipseNode = nil
		dst.EmbedNode = nil
		dst.FrameNode = nil
		dst.GroupNode = nil
		dst.InstanceNode = nil
		dst.LineNode = nil
		dst.LinkUnfurlNode = nil
		dst.RectangleNode = nil
		dst.RegularPolygonNode = nil
		dst.SectionNode = nil
		dst.ShapeWithTextNode = nil
		dst.SliceNode = nil
		dst.StarNode = nil
		dst.StickyNode = nil
		dst.TableCellNode = nil
		dst.TableNode = nil
		dst.TextNode = nil
		dst.VectorNode = nil
		dst.WashiTapeNode = nil
		dst.WidgetNode = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SubcanvasNode)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SubcanvasNode)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubcanvasNode) MarshalJSON() ([]byte, error) {
	if src.BooleanOperationNode != nil {
		return json.Marshal(&src.BooleanOperationNode)
	}

	if src.ComponentNode != nil {
		return json.Marshal(&src.ComponentNode)
	}

	if src.ComponentSetNode != nil {
		return json.Marshal(&src.ComponentSetNode)
	}

	if src.ConnectorNode != nil {
		return json.Marshal(&src.ConnectorNode)
	}

	if src.EllipseNode != nil {
		return json.Marshal(&src.EllipseNode)
	}

	if src.EmbedNode != nil {
		return json.Marshal(&src.EmbedNode)
	}

	if src.FrameNode != nil {
		return json.Marshal(&src.FrameNode)
	}

	if src.GroupNode != nil {
		return json.Marshal(&src.GroupNode)
	}

	if src.InstanceNode != nil {
		return json.Marshal(&src.InstanceNode)
	}

	if src.LineNode != nil {
		return json.Marshal(&src.LineNode)
	}

	if src.LinkUnfurlNode != nil {
		return json.Marshal(&src.LinkUnfurlNode)
	}

	if src.RectangleNode != nil {
		return json.Marshal(&src.RectangleNode)
	}

	if src.RegularPolygonNode != nil {
		return json.Marshal(&src.RegularPolygonNode)
	}

	if src.SectionNode != nil {
		return json.Marshal(&src.SectionNode)
	}

	if src.ShapeWithTextNode != nil {
		return json.Marshal(&src.ShapeWithTextNode)
	}

	if src.SliceNode != nil {
		return json.Marshal(&src.SliceNode)
	}

	if src.StarNode != nil {
		return json.Marshal(&src.StarNode)
	}

	if src.StickyNode != nil {
		return json.Marshal(&src.StickyNode)
	}

	if src.TableCellNode != nil {
		return json.Marshal(&src.TableCellNode)
	}

	if src.TableNode != nil {
		return json.Marshal(&src.TableNode)
	}

	if src.TextNode != nil {
		return json.Marshal(&src.TextNode)
	}

	if src.VectorNode != nil {
		return json.Marshal(&src.VectorNode)
	}

	if src.WashiTapeNode != nil {
		return json.Marshal(&src.WashiTapeNode)
	}

	if src.WidgetNode != nil {
		return json.Marshal(&src.WidgetNode)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubcanvasNode) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BooleanOperationNode != nil {
		return obj.BooleanOperationNode
	}

	if obj.ComponentNode != nil {
		return obj.ComponentNode
	}

	if obj.ComponentSetNode != nil {
		return obj.ComponentSetNode
	}

	if obj.ConnectorNode != nil {
		return obj.ConnectorNode
	}

	if obj.EllipseNode != nil {
		return obj.EllipseNode
	}

	if obj.EmbedNode != nil {
		return obj.EmbedNode
	}

	if obj.FrameNode != nil {
		return obj.FrameNode
	}

	if obj.GroupNode != nil {
		return obj.GroupNode
	}

	if obj.InstanceNode != nil {
		return obj.InstanceNode
	}

	if obj.LineNode != nil {
		return obj.LineNode
	}

	if obj.LinkUnfurlNode != nil {
		return obj.LinkUnfurlNode
	}

	if obj.RectangleNode != nil {
		return obj.RectangleNode
	}

	if obj.RegularPolygonNode != nil {
		return obj.RegularPolygonNode
	}

	if obj.SectionNode != nil {
		return obj.SectionNode
	}

	if obj.ShapeWithTextNode != nil {
		return obj.ShapeWithTextNode
	}

	if obj.SliceNode != nil {
		return obj.SliceNode
	}

	if obj.StarNode != nil {
		return obj.StarNode
	}

	if obj.StickyNode != nil {
		return obj.StickyNode
	}

	if obj.TableCellNode != nil {
		return obj.TableCellNode
	}

	if obj.TableNode != nil {
		return obj.TableNode
	}

	if obj.TextNode != nil {
		return obj.TextNode
	}

	if obj.VectorNode != nil {
		return obj.VectorNode
	}

	if obj.WashiTapeNode != nil {
		return obj.WashiTapeNode
	}

	if obj.WidgetNode != nil {
		return obj.WidgetNode
	}

	// all schemas are nil
	return nil
}

type NullableSubcanvasNode struct {
	value *SubcanvasNode
	isSet bool
}

func (v NullableSubcanvasNode) Get() *SubcanvasNode {
	return v.value
}

func (v *NullableSubcanvasNode) Set(val *SubcanvasNode) {
	v.value = val
	v.isSet = true
}

func (v NullableSubcanvasNode) IsSet() bool {
	return v.isSet
}

func (v *NullableSubcanvasNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubcanvasNode(val *SubcanvasNode) *NullableSubcanvasNode {
	return &NullableSubcanvasNode{value: val, isSet: true}
}

func (v NullableSubcanvasNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubcanvasNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



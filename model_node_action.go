/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeAction{}

// NodeAction An action that navigates to a specific node in the Figma viewer.
type NodeAction struct {
	Type string `json:"type"`
	DestinationId NullableString `json:"destinationId"`
	Navigation Navigation `json:"navigation"`
	Transition NullableTransition `json:"transition"`
	// Whether the scroll offsets of any scrollable elements in the current screen or overlay are preserved when navigating to the destination. This is applicable only if the layout of both the current frame and its destination are the same.
	PreserveScrollPosition *bool `json:"preserveScrollPosition,omitempty"`
	// Applicable only when `navigation` is `\"OVERLAY\"` and the destination is a frame with `overlayPosition` equal to `\"MANUAL\"`. This value represents the offset by which the overlay is opened relative to this node.
	OverlayRelativePosition *Vector `json:"overlayRelativePosition,omitempty"`
	// When true, all videos within the destination frame will reset their memorized playback position to 00:00 before starting to play.
	ResetVideoPosition *bool `json:"resetVideoPosition,omitempty"`
	// Whether the scroll offsets of any scrollable elements in the current screen or overlay reset when navigating to the destination. This is applicable only if the layout of both the current frame and its destination are the same.
	ResetScrollPosition *bool `json:"resetScrollPosition,omitempty"`
	// Whether the state of any interactive components in the current screen or overlay reset when navigating to the destination. This is applicable if there are interactive components in the destination frame.
	ResetInteractiveComponents *bool `json:"resetInteractiveComponents,omitempty"`
}

type _NodeAction NodeAction

// NewNodeAction instantiates a new NodeAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeAction(type_ string, destinationId NullableString, navigation Navigation, transition NullableTransition) *NodeAction {
	this := NodeAction{}
	this.Type = type_
	this.DestinationId = destinationId
	this.Navigation = navigation
	this.Transition = transition
	return &this
}

// NewNodeActionWithDefaults instantiates a new NodeAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeActionWithDefaults() *NodeAction {
	this := NodeAction{}
	return &this
}

// GetType returns the Type field value
func (o *NodeAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NodeAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NodeAction) SetType(v string) {
	o.Type = v
}

// GetDestinationId returns the DestinationId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NodeAction) GetDestinationId() string {
	if o == nil || o.DestinationId.Get() == nil {
		var ret string
		return ret
	}

	return *o.DestinationId.Get()
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeAction) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationId.Get(), o.DestinationId.IsSet()
}

// SetDestinationId sets field value
func (o *NodeAction) SetDestinationId(v string) {
	o.DestinationId.Set(&v)
}

// GetNavigation returns the Navigation field value
func (o *NodeAction) GetNavigation() Navigation {
	if o == nil {
		var ret Navigation
		return ret
	}

	return o.Navigation
}

// GetNavigationOk returns a tuple with the Navigation field value
// and a boolean to check if the value has been set.
func (o *NodeAction) GetNavigationOk() (*Navigation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Navigation, true
}

// SetNavigation sets field value
func (o *NodeAction) SetNavigation(v Navigation) {
	o.Navigation = v
}

// GetTransition returns the Transition field value
// If the value is explicit nil, the zero value for Transition will be returned
func (o *NodeAction) GetTransition() Transition {
	if o == nil || o.Transition.Get() == nil {
		var ret Transition
		return ret
	}

	return *o.Transition.Get()
}

// GetTransitionOk returns a tuple with the Transition field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeAction) GetTransitionOk() (*Transition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transition.Get(), o.Transition.IsSet()
}

// SetTransition sets field value
func (o *NodeAction) SetTransition(v Transition) {
	o.Transition.Set(&v)
}

// GetPreserveScrollPosition returns the PreserveScrollPosition field value if set, zero value otherwise.
func (o *NodeAction) GetPreserveScrollPosition() bool {
	if o == nil || IsNil(o.PreserveScrollPosition) {
		var ret bool
		return ret
	}
	return *o.PreserveScrollPosition
}

// GetPreserveScrollPositionOk returns a tuple with the PreserveScrollPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeAction) GetPreserveScrollPositionOk() (*bool, bool) {
	if o == nil || IsNil(o.PreserveScrollPosition) {
		return nil, false
	}
	return o.PreserveScrollPosition, true
}

// HasPreserveScrollPosition returns a boolean if a field has been set.
func (o *NodeAction) HasPreserveScrollPosition() bool {
	if o != nil && !IsNil(o.PreserveScrollPosition) {
		return true
	}

	return false
}

// SetPreserveScrollPosition gets a reference to the given bool and assigns it to the PreserveScrollPosition field.
func (o *NodeAction) SetPreserveScrollPosition(v bool) {
	o.PreserveScrollPosition = &v
}

// GetOverlayRelativePosition returns the OverlayRelativePosition field value if set, zero value otherwise.
func (o *NodeAction) GetOverlayRelativePosition() Vector {
	if o == nil || IsNil(o.OverlayRelativePosition) {
		var ret Vector
		return ret
	}
	return *o.OverlayRelativePosition
}

// GetOverlayRelativePositionOk returns a tuple with the OverlayRelativePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeAction) GetOverlayRelativePositionOk() (*Vector, bool) {
	if o == nil || IsNil(o.OverlayRelativePosition) {
		return nil, false
	}
	return o.OverlayRelativePosition, true
}

// HasOverlayRelativePosition returns a boolean if a field has been set.
func (o *NodeAction) HasOverlayRelativePosition() bool {
	if o != nil && !IsNil(o.OverlayRelativePosition) {
		return true
	}

	return false
}

// SetOverlayRelativePosition gets a reference to the given Vector and assigns it to the OverlayRelativePosition field.
func (o *NodeAction) SetOverlayRelativePosition(v Vector) {
	o.OverlayRelativePosition = &v
}

// GetResetVideoPosition returns the ResetVideoPosition field value if set, zero value otherwise.
func (o *NodeAction) GetResetVideoPosition() bool {
	if o == nil || IsNil(o.ResetVideoPosition) {
		var ret bool
		return ret
	}
	return *o.ResetVideoPosition
}

// GetResetVideoPositionOk returns a tuple with the ResetVideoPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeAction) GetResetVideoPositionOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetVideoPosition) {
		return nil, false
	}
	return o.ResetVideoPosition, true
}

// HasResetVideoPosition returns a boolean if a field has been set.
func (o *NodeAction) HasResetVideoPosition() bool {
	if o != nil && !IsNil(o.ResetVideoPosition) {
		return true
	}

	return false
}

// SetResetVideoPosition gets a reference to the given bool and assigns it to the ResetVideoPosition field.
func (o *NodeAction) SetResetVideoPosition(v bool) {
	o.ResetVideoPosition = &v
}

// GetResetScrollPosition returns the ResetScrollPosition field value if set, zero value otherwise.
func (o *NodeAction) GetResetScrollPosition() bool {
	if o == nil || IsNil(o.ResetScrollPosition) {
		var ret bool
		return ret
	}
	return *o.ResetScrollPosition
}

// GetResetScrollPositionOk returns a tuple with the ResetScrollPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeAction) GetResetScrollPositionOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetScrollPosition) {
		return nil, false
	}
	return o.ResetScrollPosition, true
}

// HasResetScrollPosition returns a boolean if a field has been set.
func (o *NodeAction) HasResetScrollPosition() bool {
	if o != nil && !IsNil(o.ResetScrollPosition) {
		return true
	}

	return false
}

// SetResetScrollPosition gets a reference to the given bool and assigns it to the ResetScrollPosition field.
func (o *NodeAction) SetResetScrollPosition(v bool) {
	o.ResetScrollPosition = &v
}

// GetResetInteractiveComponents returns the ResetInteractiveComponents field value if set, zero value otherwise.
func (o *NodeAction) GetResetInteractiveComponents() bool {
	if o == nil || IsNil(o.ResetInteractiveComponents) {
		var ret bool
		return ret
	}
	return *o.ResetInteractiveComponents
}

// GetResetInteractiveComponentsOk returns a tuple with the ResetInteractiveComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeAction) GetResetInteractiveComponentsOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetInteractiveComponents) {
		return nil, false
	}
	return o.ResetInteractiveComponents, true
}

// HasResetInteractiveComponents returns a boolean if a field has been set.
func (o *NodeAction) HasResetInteractiveComponents() bool {
	if o != nil && !IsNil(o.ResetInteractiveComponents) {
		return true
	}

	return false
}

// SetResetInteractiveComponents gets a reference to the given bool and assigns it to the ResetInteractiveComponents field.
func (o *NodeAction) SetResetInteractiveComponents(v bool) {
	o.ResetInteractiveComponents = &v
}

func (o NodeAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["destinationId"] = o.DestinationId.Get()
	toSerialize["navigation"] = o.Navigation
	toSerialize["transition"] = o.Transition.Get()
	if !IsNil(o.PreserveScrollPosition) {
		toSerialize["preserveScrollPosition"] = o.PreserveScrollPosition
	}
	if !IsNil(o.OverlayRelativePosition) {
		toSerialize["overlayRelativePosition"] = o.OverlayRelativePosition
	}
	if !IsNil(o.ResetVideoPosition) {
		toSerialize["resetVideoPosition"] = o.ResetVideoPosition
	}
	if !IsNil(o.ResetScrollPosition) {
		toSerialize["resetScrollPosition"] = o.ResetScrollPosition
	}
	if !IsNil(o.ResetInteractiveComponents) {
		toSerialize["resetInteractiveComponents"] = o.ResetInteractiveComponents
	}
	return toSerialize, nil
}

func (o *NodeAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"destinationId",
		"navigation",
		"transition",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeAction := _NodeAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeAction)

	if err != nil {
		return err
	}

	*o = NodeAction(varNodeAction)

	return err
}

type NullableNodeAction struct {
	value *NodeAction
	isSet bool
}

func (v NullableNodeAction) Get() *NodeAction {
	return v.value
}

func (v *NullableNodeAction) Set(val *NodeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeAction(val *NodeAction) *NullableNodeAction {
	return &NullableNodeAction{value: val, isSet: true}
}

func (v NullableNodeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



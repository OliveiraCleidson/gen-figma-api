/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PrototypeDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrototypeDevice{}

// PrototypeDevice The device used to view a prototype.
type PrototypeDevice struct {
	Type string `json:"type"`
	Size *Size `json:"size,omitempty"`
	PresetIdentifier *string `json:"presetIdentifier,omitempty"`
	Rotation string `json:"rotation"`
}

type _PrototypeDevice PrototypeDevice

// NewPrototypeDevice instantiates a new PrototypeDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrototypeDevice(type_ string, rotation string) *PrototypeDevice {
	this := PrototypeDevice{}
	this.Type = type_
	this.Rotation = rotation
	return &this
}

// NewPrototypeDeviceWithDefaults instantiates a new PrototypeDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrototypeDeviceWithDefaults() *PrototypeDevice {
	this := PrototypeDevice{}
	return &this
}

// GetType returns the Type field value
func (o *PrototypeDevice) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PrototypeDevice) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PrototypeDevice) SetType(v string) {
	o.Type = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PrototypeDevice) GetSize() Size {
	if o == nil || IsNil(o.Size) {
		var ret Size
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrototypeDevice) GetSizeOk() (*Size, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PrototypeDevice) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given Size and assigns it to the Size field.
func (o *PrototypeDevice) SetSize(v Size) {
	o.Size = &v
}

// GetPresetIdentifier returns the PresetIdentifier field value if set, zero value otherwise.
func (o *PrototypeDevice) GetPresetIdentifier() string {
	if o == nil || IsNil(o.PresetIdentifier) {
		var ret string
		return ret
	}
	return *o.PresetIdentifier
}

// GetPresetIdentifierOk returns a tuple with the PresetIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrototypeDevice) GetPresetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.PresetIdentifier) {
		return nil, false
	}
	return o.PresetIdentifier, true
}

// HasPresetIdentifier returns a boolean if a field has been set.
func (o *PrototypeDevice) HasPresetIdentifier() bool {
	if o != nil && !IsNil(o.PresetIdentifier) {
		return true
	}

	return false
}

// SetPresetIdentifier gets a reference to the given string and assigns it to the PresetIdentifier field.
func (o *PrototypeDevice) SetPresetIdentifier(v string) {
	o.PresetIdentifier = &v
}

// GetRotation returns the Rotation field value
func (o *PrototypeDevice) GetRotation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rotation
}

// GetRotationOk returns a tuple with the Rotation field value
// and a boolean to check if the value has been set.
func (o *PrototypeDevice) GetRotationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rotation, true
}

// SetRotation sets field value
func (o *PrototypeDevice) SetRotation(v string) {
	o.Rotation = v
}

func (o PrototypeDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrototypeDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.PresetIdentifier) {
		toSerialize["presetIdentifier"] = o.PresetIdentifier
	}
	toSerialize["rotation"] = o.Rotation
	return toSerialize, nil
}

func (o *PrototypeDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"rotation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrototypeDevice := _PrototypeDevice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrototypeDevice)

	if err != nil {
		return err
	}

	*o = PrototypeDevice(varPrototypeDevice)

	return err
}

type NullablePrototypeDevice struct {
	value *PrototypeDevice
	isSet bool
}

func (v NullablePrototypeDevice) Get() *PrototypeDevice {
	return v.value
}

func (v *NullablePrototypeDevice) Set(val *PrototypeDevice) {
	v.value = val
	v.isSet = true
}

func (v NullablePrototypeDevice) IsSet() bool {
	return v.isSet
}

func (v *NullablePrototypeDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrototypeDevice(val *PrototypeDevice) *NullablePrototypeDevice {
	return &NullablePrototypeDevice{value: val, isSet: true}
}

func (v NullablePrototypeDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrototypeDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



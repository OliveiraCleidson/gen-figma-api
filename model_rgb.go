/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RGB type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RGB{}

// RGB An RGB color
type RGB struct {
	// Red channel value, between 0 and 1.
	R float32 `json:"r"`
	// Green channel value, between 0 and 1.
	G float32 `json:"g"`
	// Blue channel value, between 0 and 1.
	B float32 `json:"b"`
}

type _RGB RGB

// NewRGB instantiates a new RGB object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRGB(r float32, g float32, b float32) *RGB {
	this := RGB{}
	this.R = r
	this.G = g
	this.B = b
	return &this
}

// NewRGBWithDefaults instantiates a new RGB object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRGBWithDefaults() *RGB {
	this := RGB{}
	return &this
}

// GetR returns the R field value
func (o *RGB) GetR() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.R
}

// GetROk returns a tuple with the R field value
// and a boolean to check if the value has been set.
func (o *RGB) GetROk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.R, true
}

// SetR sets field value
func (o *RGB) SetR(v float32) {
	o.R = v
}

// GetG returns the G field value
func (o *RGB) GetG() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.G
}

// GetGOk returns a tuple with the G field value
// and a boolean to check if the value has been set.
func (o *RGB) GetGOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.G, true
}

// SetG sets field value
func (o *RGB) SetG(v float32) {
	o.G = v
}

// GetB returns the B field value
func (o *RGB) GetB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.B
}

// GetBOk returns a tuple with the B field value
// and a boolean to check if the value has been set.
func (o *RGB) GetBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.B, true
}

// SetB sets field value
func (o *RGB) SetB(v float32) {
	o.B = v
}

func (o RGB) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RGB) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["r"] = o.R
	toSerialize["g"] = o.G
	toSerialize["b"] = o.B
	return toSerialize, nil
}

func (o *RGB) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"r",
		"g",
		"b",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRGB := _RGB{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRGB)

	if err != nil {
		return err
	}

	*o = RGB(varRGB)

	return err
}

type NullableRGB struct {
	value *RGB
	isSet bool
}

func (v NullableRGB) Get() *RGB {
	return v.value
}

func (v *NullableRGB) Set(val *RGB) {
	v.value = val
	v.isSet = true
}

func (v NullableRGB) IsSet() bool {
	return v.isSet
}

func (v *NullableRGB) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRGB(val *RGB) *NullableRGB {
	return &NullableRGB{value: val, isSet: true}
}

func (v NullableRGB) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRGB) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



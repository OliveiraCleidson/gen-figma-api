/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CommentFragment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentFragment{}

// CommentFragment An object representing a fragment of a comment left by a user, used in the payload of the `FILE_COMMENT` event. Note only ONE of the fields below will be set
type CommentFragment struct {
	// Comment text that is set if a fragment is text based
	Text *string `json:"text,omitempty"`
	// User id that is set if a fragment refers to a user mention
	Mention *string `json:"mention,omitempty"`
}

// NewCommentFragment instantiates a new CommentFragment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentFragment() *CommentFragment {
	this := CommentFragment{}
	return &this
}

// NewCommentFragmentWithDefaults instantiates a new CommentFragment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentFragmentWithDefaults() *CommentFragment {
	this := CommentFragment{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *CommentFragment) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentFragment) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *CommentFragment) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *CommentFragment) SetText(v string) {
	o.Text = &v
}

// GetMention returns the Mention field value if set, zero value otherwise.
func (o *CommentFragment) GetMention() string {
	if o == nil || IsNil(o.Mention) {
		var ret string
		return ret
	}
	return *o.Mention
}

// GetMentionOk returns a tuple with the Mention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentFragment) GetMentionOk() (*string, bool) {
	if o == nil || IsNil(o.Mention) {
		return nil, false
	}
	return o.Mention, true
}

// HasMention returns a boolean if a field has been set.
func (o *CommentFragment) HasMention() bool {
	if o != nil && !IsNil(o.Mention) {
		return true
	}

	return false
}

// SetMention gets a reference to the given string and assigns it to the Mention field.
func (o *CommentFragment) SetMention(v string) {
	o.Mention = &v
}

func (o CommentFragment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentFragment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Mention) {
		toSerialize["mention"] = o.Mention
	}
	return toSerialize, nil
}

type NullableCommentFragment struct {
	value *CommentFragment
	isSet bool
}

func (v NullableCommentFragment) Get() *CommentFragment {
	return v.value
}

func (v *NullableCommentFragment) Set(val *CommentFragment) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentFragment) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentFragment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentFragment(val *CommentFragment) *NullableCommentFragment {
	return &NullableCommentFragment{value: val, isSet: true}
}

func (v NullableCommentFragment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentFragment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



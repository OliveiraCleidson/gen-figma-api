/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SolidPaint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SolidPaint{}

// SolidPaint struct for SolidPaint
type SolidPaint struct {
	// Is the paint enabled?
	Visible *bool `json:"visible,omitempty"`
	// Overall opacity of paint (colors within the paint can also have opacity values which would blend with this)
	Opacity *float32 `json:"opacity,omitempty"`
	// How this node blends with nodes behind it in the scene
	BlendMode BlendMode `json:"blendMode"`
	// The string literal \"SOLID\" representing the paint's type. Always check the `type` before reading other properties.
	Type string `json:"type"`
	// Solid color of the paint
	Color RGBA `json:"color"`
	BoundVariables *SolidPaintAllOfBoundVariables `json:"boundVariables,omitempty"`
}

type _SolidPaint SolidPaint

// NewSolidPaint instantiates a new SolidPaint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSolidPaint(blendMode BlendMode, type_ string, color RGBA) *SolidPaint {
	this := SolidPaint{}
	var visible bool = true
	this.Visible = &visible
	var opacity float32 = 1
	this.Opacity = &opacity
	this.BlendMode = blendMode
	this.Type = type_
	this.Color = color
	return &this
}

// NewSolidPaintWithDefaults instantiates a new SolidPaint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSolidPaintWithDefaults() *SolidPaint {
	this := SolidPaint{}
	var visible bool = true
	this.Visible = &visible
	var opacity float32 = 1
	this.Opacity = &opacity
	return &this
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *SolidPaint) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SolidPaint) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *SolidPaint) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *SolidPaint) SetVisible(v bool) {
	o.Visible = &v
}

// GetOpacity returns the Opacity field value if set, zero value otherwise.
func (o *SolidPaint) GetOpacity() float32 {
	if o == nil || IsNil(o.Opacity) {
		var ret float32
		return ret
	}
	return *o.Opacity
}

// GetOpacityOk returns a tuple with the Opacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SolidPaint) GetOpacityOk() (*float32, bool) {
	if o == nil || IsNil(o.Opacity) {
		return nil, false
	}
	return o.Opacity, true
}

// HasOpacity returns a boolean if a field has been set.
func (o *SolidPaint) HasOpacity() bool {
	if o != nil && !IsNil(o.Opacity) {
		return true
	}

	return false
}

// SetOpacity gets a reference to the given float32 and assigns it to the Opacity field.
func (o *SolidPaint) SetOpacity(v float32) {
	o.Opacity = &v
}

// GetBlendMode returns the BlendMode field value
func (o *SolidPaint) GetBlendMode() BlendMode {
	if o == nil {
		var ret BlendMode
		return ret
	}

	return o.BlendMode
}

// GetBlendModeOk returns a tuple with the BlendMode field value
// and a boolean to check if the value has been set.
func (o *SolidPaint) GetBlendModeOk() (*BlendMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlendMode, true
}

// SetBlendMode sets field value
func (o *SolidPaint) SetBlendMode(v BlendMode) {
	o.BlendMode = v
}

// GetType returns the Type field value
func (o *SolidPaint) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SolidPaint) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SolidPaint) SetType(v string) {
	o.Type = v
}

// GetColor returns the Color field value
func (o *SolidPaint) GetColor() RGBA {
	if o == nil {
		var ret RGBA
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *SolidPaint) GetColorOk() (*RGBA, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *SolidPaint) SetColor(v RGBA) {
	o.Color = v
}

// GetBoundVariables returns the BoundVariables field value if set, zero value otherwise.
func (o *SolidPaint) GetBoundVariables() SolidPaintAllOfBoundVariables {
	if o == nil || IsNil(o.BoundVariables) {
		var ret SolidPaintAllOfBoundVariables
		return ret
	}
	return *o.BoundVariables
}

// GetBoundVariablesOk returns a tuple with the BoundVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SolidPaint) GetBoundVariablesOk() (*SolidPaintAllOfBoundVariables, bool) {
	if o == nil || IsNil(o.BoundVariables) {
		return nil, false
	}
	return o.BoundVariables, true
}

// HasBoundVariables returns a boolean if a field has been set.
func (o *SolidPaint) HasBoundVariables() bool {
	if o != nil && !IsNil(o.BoundVariables) {
		return true
	}

	return false
}

// SetBoundVariables gets a reference to the given SolidPaintAllOfBoundVariables and assigns it to the BoundVariables field.
func (o *SolidPaint) SetBoundVariables(v SolidPaintAllOfBoundVariables) {
	o.BoundVariables = &v
}

func (o SolidPaint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SolidPaint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	if !IsNil(o.Opacity) {
		toSerialize["opacity"] = o.Opacity
	}
	toSerialize["blendMode"] = o.BlendMode
	toSerialize["type"] = o.Type
	toSerialize["color"] = o.Color
	if !IsNil(o.BoundVariables) {
		toSerialize["boundVariables"] = o.BoundVariables
	}
	return toSerialize, nil
}

func (o *SolidPaint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blendMode",
		"type",
		"color",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSolidPaint := _SolidPaint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSolidPaint)

	if err != nil {
		return err
	}

	*o = SolidPaint(varSolidPaint)

	return err
}

type NullableSolidPaint struct {
	value *SolidPaint
	isSet bool
}

func (v NullableSolidPaint) Get() *SolidPaint {
	return v.value
}

func (v *NullableSolidPaint) Set(val *SolidPaint) {
	v.value = val
	v.isSet = true
}

func (v NullableSolidPaint) IsSet() bool {
	return v.isSet
}

func (v *NullableSolidPaint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSolidPaint(val *SolidPaint) *NullableSolidPaint {
	return &NullableSolidPaint{value: val, isSet: true}
}

func (v NullableSolidPaint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSolidPaint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Measurement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Measurement{}

// Measurement A pinned distance between two nodes in Dev Mode
type Measurement struct {
	Id string `json:"id"`
	Start MeasurementStartEnd `json:"start"`
	End MeasurementStartEnd `json:"end"`
	Offset MeasurementOffset `json:"offset"`
	// When manually overridden, the displayed value of the measurement
	FreeText *string `json:"freeText,omitempty"`
}

type _Measurement Measurement

// NewMeasurement instantiates a new Measurement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeasurement(id string, start MeasurementStartEnd, end MeasurementStartEnd, offset MeasurementOffset) *Measurement {
	this := Measurement{}
	this.Id = id
	this.Start = start
	this.End = end
	this.Offset = offset
	return &this
}

// NewMeasurementWithDefaults instantiates a new Measurement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeasurementWithDefaults() *Measurement {
	this := Measurement{}
	return &this
}

// GetId returns the Id field value
func (o *Measurement) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Measurement) SetId(v string) {
	o.Id = v
}

// GetStart returns the Start field value
func (o *Measurement) GetStart() MeasurementStartEnd {
	if o == nil {
		var ret MeasurementStartEnd
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetStartOk() (*MeasurementStartEnd, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *Measurement) SetStart(v MeasurementStartEnd) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *Measurement) GetEnd() MeasurementStartEnd {
	if o == nil {
		var ret MeasurementStartEnd
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetEndOk() (*MeasurementStartEnd, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *Measurement) SetEnd(v MeasurementStartEnd) {
	o.End = v
}

// GetOffset returns the Offset field value
func (o *Measurement) GetOffset() MeasurementOffset {
	if o == nil {
		var ret MeasurementOffset
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *Measurement) GetOffsetOk() (*MeasurementOffset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *Measurement) SetOffset(v MeasurementOffset) {
	o.Offset = v
}

// GetFreeText returns the FreeText field value if set, zero value otherwise.
func (o *Measurement) GetFreeText() string {
	if o == nil || IsNil(o.FreeText) {
		var ret string
		return ret
	}
	return *o.FreeText
}

// GetFreeTextOk returns a tuple with the FreeText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Measurement) GetFreeTextOk() (*string, bool) {
	if o == nil || IsNil(o.FreeText) {
		return nil, false
	}
	return o.FreeText, true
}

// HasFreeText returns a boolean if a field has been set.
func (o *Measurement) HasFreeText() bool {
	if o != nil && !IsNil(o.FreeText) {
		return true
	}

	return false
}

// SetFreeText gets a reference to the given string and assigns it to the FreeText field.
func (o *Measurement) SetFreeText(v string) {
	o.FreeText = &v
}

func (o Measurement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Measurement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End
	toSerialize["offset"] = o.Offset
	if !IsNil(o.FreeText) {
		toSerialize["freeText"] = o.FreeText
	}
	return toSerialize, nil
}

func (o *Measurement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"start",
		"end",
		"offset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeasurement := _Measurement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeasurement)

	if err != nil {
		return err
	}

	*o = Measurement(varMeasurement)

	return err
}

type NullableMeasurement struct {
	value *Measurement
	isSet bool
}

func (v NullableMeasurement) Get() *Measurement {
	return v.value
}

func (v *NullableMeasurement) Set(val *Measurement) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurement) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurement(val *Measurement) *NullableMeasurement {
	return &NullableMeasurement{value: val, isSet: true}
}

func (v NullableMeasurement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



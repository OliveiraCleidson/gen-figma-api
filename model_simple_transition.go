/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SimpleTransition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimpleTransition{}

// SimpleTransition Describes an animation used when navigating in a prototype.
type SimpleTransition struct {
	Type string `json:"type"`
	// The duration of the transition in milliseconds.
	Duration float32 `json:"duration"`
	// The easing curve of the transition.
	Easing Easing `json:"easing"`
}

type _SimpleTransition SimpleTransition

// NewSimpleTransition instantiates a new SimpleTransition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleTransition(type_ string, duration float32, easing Easing) *SimpleTransition {
	this := SimpleTransition{}
	this.Type = type_
	this.Duration = duration
	this.Easing = easing
	return &this
}

// NewSimpleTransitionWithDefaults instantiates a new SimpleTransition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleTransitionWithDefaults() *SimpleTransition {
	this := SimpleTransition{}
	return &this
}

// GetType returns the Type field value
func (o *SimpleTransition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SimpleTransition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SimpleTransition) SetType(v string) {
	o.Type = v
}

// GetDuration returns the Duration field value
func (o *SimpleTransition) GetDuration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *SimpleTransition) GetDurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *SimpleTransition) SetDuration(v float32) {
	o.Duration = v
}

// GetEasing returns the Easing field value
func (o *SimpleTransition) GetEasing() Easing {
	if o == nil {
		var ret Easing
		return ret
	}

	return o.Easing
}

// GetEasingOk returns a tuple with the Easing field value
// and a boolean to check if the value has been set.
func (o *SimpleTransition) GetEasingOk() (*Easing, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Easing, true
}

// SetEasing sets field value
func (o *SimpleTransition) SetEasing(v Easing) {
	o.Easing = v
}

func (o SimpleTransition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimpleTransition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["duration"] = o.Duration
	toSerialize["easing"] = o.Easing
	return toSerialize, nil
}

func (o *SimpleTransition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"duration",
		"easing",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSimpleTransition := _SimpleTransition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSimpleTransition)

	if err != nil {
		return err
	}

	*o = SimpleTransition(varSimpleTransition)

	return err
}

type NullableSimpleTransition struct {
	value *SimpleTransition
	isSet bool
}

func (v NullableSimpleTransition) Get() *SimpleTransition {
	return v.value
}

func (v *NullableSimpleTransition) Set(val *SimpleTransition) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleTransition) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleTransition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleTransition(val *SimpleTransition) *NullableSimpleTransition {
	return &NullableSimpleTransition{value: val, isSet: true}
}

func (v NullableSimpleTransition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleTransition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



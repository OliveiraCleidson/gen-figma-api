/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Expression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Expression{}

// Expression Defines the [Expression](https://help.figma.com/hc/en-us/articles/15253194385943) object, which contains a list of `VariableData` objects strung together by operators (`ExpressionFunction`).
type Expression struct {
	ExpressionFunction ExpressionFunction `json:"expressionFunction"`
	ExpressionArguments []VariableData `json:"expressionArguments"`
}

type _Expression Expression

// NewExpression instantiates a new Expression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpression(expressionFunction ExpressionFunction, expressionArguments []VariableData) *Expression {
	this := Expression{}
	this.ExpressionFunction = expressionFunction
	this.ExpressionArguments = expressionArguments
	return &this
}

// NewExpressionWithDefaults instantiates a new Expression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpressionWithDefaults() *Expression {
	this := Expression{}
	return &this
}

// GetExpressionFunction returns the ExpressionFunction field value
func (o *Expression) GetExpressionFunction() ExpressionFunction {
	if o == nil {
		var ret ExpressionFunction
		return ret
	}

	return o.ExpressionFunction
}

// GetExpressionFunctionOk returns a tuple with the ExpressionFunction field value
// and a boolean to check if the value has been set.
func (o *Expression) GetExpressionFunctionOk() (*ExpressionFunction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpressionFunction, true
}

// SetExpressionFunction sets field value
func (o *Expression) SetExpressionFunction(v ExpressionFunction) {
	o.ExpressionFunction = v
}

// GetExpressionArguments returns the ExpressionArguments field value
func (o *Expression) GetExpressionArguments() []VariableData {
	if o == nil {
		var ret []VariableData
		return ret
	}

	return o.ExpressionArguments
}

// GetExpressionArgumentsOk returns a tuple with the ExpressionArguments field value
// and a boolean to check if the value has been set.
func (o *Expression) GetExpressionArgumentsOk() ([]VariableData, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpressionArguments, true
}

// SetExpressionArguments sets field value
func (o *Expression) SetExpressionArguments(v []VariableData) {
	o.ExpressionArguments = v
}

func (o Expression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Expression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expressionFunction"] = o.ExpressionFunction
	toSerialize["expressionArguments"] = o.ExpressionArguments
	return toSerialize, nil
}

func (o *Expression) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expressionFunction",
		"expressionArguments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExpression := _Expression{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExpression)

	if err != nil {
		return err
	}

	*o = Expression(varExpression)

	return err
}

type NullableExpression struct {
	value *Expression
	isSet bool
}

func (v NullableExpression) Get() *Expression {
	return v.value
}

func (v *NullableExpression) Set(val *Expression) {
	v.value = val
	v.isSet = true
}

func (v NullableExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpression(val *Expression) *NullableExpression {
	return &NullableExpression{value: val, isSet: true}
}

func (v NullableExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



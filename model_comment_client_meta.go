/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CommentClientMeta - Positioning information of the comment. Includes information on the location of the comment pin, which is either the absolute coordinates on the canvas or a relative offset within a frame. If the comment is a region, it will also contain the region height, width, and position of the anchor in regards to the region.
type CommentClientMeta struct {
	FrameOffset *FrameOffset
	FrameOffsetRegion *FrameOffsetRegion
	Region *Region
	Vector *Vector
}

// FrameOffsetAsCommentClientMeta is a convenience function that returns FrameOffset wrapped in CommentClientMeta
func FrameOffsetAsCommentClientMeta(v *FrameOffset) CommentClientMeta {
	return CommentClientMeta{
		FrameOffset: v,
	}
}

// FrameOffsetRegionAsCommentClientMeta is a convenience function that returns FrameOffsetRegion wrapped in CommentClientMeta
func FrameOffsetRegionAsCommentClientMeta(v *FrameOffsetRegion) CommentClientMeta {
	return CommentClientMeta{
		FrameOffsetRegion: v,
	}
}

// RegionAsCommentClientMeta is a convenience function that returns Region wrapped in CommentClientMeta
func RegionAsCommentClientMeta(v *Region) CommentClientMeta {
	return CommentClientMeta{
		Region: v,
	}
}

// VectorAsCommentClientMeta is a convenience function that returns Vector wrapped in CommentClientMeta
func VectorAsCommentClientMeta(v *Vector) CommentClientMeta {
	return CommentClientMeta{
		Vector: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CommentClientMeta) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FrameOffset
	err = newStrictDecoder(data).Decode(&dst.FrameOffset)
	if err == nil {
		jsonFrameOffset, _ := json.Marshal(dst.FrameOffset)
		if string(jsonFrameOffset) == "{}" { // empty struct
			dst.FrameOffset = nil
		} else {
			if err = validator.Validate(dst.FrameOffset); err != nil {
				dst.FrameOffset = nil
			} else {
				match++
			}
		}
	} else {
		dst.FrameOffset = nil
	}

	// try to unmarshal data into FrameOffsetRegion
	err = newStrictDecoder(data).Decode(&dst.FrameOffsetRegion)
	if err == nil {
		jsonFrameOffsetRegion, _ := json.Marshal(dst.FrameOffsetRegion)
		if string(jsonFrameOffsetRegion) == "{}" { // empty struct
			dst.FrameOffsetRegion = nil
		} else {
			if err = validator.Validate(dst.FrameOffsetRegion); err != nil {
				dst.FrameOffsetRegion = nil
			} else {
				match++
			}
		}
	} else {
		dst.FrameOffsetRegion = nil
	}

	// try to unmarshal data into Region
	err = newStrictDecoder(data).Decode(&dst.Region)
	if err == nil {
		jsonRegion, _ := json.Marshal(dst.Region)
		if string(jsonRegion) == "{}" { // empty struct
			dst.Region = nil
		} else {
			if err = validator.Validate(dst.Region); err != nil {
				dst.Region = nil
			} else {
				match++
			}
		}
	} else {
		dst.Region = nil
	}

	// try to unmarshal data into Vector
	err = newStrictDecoder(data).Decode(&dst.Vector)
	if err == nil {
		jsonVector, _ := json.Marshal(dst.Vector)
		if string(jsonVector) == "{}" { // empty struct
			dst.Vector = nil
		} else {
			if err = validator.Validate(dst.Vector); err != nil {
				dst.Vector = nil
			} else {
				match++
			}
		}
	} else {
		dst.Vector = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FrameOffset = nil
		dst.FrameOffsetRegion = nil
		dst.Region = nil
		dst.Vector = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CommentClientMeta)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CommentClientMeta)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CommentClientMeta) MarshalJSON() ([]byte, error) {
	if src.FrameOffset != nil {
		return json.Marshal(&src.FrameOffset)
	}

	if src.FrameOffsetRegion != nil {
		return json.Marshal(&src.FrameOffsetRegion)
	}

	if src.Region != nil {
		return json.Marshal(&src.Region)
	}

	if src.Vector != nil {
		return json.Marshal(&src.Vector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CommentClientMeta) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FrameOffset != nil {
		return obj.FrameOffset
	}

	if obj.FrameOffsetRegion != nil {
		return obj.FrameOffsetRegion
	}

	if obj.Region != nil {
		return obj.Region
	}

	if obj.Vector != nil {
		return obj.Vector
	}

	// all schemas are nil
	return nil
}

type NullableCommentClientMeta struct {
	value *CommentClientMeta
	isSet bool
}

func (v NullableCommentClientMeta) Get() *CommentClientMeta {
	return v.value
}

func (v *NullableCommentClientMeta) Set(val *CommentClientMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentClientMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentClientMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentClientMeta(val *CommentClientMeta) *NullableCommentClientMeta {
	return &NullableCommentClientMeta{value: val, isSet: true}
}

func (v NullableCommentClientMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentClientMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



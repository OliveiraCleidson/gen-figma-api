/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Path type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Path{}

// Path Defines a single path
type Path struct {
	// A series of path commands that encodes how to draw the path.
	Path string `json:"path"`
	// The winding rule for the path (same as in SVGs). This determines whether a given point in space is inside or outside the path.
	WindingRule string `json:"windingRule"`
	// If there is a per-region fill, this refers to an ID in the `fillOverrideTable`.
	OverrideID *float32 `json:"overrideID,omitempty"`
}

type _Path Path

// NewPath instantiates a new Path object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPath(path string, windingRule string) *Path {
	this := Path{}
	this.Path = path
	this.WindingRule = windingRule
	return &this
}

// NewPathWithDefaults instantiates a new Path object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPathWithDefaults() *Path {
	this := Path{}
	return &this
}

// GetPath returns the Path field value
func (o *Path) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *Path) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *Path) SetPath(v string) {
	o.Path = v
}

// GetWindingRule returns the WindingRule field value
func (o *Path) GetWindingRule() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WindingRule
}

// GetWindingRuleOk returns a tuple with the WindingRule field value
// and a boolean to check if the value has been set.
func (o *Path) GetWindingRuleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WindingRule, true
}

// SetWindingRule sets field value
func (o *Path) SetWindingRule(v string) {
	o.WindingRule = v
}

// GetOverrideID returns the OverrideID field value if set, zero value otherwise.
func (o *Path) GetOverrideID() float32 {
	if o == nil || IsNil(o.OverrideID) {
		var ret float32
		return ret
	}
	return *o.OverrideID
}

// GetOverrideIDOk returns a tuple with the OverrideID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Path) GetOverrideIDOk() (*float32, bool) {
	if o == nil || IsNil(o.OverrideID) {
		return nil, false
	}
	return o.OverrideID, true
}

// HasOverrideID returns a boolean if a field has been set.
func (o *Path) HasOverrideID() bool {
	if o != nil && !IsNil(o.OverrideID) {
		return true
	}

	return false
}

// SetOverrideID gets a reference to the given float32 and assigns it to the OverrideID field.
func (o *Path) SetOverrideID(v float32) {
	o.OverrideID = &v
}

func (o Path) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Path) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["path"] = o.Path
	toSerialize["windingRule"] = o.WindingRule
	if !IsNil(o.OverrideID) {
		toSerialize["overrideID"] = o.OverrideID
	}
	return toSerialize, nil
}

func (o *Path) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
		"windingRule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPath := _Path{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPath)

	if err != nil {
		return err
	}

	*o = Path(varPath)

	return err
}

type NullablePath struct {
	value *Path
	isSet bool
}

func (v NullablePath) Get() *Path {
	return v.value
}

func (v *NullablePath) Set(val *Path) {
	v.value = val
	v.isSet = true
}

func (v NullablePath) IsSet() bool {
	return v.isSet
}

func (v *NullablePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePath(val *Path) *NullablePath {
	return &NullablePath{value: val, isSet: true}
}

func (v NullablePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PaintOverride type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaintOverride{}

// PaintOverride Paint metadata to override default paints.
type PaintOverride struct {
	// Paints applied to characters.
	Fills []Paint `json:"fills,omitempty"`
	// ID of style node, if any, that this inherits fill data from.
	InheritFillStyleId *string `json:"inheritFillStyleId,omitempty"`
}

// NewPaintOverride instantiates a new PaintOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaintOverride() *PaintOverride {
	this := PaintOverride{}
	return &this
}

// NewPaintOverrideWithDefaults instantiates a new PaintOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaintOverrideWithDefaults() *PaintOverride {
	this := PaintOverride{}
	return &this
}

// GetFills returns the Fills field value if set, zero value otherwise.
func (o *PaintOverride) GetFills() []Paint {
	if o == nil || IsNil(o.Fills) {
		var ret []Paint
		return ret
	}
	return o.Fills
}

// GetFillsOk returns a tuple with the Fills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaintOverride) GetFillsOk() ([]Paint, bool) {
	if o == nil || IsNil(o.Fills) {
		return nil, false
	}
	return o.Fills, true
}

// HasFills returns a boolean if a field has been set.
func (o *PaintOverride) HasFills() bool {
	if o != nil && !IsNil(o.Fills) {
		return true
	}

	return false
}

// SetFills gets a reference to the given []Paint and assigns it to the Fills field.
func (o *PaintOverride) SetFills(v []Paint) {
	o.Fills = v
}

// GetInheritFillStyleId returns the InheritFillStyleId field value if set, zero value otherwise.
func (o *PaintOverride) GetInheritFillStyleId() string {
	if o == nil || IsNil(o.InheritFillStyleId) {
		var ret string
		return ret
	}
	return *o.InheritFillStyleId
}

// GetInheritFillStyleIdOk returns a tuple with the InheritFillStyleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaintOverride) GetInheritFillStyleIdOk() (*string, bool) {
	if o == nil || IsNil(o.InheritFillStyleId) {
		return nil, false
	}
	return o.InheritFillStyleId, true
}

// HasInheritFillStyleId returns a boolean if a field has been set.
func (o *PaintOverride) HasInheritFillStyleId() bool {
	if o != nil && !IsNil(o.InheritFillStyleId) {
		return true
	}

	return false
}

// SetInheritFillStyleId gets a reference to the given string and assigns it to the InheritFillStyleId field.
func (o *PaintOverride) SetInheritFillStyleId(v string) {
	o.InheritFillStyleId = &v
}

func (o PaintOverride) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaintOverride) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fills) {
		toSerialize["fills"] = o.Fills
	}
	if !IsNil(o.InheritFillStyleId) {
		toSerialize["inheritFillStyleId"] = o.InheritFillStyleId
	}
	return toSerialize, nil
}

type NullablePaintOverride struct {
	value *PaintOverride
	isSet bool
}

func (v NullablePaintOverride) Get() *PaintOverride {
	return v.value
}

func (v *NullablePaintOverride) Set(val *PaintOverride) {
	v.value = val
	v.isSet = true
}

func (v NullablePaintOverride) IsSet() bool {
	return v.isSet
}

func (v *NullablePaintOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaintOverride(val *PaintOverride) *NullablePaintOverride {
	return &NullablePaintOverride{value: val, isSet: true}
}

func (v NullablePaintOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaintOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



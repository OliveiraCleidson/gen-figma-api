/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PaymentInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentInformation{}

// PaymentInformation An object describing a user's payment information for a plugin, widget, or Community file.
type PaymentInformation struct {
	// The ID of the user whose payment information was queried. Can be used to verify the validity of a response.
	UserId string `json:"user_id"`
	// The ID of the plugin, widget, or Community file that was queried. Can be used to verify the validity of a response.
	ResourceId string `json:"resource_id"`
	// The type of the resource.
	ResourceType string `json:"resource_type"`
	PaymentStatus PaymentStatus `json:"payment_status"`
	// The UTC ISO 8601 timestamp indicating when the user purchased the resource. No value is given if the user has never purchased the resource.    Note that a value will still be returned if the user had purchased the resource, but no longer has active access to it (e.g. purchase refunded, subscription ended).
	DateOfPurchase *time.Time `json:"date_of_purchase,omitempty"`
}

type _PaymentInformation PaymentInformation

// NewPaymentInformation instantiates a new PaymentInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentInformation(userId string, resourceId string, resourceType string, paymentStatus PaymentStatus) *PaymentInformation {
	this := PaymentInformation{}
	this.UserId = userId
	this.ResourceId = resourceId
	this.ResourceType = resourceType
	this.PaymentStatus = paymentStatus
	return &this
}

// NewPaymentInformationWithDefaults instantiates a new PaymentInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentInformationWithDefaults() *PaymentInformation {
	this := PaymentInformation{}
	return &this
}

// GetUserId returns the UserId field value
func (o *PaymentInformation) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *PaymentInformation) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *PaymentInformation) SetUserId(v string) {
	o.UserId = v
}

// GetResourceId returns the ResourceId field value
func (o *PaymentInformation) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *PaymentInformation) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *PaymentInformation) SetResourceId(v string) {
	o.ResourceId = v
}

// GetResourceType returns the ResourceType field value
func (o *PaymentInformation) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *PaymentInformation) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *PaymentInformation) SetResourceType(v string) {
	o.ResourceType = v
}

// GetPaymentStatus returns the PaymentStatus field value
func (o *PaymentInformation) GetPaymentStatus() PaymentStatus {
	if o == nil {
		var ret PaymentStatus
		return ret
	}

	return o.PaymentStatus
}

// GetPaymentStatusOk returns a tuple with the PaymentStatus field value
// and a boolean to check if the value has been set.
func (o *PaymentInformation) GetPaymentStatusOk() (*PaymentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentStatus, true
}

// SetPaymentStatus sets field value
func (o *PaymentInformation) SetPaymentStatus(v PaymentStatus) {
	o.PaymentStatus = v
}

// GetDateOfPurchase returns the DateOfPurchase field value if set, zero value otherwise.
func (o *PaymentInformation) GetDateOfPurchase() time.Time {
	if o == nil || IsNil(o.DateOfPurchase) {
		var ret time.Time
		return ret
	}
	return *o.DateOfPurchase
}

// GetDateOfPurchaseOk returns a tuple with the DateOfPurchase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInformation) GetDateOfPurchaseOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateOfPurchase) {
		return nil, false
	}
	return o.DateOfPurchase, true
}

// HasDateOfPurchase returns a boolean if a field has been set.
func (o *PaymentInformation) HasDateOfPurchase() bool {
	if o != nil && !IsNil(o.DateOfPurchase) {
		return true
	}

	return false
}

// SetDateOfPurchase gets a reference to the given time.Time and assigns it to the DateOfPurchase field.
func (o *PaymentInformation) SetDateOfPurchase(v time.Time) {
	o.DateOfPurchase = &v
}

func (o PaymentInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_id"] = o.UserId
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["resource_type"] = o.ResourceType
	toSerialize["payment_status"] = o.PaymentStatus
	if !IsNil(o.DateOfPurchase) {
		toSerialize["date_of_purchase"] = o.DateOfPurchase
	}
	return toSerialize, nil
}

func (o *PaymentInformation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_id",
		"resource_id",
		"resource_type",
		"payment_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentInformation := _PaymentInformation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentInformation)

	if err != nil {
		return err
	}

	*o = PaymentInformation(varPaymentInformation)

	return err
}

type NullablePaymentInformation struct {
	value *PaymentInformation
	isSet bool
}

func (v NullablePaymentInformation) Get() *PaymentInformation {
	return v.value
}

func (v *NullablePaymentInformation) Set(val *PaymentInformation) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInformation) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInformation(val *PaymentInformation) *NullablePaymentInformation {
	return &NullablePaymentInformation{value: val, isSet: true}
}

func (v NullablePaymentInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



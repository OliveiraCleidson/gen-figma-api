/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// MeasurementOffset - struct for MeasurementOffset
type MeasurementOffset struct {
	MeasurementOffsetInner *MeasurementOffsetInner
	MeasurementOffsetOuter *MeasurementOffsetOuter
}

// MeasurementOffsetInnerAsMeasurementOffset is a convenience function that returns MeasurementOffsetInner wrapped in MeasurementOffset
func MeasurementOffsetInnerAsMeasurementOffset(v *MeasurementOffsetInner) MeasurementOffset {
	return MeasurementOffset{
		MeasurementOffsetInner: v,
	}
}

// MeasurementOffsetOuterAsMeasurementOffset is a convenience function that returns MeasurementOffsetOuter wrapped in MeasurementOffset
func MeasurementOffsetOuterAsMeasurementOffset(v *MeasurementOffsetOuter) MeasurementOffset {
	return MeasurementOffset{
		MeasurementOffsetOuter: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MeasurementOffset) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MeasurementOffsetInner
	err = newStrictDecoder(data).Decode(&dst.MeasurementOffsetInner)
	if err == nil {
		jsonMeasurementOffsetInner, _ := json.Marshal(dst.MeasurementOffsetInner)
		if string(jsonMeasurementOffsetInner) == "{}" { // empty struct
			dst.MeasurementOffsetInner = nil
		} else {
			if err = validator.Validate(dst.MeasurementOffsetInner); err != nil {
				dst.MeasurementOffsetInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.MeasurementOffsetInner = nil
	}

	// try to unmarshal data into MeasurementOffsetOuter
	err = newStrictDecoder(data).Decode(&dst.MeasurementOffsetOuter)
	if err == nil {
		jsonMeasurementOffsetOuter, _ := json.Marshal(dst.MeasurementOffsetOuter)
		if string(jsonMeasurementOffsetOuter) == "{}" { // empty struct
			dst.MeasurementOffsetOuter = nil
		} else {
			if err = validator.Validate(dst.MeasurementOffsetOuter); err != nil {
				dst.MeasurementOffsetOuter = nil
			} else {
				match++
			}
		}
	} else {
		dst.MeasurementOffsetOuter = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MeasurementOffsetInner = nil
		dst.MeasurementOffsetOuter = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MeasurementOffset)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MeasurementOffset)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MeasurementOffset) MarshalJSON() ([]byte, error) {
	if src.MeasurementOffsetInner != nil {
		return json.Marshal(&src.MeasurementOffsetInner)
	}

	if src.MeasurementOffsetOuter != nil {
		return json.Marshal(&src.MeasurementOffsetOuter)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MeasurementOffset) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MeasurementOffsetInner != nil {
		return obj.MeasurementOffsetInner
	}

	if obj.MeasurementOffsetOuter != nil {
		return obj.MeasurementOffsetOuter
	}

	// all schemas are nil
	return nil
}

type NullableMeasurementOffset struct {
	value *MeasurementOffset
	isSet bool
}

func (v NullableMeasurementOffset) Get() *MeasurementOffset {
	return v.value
}

func (v *NullableMeasurementOffset) Set(val *MeasurementOffset) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurementOffset) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurementOffset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurementOffset(val *MeasurementOffset) *NullableMeasurementOffset {
	return &NullableMeasurementOffset{value: val, isSet: true}
}

func (v NullableMeasurementOffset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurementOffset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



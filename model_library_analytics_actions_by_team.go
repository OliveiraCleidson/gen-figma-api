/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LibraryAnalyticsActionsByTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LibraryAnalyticsActionsByTeam{}

// LibraryAnalyticsActionsByTeam Library analytics action data broken down by team.
type LibraryAnalyticsActionsByTeam struct {
	// The date in ISO 8601 format. e.g. 2023-12-13
	Week string `json:"week"`
	// The name of the team using the library.
	TeamName string `json:"team_name"`
	// The name of the workspace that the team belongs to.
	WorkspaceName *string `json:"workspace_name,omitempty"`
	// The number of detach events for this period.
	Detachments float32 `json:"detachments"`
	// The number of insertion events for this period.
	Insertions float32 `json:"insertions"`
}

type _LibraryAnalyticsActionsByTeam LibraryAnalyticsActionsByTeam

// NewLibraryAnalyticsActionsByTeam instantiates a new LibraryAnalyticsActionsByTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryAnalyticsActionsByTeam(week string, teamName string, detachments float32, insertions float32) *LibraryAnalyticsActionsByTeam {
	this := LibraryAnalyticsActionsByTeam{}
	this.Week = week
	this.TeamName = teamName
	this.Detachments = detachments
	this.Insertions = insertions
	return &this
}

// NewLibraryAnalyticsActionsByTeamWithDefaults instantiates a new LibraryAnalyticsActionsByTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryAnalyticsActionsByTeamWithDefaults() *LibraryAnalyticsActionsByTeam {
	this := LibraryAnalyticsActionsByTeam{}
	return &this
}

// GetWeek returns the Week field value
func (o *LibraryAnalyticsActionsByTeam) GetWeek() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Week
}

// GetWeekOk returns a tuple with the Week field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsActionsByTeam) GetWeekOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Week, true
}

// SetWeek sets field value
func (o *LibraryAnalyticsActionsByTeam) SetWeek(v string) {
	o.Week = v
}

// GetTeamName returns the TeamName field value
func (o *LibraryAnalyticsActionsByTeam) GetTeamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsActionsByTeam) GetTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamName, true
}

// SetTeamName sets field value
func (o *LibraryAnalyticsActionsByTeam) SetTeamName(v string) {
	o.TeamName = v
}

// GetWorkspaceName returns the WorkspaceName field value if set, zero value otherwise.
func (o *LibraryAnalyticsActionsByTeam) GetWorkspaceName() string {
	if o == nil || IsNil(o.WorkspaceName) {
		var ret string
		return ret
	}
	return *o.WorkspaceName
}

// GetWorkspaceNameOk returns a tuple with the WorkspaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsActionsByTeam) GetWorkspaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.WorkspaceName) {
		return nil, false
	}
	return o.WorkspaceName, true
}

// HasWorkspaceName returns a boolean if a field has been set.
func (o *LibraryAnalyticsActionsByTeam) HasWorkspaceName() bool {
	if o != nil && !IsNil(o.WorkspaceName) {
		return true
	}

	return false
}

// SetWorkspaceName gets a reference to the given string and assigns it to the WorkspaceName field.
func (o *LibraryAnalyticsActionsByTeam) SetWorkspaceName(v string) {
	o.WorkspaceName = &v
}

// GetDetachments returns the Detachments field value
func (o *LibraryAnalyticsActionsByTeam) GetDetachments() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Detachments
}

// GetDetachmentsOk returns a tuple with the Detachments field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsActionsByTeam) GetDetachmentsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detachments, true
}

// SetDetachments sets field value
func (o *LibraryAnalyticsActionsByTeam) SetDetachments(v float32) {
	o.Detachments = v
}

// GetInsertions returns the Insertions field value
func (o *LibraryAnalyticsActionsByTeam) GetInsertions() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Insertions
}

// GetInsertionsOk returns a tuple with the Insertions field value
// and a boolean to check if the value has been set.
func (o *LibraryAnalyticsActionsByTeam) GetInsertionsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Insertions, true
}

// SetInsertions sets field value
func (o *LibraryAnalyticsActionsByTeam) SetInsertions(v float32) {
	o.Insertions = v
}

func (o LibraryAnalyticsActionsByTeam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LibraryAnalyticsActionsByTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["week"] = o.Week
	toSerialize["team_name"] = o.TeamName
	if !IsNil(o.WorkspaceName) {
		toSerialize["workspace_name"] = o.WorkspaceName
	}
	toSerialize["detachments"] = o.Detachments
	toSerialize["insertions"] = o.Insertions
	return toSerialize, nil
}

func (o *LibraryAnalyticsActionsByTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"week",
		"team_name",
		"detachments",
		"insertions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLibraryAnalyticsActionsByTeam := _LibraryAnalyticsActionsByTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLibraryAnalyticsActionsByTeam)

	if err != nil {
		return err
	}

	*o = LibraryAnalyticsActionsByTeam(varLibraryAnalyticsActionsByTeam)

	return err
}

type NullableLibraryAnalyticsActionsByTeam struct {
	value *LibraryAnalyticsActionsByTeam
	isSet bool
}

func (v NullableLibraryAnalyticsActionsByTeam) Get() *LibraryAnalyticsActionsByTeam {
	return v.value
}

func (v *NullableLibraryAnalyticsActionsByTeam) Set(val *LibraryAnalyticsActionsByTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryAnalyticsActionsByTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryAnalyticsActionsByTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryAnalyticsActionsByTeam(val *LibraryAnalyticsActionsByTeam) *NullableLibraryAnalyticsActionsByTeam {
	return &NullableLibraryAnalyticsActionsByTeam{value: val, isSet: true}
}

func (v NullableLibraryAnalyticsActionsByTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryAnalyticsActionsByTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VariableModeUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableModeUpdate{}

// VariableModeUpdate An object that contains details about updating a `VariableMode`.
type VariableModeUpdate struct {
	// The action to perform for the variable mode.
	Action string `json:"action"`
	// The id of the variable mode to update.
	Id string `json:"id"`
	// The name of this variable mode.
	Name *string `json:"name,omitempty"`
	// The variable collection that contains the mode.
	VariableCollectionId string `json:"variableCollectionId"`
}

type _VariableModeUpdate VariableModeUpdate

// NewVariableModeUpdate instantiates a new VariableModeUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableModeUpdate(action string, id string, variableCollectionId string) *VariableModeUpdate {
	this := VariableModeUpdate{}
	this.Action = action
	this.Id = id
	this.VariableCollectionId = variableCollectionId
	return &this
}

// NewVariableModeUpdateWithDefaults instantiates a new VariableModeUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableModeUpdateWithDefaults() *VariableModeUpdate {
	this := VariableModeUpdate{}
	return &this
}

// GetAction returns the Action field value
func (o *VariableModeUpdate) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *VariableModeUpdate) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *VariableModeUpdate) SetAction(v string) {
	o.Action = v
}

// GetId returns the Id field value
func (o *VariableModeUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VariableModeUpdate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VariableModeUpdate) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VariableModeUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableModeUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VariableModeUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VariableModeUpdate) SetName(v string) {
	o.Name = &v
}

// GetVariableCollectionId returns the VariableCollectionId field value
func (o *VariableModeUpdate) GetVariableCollectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VariableCollectionId
}

// GetVariableCollectionIdOk returns a tuple with the VariableCollectionId field value
// and a boolean to check if the value has been set.
func (o *VariableModeUpdate) GetVariableCollectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VariableCollectionId, true
}

// SetVariableCollectionId sets field value
func (o *VariableModeUpdate) SetVariableCollectionId(v string) {
	o.VariableCollectionId = v
}

func (o VariableModeUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableModeUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["variableCollectionId"] = o.VariableCollectionId
	return toSerialize, nil
}

func (o *VariableModeUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"id",
		"variableCollectionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVariableModeUpdate := _VariableModeUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVariableModeUpdate)

	if err != nil {
		return err
	}

	*o = VariableModeUpdate(varVariableModeUpdate)

	return err
}

type NullableVariableModeUpdate struct {
	value *VariableModeUpdate
	isSet bool
}

func (v NullableVariableModeUpdate) Get() *VariableModeUpdate {
	return v.value
}

func (v *NullableVariableModeUpdate) Set(val *VariableModeUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableModeUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableModeUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableModeUpdate(val *VariableModeUpdate) *NullableVariableModeUpdate {
	return &NullableVariableModeUpdate{value: val, isSet: true}
}

func (v NullableVariableModeUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableModeUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WebhookV2Event An enum representing the possible events that a webhook can subscribe to
type WebhookV2Event string

// List of WebhookV2Event
const (
	PING WebhookV2Event = "PING"
	FILE_UPDATE WebhookV2Event = "FILE_UPDATE"
	FILE_VERSION_UPDATE WebhookV2Event = "FILE_VERSION_UPDATE"
	FILE_DELETE WebhookV2Event = "FILE_DELETE"
	LIBRARY_PUBLISH WebhookV2Event = "LIBRARY_PUBLISH"
	FILE_COMMENT WebhookV2Event = "FILE_COMMENT"
)

// All allowed values of WebhookV2Event enum
var AllowedWebhookV2EventEnumValues = []WebhookV2Event{
	"PING",
	"FILE_UPDATE",
	"FILE_VERSION_UPDATE",
	"FILE_DELETE",
	"LIBRARY_PUBLISH",
	"FILE_COMMENT",
}

func (v *WebhookV2Event) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookV2Event(value)
	for _, existing := range AllowedWebhookV2EventEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookV2Event", value)
}

// NewWebhookV2EventFromValue returns a pointer to a valid WebhookV2Event
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookV2EventFromValue(v string) (*WebhookV2Event, error) {
	ev := WebhookV2Event(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookV2Event: valid values are %v", v, AllowedWebhookV2EventEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookV2Event) IsValid() bool {
	for _, existing := range AllowedWebhookV2EventEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebhookV2Event value
func (v WebhookV2Event) Ptr() *WebhookV2Event {
	return &v
}

type NullableWebhookV2Event struct {
	value *WebhookV2Event
	isSet bool
}

func (v NullableWebhookV2Event) Get() *WebhookV2Event {
	return v.value
}

func (v *NullableWebhookV2Event) Set(val *WebhookV2Event) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookV2Event) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookV2Event) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookV2Event(val *WebhookV2Event) *NullableWebhookV2Event {
	return &NullableWebhookV2Event{value: val, isSet: true}
}

func (v NullableWebhookV2Event) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookV2Event) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


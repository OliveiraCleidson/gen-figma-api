/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CornerTrait type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CornerTrait{}

// CornerTrait struct for CornerTrait
type CornerTrait struct {
	// Radius of each corner if a single radius is set for all corners
	CornerRadius *float32 `json:"cornerRadius,omitempty"`
	// A value that lets you control how \"smooth\" the corners are. Ranges from 0 to 1. 0 is the default and means that the corner is perfectly circular. A value of 0.6 means the corner matches the iOS 7 \"squircle\" icon shape. Other values produce various other curves.
	CornerSmoothing *float32 `json:"cornerSmoothing,omitempty"`
	// Array of length 4 of the radius of each corner of the frame, starting in the top left and proceeding clockwise.  Values are given in the order top-left, top-right, bottom-right, bottom-left.
	RectangleCornerRadii []float32 `json:"rectangleCornerRadii,omitempty"`
}

// NewCornerTrait instantiates a new CornerTrait object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCornerTrait() *CornerTrait {
	this := CornerTrait{}
	var cornerRadius float32 = 0
	this.CornerRadius = &cornerRadius
	return &this
}

// NewCornerTraitWithDefaults instantiates a new CornerTrait object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCornerTraitWithDefaults() *CornerTrait {
	this := CornerTrait{}
	var cornerRadius float32 = 0
	this.CornerRadius = &cornerRadius
	return &this
}

// GetCornerRadius returns the CornerRadius field value if set, zero value otherwise.
func (o *CornerTrait) GetCornerRadius() float32 {
	if o == nil || IsNil(o.CornerRadius) {
		var ret float32
		return ret
	}
	return *o.CornerRadius
}

// GetCornerRadiusOk returns a tuple with the CornerRadius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CornerTrait) GetCornerRadiusOk() (*float32, bool) {
	if o == nil || IsNil(o.CornerRadius) {
		return nil, false
	}
	return o.CornerRadius, true
}

// HasCornerRadius returns a boolean if a field has been set.
func (o *CornerTrait) HasCornerRadius() bool {
	if o != nil && !IsNil(o.CornerRadius) {
		return true
	}

	return false
}

// SetCornerRadius gets a reference to the given float32 and assigns it to the CornerRadius field.
func (o *CornerTrait) SetCornerRadius(v float32) {
	o.CornerRadius = &v
}

// GetCornerSmoothing returns the CornerSmoothing field value if set, zero value otherwise.
func (o *CornerTrait) GetCornerSmoothing() float32 {
	if o == nil || IsNil(o.CornerSmoothing) {
		var ret float32
		return ret
	}
	return *o.CornerSmoothing
}

// GetCornerSmoothingOk returns a tuple with the CornerSmoothing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CornerTrait) GetCornerSmoothingOk() (*float32, bool) {
	if o == nil || IsNil(o.CornerSmoothing) {
		return nil, false
	}
	return o.CornerSmoothing, true
}

// HasCornerSmoothing returns a boolean if a field has been set.
func (o *CornerTrait) HasCornerSmoothing() bool {
	if o != nil && !IsNil(o.CornerSmoothing) {
		return true
	}

	return false
}

// SetCornerSmoothing gets a reference to the given float32 and assigns it to the CornerSmoothing field.
func (o *CornerTrait) SetCornerSmoothing(v float32) {
	o.CornerSmoothing = &v
}

// GetRectangleCornerRadii returns the RectangleCornerRadii field value if set, zero value otherwise.
func (o *CornerTrait) GetRectangleCornerRadii() []float32 {
	if o == nil || IsNil(o.RectangleCornerRadii) {
		var ret []float32
		return ret
	}
	return o.RectangleCornerRadii
}

// GetRectangleCornerRadiiOk returns a tuple with the RectangleCornerRadii field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CornerTrait) GetRectangleCornerRadiiOk() ([]float32, bool) {
	if o == nil || IsNil(o.RectangleCornerRadii) {
		return nil, false
	}
	return o.RectangleCornerRadii, true
}

// HasRectangleCornerRadii returns a boolean if a field has been set.
func (o *CornerTrait) HasRectangleCornerRadii() bool {
	if o != nil && !IsNil(o.RectangleCornerRadii) {
		return true
	}

	return false
}

// SetRectangleCornerRadii gets a reference to the given []float32 and assigns it to the RectangleCornerRadii field.
func (o *CornerTrait) SetRectangleCornerRadii(v []float32) {
	o.RectangleCornerRadii = v
}

func (o CornerTrait) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CornerTrait) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CornerRadius) {
		toSerialize["cornerRadius"] = o.CornerRadius
	}
	if !IsNil(o.CornerSmoothing) {
		toSerialize["cornerSmoothing"] = o.CornerSmoothing
	}
	if !IsNil(o.RectangleCornerRadii) {
		toSerialize["rectangleCornerRadii"] = o.RectangleCornerRadii
	}
	return toSerialize, nil
}

type NullableCornerTrait struct {
	value *CornerTrait
	isSet bool
}

func (v NullableCornerTrait) Get() *CornerTrait {
	return v.value
}

func (v *NullableCornerTrait) Set(val *CornerTrait) {
	v.value = val
	v.isSet = true
}

func (v NullableCornerTrait) IsSet() bool {
	return v.isSet
}

func (v *NullableCornerTrait) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCornerTrait(val *CornerTrait) *NullableCornerTrait {
	return &NullableCornerTrait{value: val, isSet: true}
}

func (v NullableCornerTrait) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCornerTrait) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



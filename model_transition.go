/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// Transition - struct for Transition
type Transition struct {
	DirectionalTransition *DirectionalTransition
	SimpleTransition *SimpleTransition
}

// DirectionalTransitionAsTransition is a convenience function that returns DirectionalTransition wrapped in Transition
func DirectionalTransitionAsTransition(v *DirectionalTransition) Transition {
	return Transition{
		DirectionalTransition: v,
	}
}

// SimpleTransitionAsTransition is a convenience function that returns SimpleTransition wrapped in Transition
func SimpleTransitionAsTransition(v *SimpleTransition) Transition {
	return Transition{
		SimpleTransition: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Transition) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DirectionalTransition
	err = newStrictDecoder(data).Decode(&dst.DirectionalTransition)
	if err == nil {
		jsonDirectionalTransition, _ := json.Marshal(dst.DirectionalTransition)
		if string(jsonDirectionalTransition) == "{}" { // empty struct
			dst.DirectionalTransition = nil
		} else {
			if err = validator.Validate(dst.DirectionalTransition); err != nil {
				dst.DirectionalTransition = nil
			} else {
				match++
			}
		}
	} else {
		dst.DirectionalTransition = nil
	}

	// try to unmarshal data into SimpleTransition
	err = newStrictDecoder(data).Decode(&dst.SimpleTransition)
	if err == nil {
		jsonSimpleTransition, _ := json.Marshal(dst.SimpleTransition)
		if string(jsonSimpleTransition) == "{}" { // empty struct
			dst.SimpleTransition = nil
		} else {
			if err = validator.Validate(dst.SimpleTransition); err != nil {
				dst.SimpleTransition = nil
			} else {
				match++
			}
		}
	} else {
		dst.SimpleTransition = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DirectionalTransition = nil
		dst.SimpleTransition = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Transition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Transition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Transition) MarshalJSON() ([]byte, error) {
	if src.DirectionalTransition != nil {
		return json.Marshal(&src.DirectionalTransition)
	}

	if src.SimpleTransition != nil {
		return json.Marshal(&src.SimpleTransition)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Transition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DirectionalTransition != nil {
		return obj.DirectionalTransition
	}

	if obj.SimpleTransition != nil {
		return obj.SimpleTransition
	}

	// all schemas are nil
	return nil
}

type NullableTransition struct {
	value *Transition
	isSet bool
}

func (v NullableTransition) Get() *Transition {
	return v.value
}

func (v *NullableTransition) Set(val *Transition) {
	v.value = val
	v.isSet = true
}

func (v NullableTransition) IsSet() bool {
	return v.isSet
}

func (v *NullableTransition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransition(val *Transition) *NullableTransition {
	return &NullableTransition{value: val, isSet: true}
}

func (v NullableTransition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



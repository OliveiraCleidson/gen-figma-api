/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostCommentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostCommentRequest{}

// PostCommentRequest struct for PostCommentRequest
type PostCommentRequest struct {
	// The text contents of the comment to post.
	Message string `json:"message"`
	// The ID of the comment to reply to, if any. This must be a root comment. You cannot reply to other replies (a comment that has a parent_id).
	CommentId *string `json:"comment_id,omitempty"`
	ClientMeta *PostCommentRequestClientMeta `json:"client_meta,omitempty"`
}

type _PostCommentRequest PostCommentRequest

// NewPostCommentRequest instantiates a new PostCommentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostCommentRequest(message string) *PostCommentRequest {
	this := PostCommentRequest{}
	this.Message = message
	return &this
}

// NewPostCommentRequestWithDefaults instantiates a new PostCommentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostCommentRequestWithDefaults() *PostCommentRequest {
	this := PostCommentRequest{}
	return &this
}

// GetMessage returns the Message field value
func (o *PostCommentRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *PostCommentRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *PostCommentRequest) SetMessage(v string) {
	o.Message = v
}

// GetCommentId returns the CommentId field value if set, zero value otherwise.
func (o *PostCommentRequest) GetCommentId() string {
	if o == nil || IsNil(o.CommentId) {
		var ret string
		return ret
	}
	return *o.CommentId
}

// GetCommentIdOk returns a tuple with the CommentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCommentRequest) GetCommentIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommentId) {
		return nil, false
	}
	return o.CommentId, true
}

// HasCommentId returns a boolean if a field has been set.
func (o *PostCommentRequest) HasCommentId() bool {
	if o != nil && !IsNil(o.CommentId) {
		return true
	}

	return false
}

// SetCommentId gets a reference to the given string and assigns it to the CommentId field.
func (o *PostCommentRequest) SetCommentId(v string) {
	o.CommentId = &v
}

// GetClientMeta returns the ClientMeta field value if set, zero value otherwise.
func (o *PostCommentRequest) GetClientMeta() PostCommentRequestClientMeta {
	if o == nil || IsNil(o.ClientMeta) {
		var ret PostCommentRequestClientMeta
		return ret
	}
	return *o.ClientMeta
}

// GetClientMetaOk returns a tuple with the ClientMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCommentRequest) GetClientMetaOk() (*PostCommentRequestClientMeta, bool) {
	if o == nil || IsNil(o.ClientMeta) {
		return nil, false
	}
	return o.ClientMeta, true
}

// HasClientMeta returns a boolean if a field has been set.
func (o *PostCommentRequest) HasClientMeta() bool {
	if o != nil && !IsNil(o.ClientMeta) {
		return true
	}

	return false
}

// SetClientMeta gets a reference to the given PostCommentRequestClientMeta and assigns it to the ClientMeta field.
func (o *PostCommentRequest) SetClientMeta(v PostCommentRequestClientMeta) {
	o.ClientMeta = &v
}

func (o PostCommentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostCommentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	if !IsNil(o.CommentId) {
		toSerialize["comment_id"] = o.CommentId
	}
	if !IsNil(o.ClientMeta) {
		toSerialize["client_meta"] = o.ClientMeta
	}
	return toSerialize, nil
}

func (o *PostCommentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostCommentRequest := _PostCommentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostCommentRequest)

	if err != nil {
		return err
	}

	*o = PostCommentRequest(varPostCommentRequest)

	return err
}

type NullablePostCommentRequest struct {
	value *PostCommentRequest
	isSet bool
}

func (v NullablePostCommentRequest) Get() *PostCommentRequest {
	return v.value
}

func (v *NullablePostCommentRequest) Set(val *PostCommentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCommentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCommentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCommentRequest(val *PostCommentRequest) *NullablePostCommentRequest {
	return &NullablePostCommentRequest{value: val, isSet: true}
}

func (v NullablePostCommentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCommentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



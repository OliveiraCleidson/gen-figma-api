/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConnectorLineType Connector line type.
type ConnectorLineType string

// List of ConnectorLineType
const (
	STRAIGHT ConnectorLineType = "STRAIGHT"
	ELBOWED ConnectorLineType = "ELBOWED"
)

// All allowed values of ConnectorLineType enum
var AllowedConnectorLineTypeEnumValues = []ConnectorLineType{
	"STRAIGHT",
	"ELBOWED",
}

func (v *ConnectorLineType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorLineType(value)
	for _, existing := range AllowedConnectorLineTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorLineType", value)
}

// NewConnectorLineTypeFromValue returns a pointer to a valid ConnectorLineType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorLineTypeFromValue(v string) (*ConnectorLineType, error) {
	ev := ConnectorLineType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorLineType: valid values are %v", v, AllowedConnectorLineTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorLineType) IsValid() bool {
	for _, existing := range AllowedConnectorLineTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorLineType value
func (v ConnectorLineType) Ptr() *ConnectorLineType {
	return &v
}

type NullableConnectorLineType struct {
	value *ConnectorLineType
	isSet bool
}

func (v NullableConnectorLineType) Get() *ConnectorLineType {
	return v.value
}

func (v *NullableConnectorLineType) Set(val *ConnectorLineType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorLineType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorLineType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorLineType(val *ConnectorLineType) *NullableConnectorLineType {
	return &NullableConnectorLineType{value: val, isSet: true}
}

func (v NullableConnectorLineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorLineType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Region type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Region{}

// Region Position of a region comment on the canvas.
type Region struct {
	// X coordinate of the position.
	X float32 `json:"x"`
	// Y coordinate of the position.
	Y float32 `json:"y"`
	// The height of the comment region. Must be greater than 0.
	RegionHeight float32 `json:"region_height"`
	// The width of the comment region. Must be greater than 0.
	RegionWidth float32 `json:"region_width"`
	// The corner of the comment region to pin to the node's corner as a string enum.
	CommentPinCorner *string `json:"comment_pin_corner,omitempty"`
}

type _Region Region

// NewRegion instantiates a new Region object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegion(x float32, y float32, regionHeight float32, regionWidth float32) *Region {
	this := Region{}
	this.X = x
	this.Y = y
	this.RegionHeight = regionHeight
	this.RegionWidth = regionWidth
	var commentPinCorner string = "bottom-right"
	this.CommentPinCorner = &commentPinCorner
	return &this
}

// NewRegionWithDefaults instantiates a new Region object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionWithDefaults() *Region {
	this := Region{}
	var commentPinCorner string = "bottom-right"
	this.CommentPinCorner = &commentPinCorner
	return &this
}

// GetX returns the X field value
func (o *Region) GetX() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *Region) GetXOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *Region) SetX(v float32) {
	o.X = v
}

// GetY returns the Y field value
func (o *Region) GetY() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *Region) GetYOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *Region) SetY(v float32) {
	o.Y = v
}

// GetRegionHeight returns the RegionHeight field value
func (o *Region) GetRegionHeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RegionHeight
}

// GetRegionHeightOk returns a tuple with the RegionHeight field value
// and a boolean to check if the value has been set.
func (o *Region) GetRegionHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionHeight, true
}

// SetRegionHeight sets field value
func (o *Region) SetRegionHeight(v float32) {
	o.RegionHeight = v
}

// GetRegionWidth returns the RegionWidth field value
func (o *Region) GetRegionWidth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RegionWidth
}

// GetRegionWidthOk returns a tuple with the RegionWidth field value
// and a boolean to check if the value has been set.
func (o *Region) GetRegionWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionWidth, true
}

// SetRegionWidth sets field value
func (o *Region) SetRegionWidth(v float32) {
	o.RegionWidth = v
}

// GetCommentPinCorner returns the CommentPinCorner field value if set, zero value otherwise.
func (o *Region) GetCommentPinCorner() string {
	if o == nil || IsNil(o.CommentPinCorner) {
		var ret string
		return ret
	}
	return *o.CommentPinCorner
}

// GetCommentPinCornerOk returns a tuple with the CommentPinCorner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetCommentPinCornerOk() (*string, bool) {
	if o == nil || IsNil(o.CommentPinCorner) {
		return nil, false
	}
	return o.CommentPinCorner, true
}

// HasCommentPinCorner returns a boolean if a field has been set.
func (o *Region) HasCommentPinCorner() bool {
	if o != nil && !IsNil(o.CommentPinCorner) {
		return true
	}

	return false
}

// SetCommentPinCorner gets a reference to the given string and assigns it to the CommentPinCorner field.
func (o *Region) SetCommentPinCorner(v string) {
	o.CommentPinCorner = &v
}

func (o Region) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Region) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	toSerialize["region_height"] = o.RegionHeight
	toSerialize["region_width"] = o.RegionWidth
	if !IsNil(o.CommentPinCorner) {
		toSerialize["comment_pin_corner"] = o.CommentPinCorner
	}
	return toSerialize, nil
}

func (o *Region) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"x",
		"y",
		"region_height",
		"region_width",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegion := _Region{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegion)

	if err != nil {
		return err
	}

	*o = Region(varRegion)

	return err
}

type NullableRegion struct {
	value *Region
	isSet bool
}

func (v NullableRegion) Get() *Region {
	return v.value
}

func (v *NullableRegion) Set(val *Region) {
	v.value = val
	v.isSet = true
}

func (v NullableRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegion(val *Region) *NullableRegion {
	return &NullableRegion{value: val, isSet: true}
}

func (v NullableRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



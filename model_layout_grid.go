/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LayoutGrid type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LayoutGrid{}

// LayoutGrid Guides to align and place objects within a frames.
type LayoutGrid struct {
	// Orientation of the grid as a string enum  - `COLUMNS`: Vertical grid - `ROWS`: Horizontal grid - `GRID`: Square grid
	Pattern string `json:"pattern"`
	// Width of column grid or height of row grid or square grid spacing.
	SectionSize float32 `json:"sectionSize"`
	// Is the grid currently visible?
	Visible bool `json:"visible"`
	// Color of the grid
	Color RGBA `json:"color"`
	// Positioning of grid as a string enum  - `MIN`: Grid starts at the left or top of the frame - `MAX`: Grid starts at the right or bottom of the frame - `STRETCH`: Grid is stretched to fit the frame - `CENTER`: Grid is center aligned
	Alignment string `json:"alignment"`
	// Spacing in between columns and rows
	GutterSize float32 `json:"gutterSize"`
	// Spacing before the first column or row
	Offset float32 `json:"offset"`
	// Number of columns or rows
	Count float32 `json:"count"`
	BoundVariables *LayoutGridBoundVariables `json:"boundVariables,omitempty"`
}

type _LayoutGrid LayoutGrid

// NewLayoutGrid instantiates a new LayoutGrid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLayoutGrid(pattern string, sectionSize float32, visible bool, color RGBA, alignment string, gutterSize float32, offset float32, count float32) *LayoutGrid {
	this := LayoutGrid{}
	this.Pattern = pattern
	this.SectionSize = sectionSize
	this.Visible = visible
	this.Color = color
	this.Alignment = alignment
	this.GutterSize = gutterSize
	this.Offset = offset
	this.Count = count
	return &this
}

// NewLayoutGridWithDefaults instantiates a new LayoutGrid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLayoutGridWithDefaults() *LayoutGrid {
	this := LayoutGrid{}
	return &this
}

// GetPattern returns the Pattern field value
func (o *LayoutGrid) GetPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value
// and a boolean to check if the value has been set.
func (o *LayoutGrid) GetPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pattern, true
}

// SetPattern sets field value
func (o *LayoutGrid) SetPattern(v string) {
	o.Pattern = v
}

// GetSectionSize returns the SectionSize field value
func (o *LayoutGrid) GetSectionSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SectionSize
}

// GetSectionSizeOk returns a tuple with the SectionSize field value
// and a boolean to check if the value has been set.
func (o *LayoutGrid) GetSectionSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectionSize, true
}

// SetSectionSize sets field value
func (o *LayoutGrid) SetSectionSize(v float32) {
	o.SectionSize = v
}

// GetVisible returns the Visible field value
func (o *LayoutGrid) GetVisible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value
// and a boolean to check if the value has been set.
func (o *LayoutGrid) GetVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visible, true
}

// SetVisible sets field value
func (o *LayoutGrid) SetVisible(v bool) {
	o.Visible = v
}

// GetColor returns the Color field value
func (o *LayoutGrid) GetColor() RGBA {
	if o == nil {
		var ret RGBA
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *LayoutGrid) GetColorOk() (*RGBA, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *LayoutGrid) SetColor(v RGBA) {
	o.Color = v
}

// GetAlignment returns the Alignment field value
func (o *LayoutGrid) GetAlignment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alignment
}

// GetAlignmentOk returns a tuple with the Alignment field value
// and a boolean to check if the value has been set.
func (o *LayoutGrid) GetAlignmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alignment, true
}

// SetAlignment sets field value
func (o *LayoutGrid) SetAlignment(v string) {
	o.Alignment = v
}

// GetGutterSize returns the GutterSize field value
func (o *LayoutGrid) GetGutterSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.GutterSize
}

// GetGutterSizeOk returns a tuple with the GutterSize field value
// and a boolean to check if the value has been set.
func (o *LayoutGrid) GetGutterSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GutterSize, true
}

// SetGutterSize sets field value
func (o *LayoutGrid) SetGutterSize(v float32) {
	o.GutterSize = v
}

// GetOffset returns the Offset field value
func (o *LayoutGrid) GetOffset() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *LayoutGrid) GetOffsetOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *LayoutGrid) SetOffset(v float32) {
	o.Offset = v
}

// GetCount returns the Count field value
func (o *LayoutGrid) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *LayoutGrid) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *LayoutGrid) SetCount(v float32) {
	o.Count = v
}

// GetBoundVariables returns the BoundVariables field value if set, zero value otherwise.
func (o *LayoutGrid) GetBoundVariables() LayoutGridBoundVariables {
	if o == nil || IsNil(o.BoundVariables) {
		var ret LayoutGridBoundVariables
		return ret
	}
	return *o.BoundVariables
}

// GetBoundVariablesOk returns a tuple with the BoundVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LayoutGrid) GetBoundVariablesOk() (*LayoutGridBoundVariables, bool) {
	if o == nil || IsNil(o.BoundVariables) {
		return nil, false
	}
	return o.BoundVariables, true
}

// HasBoundVariables returns a boolean if a field has been set.
func (o *LayoutGrid) HasBoundVariables() bool {
	if o != nil && !IsNil(o.BoundVariables) {
		return true
	}

	return false
}

// SetBoundVariables gets a reference to the given LayoutGridBoundVariables and assigns it to the BoundVariables field.
func (o *LayoutGrid) SetBoundVariables(v LayoutGridBoundVariables) {
	o.BoundVariables = &v
}

func (o LayoutGrid) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LayoutGrid) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pattern"] = o.Pattern
	toSerialize["sectionSize"] = o.SectionSize
	toSerialize["visible"] = o.Visible
	toSerialize["color"] = o.Color
	toSerialize["alignment"] = o.Alignment
	toSerialize["gutterSize"] = o.GutterSize
	toSerialize["offset"] = o.Offset
	toSerialize["count"] = o.Count
	if !IsNil(o.BoundVariables) {
		toSerialize["boundVariables"] = o.BoundVariables
	}
	return toSerialize, nil
}

func (o *LayoutGrid) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pattern",
		"sectionSize",
		"visible",
		"color",
		"alignment",
		"gutterSize",
		"offset",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLayoutGrid := _LayoutGrid{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLayoutGrid)

	if err != nil {
		return err
	}

	*o = LayoutGrid(varLayoutGrid)

	return err
}

type NullableLayoutGrid struct {
	value *LayoutGrid
	isSet bool
}

func (v NullableLayoutGrid) Get() *LayoutGrid {
	return v.value
}

func (v *NullableLayoutGrid) Set(val *LayoutGrid) {
	v.value = val
	v.isSet = true
}

func (v NullableLayoutGrid) IsSet() bool {
	return v.isSet
}

func (v *NullableLayoutGrid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayoutGrid(val *LayoutGrid) *NullableLayoutGrid {
	return &NullableLayoutGrid{value: val, isSet: true}
}

func (v NullableLayoutGrid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayoutGrid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



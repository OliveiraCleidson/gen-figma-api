/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ImageFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageFilters{}

// ImageFilters Image filters to apply to the node.
type ImageFilters struct {
	Exposure *float32 `json:"exposure,omitempty"`
	Contrast *float32 `json:"contrast,omitempty"`
	Saturation *float32 `json:"saturation,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
	Tint *float32 `json:"tint,omitempty"`
	Highlights *float32 `json:"highlights,omitempty"`
	Shadows *float32 `json:"shadows,omitempty"`
}

// NewImageFilters instantiates a new ImageFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageFilters() *ImageFilters {
	this := ImageFilters{}
	var exposure float32 = 0
	this.Exposure = &exposure
	var contrast float32 = 0
	this.Contrast = &contrast
	var saturation float32 = 0
	this.Saturation = &saturation
	var temperature float32 = 0
	this.Temperature = &temperature
	var tint float32 = 0
	this.Tint = &tint
	var highlights float32 = 0
	this.Highlights = &highlights
	var shadows float32 = 0
	this.Shadows = &shadows
	return &this
}

// NewImageFiltersWithDefaults instantiates a new ImageFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageFiltersWithDefaults() *ImageFilters {
	this := ImageFilters{}
	var exposure float32 = 0
	this.Exposure = &exposure
	var contrast float32 = 0
	this.Contrast = &contrast
	var saturation float32 = 0
	this.Saturation = &saturation
	var temperature float32 = 0
	this.Temperature = &temperature
	var tint float32 = 0
	this.Tint = &tint
	var highlights float32 = 0
	this.Highlights = &highlights
	var shadows float32 = 0
	this.Shadows = &shadows
	return &this
}

// GetExposure returns the Exposure field value if set, zero value otherwise.
func (o *ImageFilters) GetExposure() float32 {
	if o == nil || IsNil(o.Exposure) {
		var ret float32
		return ret
	}
	return *o.Exposure
}

// GetExposureOk returns a tuple with the Exposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFilters) GetExposureOk() (*float32, bool) {
	if o == nil || IsNil(o.Exposure) {
		return nil, false
	}
	return o.Exposure, true
}

// HasExposure returns a boolean if a field has been set.
func (o *ImageFilters) HasExposure() bool {
	if o != nil && !IsNil(o.Exposure) {
		return true
	}

	return false
}

// SetExposure gets a reference to the given float32 and assigns it to the Exposure field.
func (o *ImageFilters) SetExposure(v float32) {
	o.Exposure = &v
}

// GetContrast returns the Contrast field value if set, zero value otherwise.
func (o *ImageFilters) GetContrast() float32 {
	if o == nil || IsNil(o.Contrast) {
		var ret float32
		return ret
	}
	return *o.Contrast
}

// GetContrastOk returns a tuple with the Contrast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFilters) GetContrastOk() (*float32, bool) {
	if o == nil || IsNil(o.Contrast) {
		return nil, false
	}
	return o.Contrast, true
}

// HasContrast returns a boolean if a field has been set.
func (o *ImageFilters) HasContrast() bool {
	if o != nil && !IsNil(o.Contrast) {
		return true
	}

	return false
}

// SetContrast gets a reference to the given float32 and assigns it to the Contrast field.
func (o *ImageFilters) SetContrast(v float32) {
	o.Contrast = &v
}

// GetSaturation returns the Saturation field value if set, zero value otherwise.
func (o *ImageFilters) GetSaturation() float32 {
	if o == nil || IsNil(o.Saturation) {
		var ret float32
		return ret
	}
	return *o.Saturation
}

// GetSaturationOk returns a tuple with the Saturation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFilters) GetSaturationOk() (*float32, bool) {
	if o == nil || IsNil(o.Saturation) {
		return nil, false
	}
	return o.Saturation, true
}

// HasSaturation returns a boolean if a field has been set.
func (o *ImageFilters) HasSaturation() bool {
	if o != nil && !IsNil(o.Saturation) {
		return true
	}

	return false
}

// SetSaturation gets a reference to the given float32 and assigns it to the Saturation field.
func (o *ImageFilters) SetSaturation(v float32) {
	o.Saturation = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *ImageFilters) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFilters) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *ImageFilters) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *ImageFilters) SetTemperature(v float32) {
	o.Temperature = &v
}

// GetTint returns the Tint field value if set, zero value otherwise.
func (o *ImageFilters) GetTint() float32 {
	if o == nil || IsNil(o.Tint) {
		var ret float32
		return ret
	}
	return *o.Tint
}

// GetTintOk returns a tuple with the Tint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFilters) GetTintOk() (*float32, bool) {
	if o == nil || IsNil(o.Tint) {
		return nil, false
	}
	return o.Tint, true
}

// HasTint returns a boolean if a field has been set.
func (o *ImageFilters) HasTint() bool {
	if o != nil && !IsNil(o.Tint) {
		return true
	}

	return false
}

// SetTint gets a reference to the given float32 and assigns it to the Tint field.
func (o *ImageFilters) SetTint(v float32) {
	o.Tint = &v
}

// GetHighlights returns the Highlights field value if set, zero value otherwise.
func (o *ImageFilters) GetHighlights() float32 {
	if o == nil || IsNil(o.Highlights) {
		var ret float32
		return ret
	}
	return *o.Highlights
}

// GetHighlightsOk returns a tuple with the Highlights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFilters) GetHighlightsOk() (*float32, bool) {
	if o == nil || IsNil(o.Highlights) {
		return nil, false
	}
	return o.Highlights, true
}

// HasHighlights returns a boolean if a field has been set.
func (o *ImageFilters) HasHighlights() bool {
	if o != nil && !IsNil(o.Highlights) {
		return true
	}

	return false
}

// SetHighlights gets a reference to the given float32 and assigns it to the Highlights field.
func (o *ImageFilters) SetHighlights(v float32) {
	o.Highlights = &v
}

// GetShadows returns the Shadows field value if set, zero value otherwise.
func (o *ImageFilters) GetShadows() float32 {
	if o == nil || IsNil(o.Shadows) {
		var ret float32
		return ret
	}
	return *o.Shadows
}

// GetShadowsOk returns a tuple with the Shadows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFilters) GetShadowsOk() (*float32, bool) {
	if o == nil || IsNil(o.Shadows) {
		return nil, false
	}
	return o.Shadows, true
}

// HasShadows returns a boolean if a field has been set.
func (o *ImageFilters) HasShadows() bool {
	if o != nil && !IsNil(o.Shadows) {
		return true
	}

	return false
}

// SetShadows gets a reference to the given float32 and assigns it to the Shadows field.
func (o *ImageFilters) SetShadows(v float32) {
	o.Shadows = &v
}

func (o ImageFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exposure) {
		toSerialize["exposure"] = o.Exposure
	}
	if !IsNil(o.Contrast) {
		toSerialize["contrast"] = o.Contrast
	}
	if !IsNil(o.Saturation) {
		toSerialize["saturation"] = o.Saturation
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.Tint) {
		toSerialize["tint"] = o.Tint
	}
	if !IsNil(o.Highlights) {
		toSerialize["highlights"] = o.Highlights
	}
	if !IsNil(o.Shadows) {
		toSerialize["shadows"] = o.Shadows
	}
	return toSerialize, nil
}

type NullableImageFilters struct {
	value *ImageFilters
	isSet bool
}

func (v NullableImageFilters) Get() *ImageFilters {
	return v.value
}

func (v *NullableImageFilters) Set(val *ImageFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableImageFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableImageFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageFilters(val *ImageFilters) *NullableImageFilters {
	return &NullableImageFilters{value: val, isSet: true}
}

func (v NullableImageFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MeasurementStartEnd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeasurementStartEnd{}

// MeasurementStartEnd The node and side a measurement is pinned to
type MeasurementStartEnd struct {
	NodeId string `json:"nodeId"`
	Side string `json:"side"`
}

type _MeasurementStartEnd MeasurementStartEnd

// NewMeasurementStartEnd instantiates a new MeasurementStartEnd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeasurementStartEnd(nodeId string, side string) *MeasurementStartEnd {
	this := MeasurementStartEnd{}
	this.NodeId = nodeId
	this.Side = side
	return &this
}

// NewMeasurementStartEndWithDefaults instantiates a new MeasurementStartEnd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeasurementStartEndWithDefaults() *MeasurementStartEnd {
	this := MeasurementStartEnd{}
	return &this
}

// GetNodeId returns the NodeId field value
func (o *MeasurementStartEnd) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *MeasurementStartEnd) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *MeasurementStartEnd) SetNodeId(v string) {
	o.NodeId = v
}

// GetSide returns the Side field value
func (o *MeasurementStartEnd) GetSide() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *MeasurementStartEnd) GetSideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *MeasurementStartEnd) SetSide(v string) {
	o.Side = v
}

func (o MeasurementStartEnd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeasurementStartEnd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodeId"] = o.NodeId
	toSerialize["side"] = o.Side
	return toSerialize, nil
}

func (o *MeasurementStartEnd) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeId",
		"side",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeasurementStartEnd := _MeasurementStartEnd{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeasurementStartEnd)

	if err != nil {
		return err
	}

	*o = MeasurementStartEnd(varMeasurementStartEnd)

	return err
}

type NullableMeasurementStartEnd struct {
	value *MeasurementStartEnd
	isSet bool
}

func (v NullableMeasurementStartEnd) Get() *MeasurementStartEnd {
	return v.value
}

func (v *NullableMeasurementStartEnd) Set(val *MeasurementStartEnd) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurementStartEnd) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurementStartEnd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurementStartEnd(val *MeasurementStartEnd) *NullableMeasurementStartEnd {
	return &NullableMeasurementStartEnd{value: val, isSet: true}
}

func (v NullableMeasurementStartEnd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurementStartEnd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



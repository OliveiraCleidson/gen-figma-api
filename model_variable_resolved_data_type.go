/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VariableResolvedDataType Defines the types of data a VariableData object can eventually equal
type VariableResolvedDataType string



// All allowed values of VariableResolvedDataType enum
var AllowedVariableResolvedDataTypeEnumValues = []VariableResolvedDataType{
	"BOOLEAN",
	"FLOAT",
	"STRING",
	"COLOR",
}

func (v *VariableResolvedDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VariableResolvedDataType(value)
	for _, existing := range AllowedVariableResolvedDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VariableResolvedDataType", value)
}

// NewVariableResolvedDataTypeFromValue returns a pointer to a valid VariableResolvedDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVariableResolvedDataTypeFromValue(v string) (*VariableResolvedDataType, error) {
	ev := VariableResolvedDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VariableResolvedDataType: valid values are %v", v, AllowedVariableResolvedDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VariableResolvedDataType) IsValid() bool {
	for _, existing := range AllowedVariableResolvedDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VariableResolvedDataType value
func (v VariableResolvedDataType) Ptr() *VariableResolvedDataType {
	return &v
}

type NullableVariableResolvedDataType struct {
	value *VariableResolvedDataType
	isSet bool
}

func (v NullableVariableResolvedDataType) Get() *VariableResolvedDataType {
	return v.value
}

func (v *NullableVariableResolvedDataType) Set(val *VariableResolvedDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableResolvedDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableResolvedDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableResolvedDataType(val *VariableResolvedDataType) *NullableVariableResolvedDataType {
	return &NullableVariableResolvedDataType{value: val, isSet: true}
}

func (v NullableVariableResolvedDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableResolvedDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublishedComponentSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublishedComponentSet{}

// PublishedComponentSet A node containing a set of variants of a component.
type PublishedComponentSet struct {
	// The unique identifier for the component set.
	Key string `json:"key"`
	// The unique identifier of the Figma file that contains the component set.
	FileKey string `json:"file_key"`
	// The unique identifier of the component set node within the Figma file.
	NodeId string `json:"node_id"`
	// A URL to a thumbnail image of the component set.
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`
	// The name of the component set.
	Name string `json:"name"`
	// The description of the component set as entered by the publisher.
	Description string `json:"description"`
	// The UTC ISO 8601 time when the component set was created.
	CreatedAt time.Time `json:"created_at"`
	// The UTC ISO 8601 time when the component set was last updated.
	UpdatedAt time.Time `json:"updated_at"`
	// The user who last updated the component set.
	User User `json:"user"`
	// The containing frame of the component set.
	ContainingFrame *FrameInfo `json:"containing_frame,omitempty"`
}

type _PublishedComponentSet PublishedComponentSet

// NewPublishedComponentSet instantiates a new PublishedComponentSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishedComponentSet(key string, fileKey string, nodeId string, name string, description string, createdAt time.Time, updatedAt time.Time, user User) *PublishedComponentSet {
	this := PublishedComponentSet{}
	this.Key = key
	this.FileKey = fileKey
	this.NodeId = nodeId
	this.Name = name
	this.Description = description
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.User = user
	return &this
}

// NewPublishedComponentSetWithDefaults instantiates a new PublishedComponentSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishedComponentSetWithDefaults() *PublishedComponentSet {
	this := PublishedComponentSet{}
	return &this
}

// GetKey returns the Key field value
func (o *PublishedComponentSet) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *PublishedComponentSet) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *PublishedComponentSet) SetKey(v string) {
	o.Key = v
}

// GetFileKey returns the FileKey field value
func (o *PublishedComponentSet) GetFileKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileKey
}

// GetFileKeyOk returns a tuple with the FileKey field value
// and a boolean to check if the value has been set.
func (o *PublishedComponentSet) GetFileKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileKey, true
}

// SetFileKey sets field value
func (o *PublishedComponentSet) SetFileKey(v string) {
	o.FileKey = v
}

// GetNodeId returns the NodeId field value
func (o *PublishedComponentSet) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *PublishedComponentSet) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *PublishedComponentSet) SetNodeId(v string) {
	o.NodeId = v
}

// GetThumbnailUrl returns the ThumbnailUrl field value if set, zero value otherwise.
func (o *PublishedComponentSet) GetThumbnailUrl() string {
	if o == nil || IsNil(o.ThumbnailUrl) {
		var ret string
		return ret
	}
	return *o.ThumbnailUrl
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishedComponentSet) GetThumbnailUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ThumbnailUrl) {
		return nil, false
	}
	return o.ThumbnailUrl, true
}

// HasThumbnailUrl returns a boolean if a field has been set.
func (o *PublishedComponentSet) HasThumbnailUrl() bool {
	if o != nil && !IsNil(o.ThumbnailUrl) {
		return true
	}

	return false
}

// SetThumbnailUrl gets a reference to the given string and assigns it to the ThumbnailUrl field.
func (o *PublishedComponentSet) SetThumbnailUrl(v string) {
	o.ThumbnailUrl = &v
}

// GetName returns the Name field value
func (o *PublishedComponentSet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublishedComponentSet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublishedComponentSet) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *PublishedComponentSet) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PublishedComponentSet) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PublishedComponentSet) SetDescription(v string) {
	o.Description = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PublishedComponentSet) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PublishedComponentSet) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PublishedComponentSet) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PublishedComponentSet) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PublishedComponentSet) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PublishedComponentSet) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUser returns the User field value
func (o *PublishedComponentSet) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *PublishedComponentSet) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *PublishedComponentSet) SetUser(v User) {
	o.User = v
}

// GetContainingFrame returns the ContainingFrame field value if set, zero value otherwise.
func (o *PublishedComponentSet) GetContainingFrame() FrameInfo {
	if o == nil || IsNil(o.ContainingFrame) {
		var ret FrameInfo
		return ret
	}
	return *o.ContainingFrame
}

// GetContainingFrameOk returns a tuple with the ContainingFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishedComponentSet) GetContainingFrameOk() (*FrameInfo, bool) {
	if o == nil || IsNil(o.ContainingFrame) {
		return nil, false
	}
	return o.ContainingFrame, true
}

// HasContainingFrame returns a boolean if a field has been set.
func (o *PublishedComponentSet) HasContainingFrame() bool {
	if o != nil && !IsNil(o.ContainingFrame) {
		return true
	}

	return false
}

// SetContainingFrame gets a reference to the given FrameInfo and assigns it to the ContainingFrame field.
func (o *PublishedComponentSet) SetContainingFrame(v FrameInfo) {
	o.ContainingFrame = &v
}

func (o PublishedComponentSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublishedComponentSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["file_key"] = o.FileKey
	toSerialize["node_id"] = o.NodeId
	if !IsNil(o.ThumbnailUrl) {
		toSerialize["thumbnail_url"] = o.ThumbnailUrl
	}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["user"] = o.User
	if !IsNil(o.ContainingFrame) {
		toSerialize["containing_frame"] = o.ContainingFrame
	}
	return toSerialize, nil
}

func (o *PublishedComponentSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"file_key",
		"node_id",
		"name",
		"description",
		"created_at",
		"updated_at",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublishedComponentSet := _PublishedComponentSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublishedComponentSet)

	if err != nil {
		return err
	}

	*o = PublishedComponentSet(varPublishedComponentSet)

	return err
}

type NullablePublishedComponentSet struct {
	value *PublishedComponentSet
	isSet bool
}

func (v NullablePublishedComponentSet) Get() *PublishedComponentSet {
	return v.value
}

func (v *NullablePublishedComponentSet) Set(val *PublishedComponentSet) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishedComponentSet) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishedComponentSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishedComponentSet(val *PublishedComponentSet) *NullablePublishedComponentSet {
	return &NullablePublishedComponentSet{value: val, isSet: true}
}

func (v NullablePublishedComponentSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishedComponentSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



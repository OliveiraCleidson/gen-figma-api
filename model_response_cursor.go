/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResponseCursor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseCursor{}

// ResponseCursor Pagination cursor
type ResponseCursor struct {
	Before *float32 `json:"before,omitempty"`
	After *float32 `json:"after,omitempty"`
}

// NewResponseCursor instantiates a new ResponseCursor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseCursor() *ResponseCursor {
	this := ResponseCursor{}
	return &this
}

// NewResponseCursorWithDefaults instantiates a new ResponseCursor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseCursorWithDefaults() *ResponseCursor {
	this := ResponseCursor{}
	return &this
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *ResponseCursor) GetBefore() float32 {
	if o == nil || IsNil(o.Before) {
		var ret float32
		return ret
	}
	return *o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCursor) GetBeforeOk() (*float32, bool) {
	if o == nil || IsNil(o.Before) {
		return nil, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *ResponseCursor) HasBefore() bool {
	if o != nil && !IsNil(o.Before) {
		return true
	}

	return false
}

// SetBefore gets a reference to the given float32 and assigns it to the Before field.
func (o *ResponseCursor) SetBefore(v float32) {
	o.Before = &v
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *ResponseCursor) GetAfter() float32 {
	if o == nil || IsNil(o.After) {
		var ret float32
		return ret
	}
	return *o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseCursor) GetAfterOk() (*float32, bool) {
	if o == nil || IsNil(o.After) {
		return nil, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *ResponseCursor) HasAfter() bool {
	if o != nil && !IsNil(o.After) {
		return true
	}

	return false
}

// SetAfter gets a reference to the given float32 and assigns it to the After field.
func (o *ResponseCursor) SetAfter(v float32) {
	o.After = &v
}

func (o ResponseCursor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseCursor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Before) {
		toSerialize["before"] = o.Before
	}
	if !IsNil(o.After) {
		toSerialize["after"] = o.After
	}
	return toSerialize, nil
}

type NullableResponseCursor struct {
	value *ResponseCursor
	isSet bool
}

func (v NullableResponseCursor) Get() *ResponseCursor {
	return v.value
}

func (v *NullableResponseCursor) Set(val *ResponseCursor) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseCursor) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseCursor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseCursor(val *ResponseCursor) *NullableResponseCursor {
	return &NullableResponseCursor{value: val, isSet: true}
}

func (v NullableResponseCursor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseCursor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



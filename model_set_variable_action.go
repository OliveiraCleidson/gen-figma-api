/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetVariableAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetVariableAction{}

// SetVariableAction Sets a variable to a specific value.
type SetVariableAction struct {
	Type string `json:"type"`
	VariableId NullableString `json:"variableId"`
	VariableValue *VariableData `json:"variableValue,omitempty"`
}

type _SetVariableAction SetVariableAction

// NewSetVariableAction instantiates a new SetVariableAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetVariableAction(type_ string, variableId NullableString) *SetVariableAction {
	this := SetVariableAction{}
	this.Type = type_
	this.VariableId = variableId
	return &this
}

// NewSetVariableActionWithDefaults instantiates a new SetVariableAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetVariableActionWithDefaults() *SetVariableAction {
	this := SetVariableAction{}
	return &this
}

// GetType returns the Type field value
func (o *SetVariableAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SetVariableAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SetVariableAction) SetType(v string) {
	o.Type = v
}

// GetVariableId returns the VariableId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SetVariableAction) GetVariableId() string {
	if o == nil || o.VariableId.Get() == nil {
		var ret string
		return ret
	}

	return *o.VariableId.Get()
}

// GetVariableIdOk returns a tuple with the VariableId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetVariableAction) GetVariableIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableId.Get(), o.VariableId.IsSet()
}

// SetVariableId sets field value
func (o *SetVariableAction) SetVariableId(v string) {
	o.VariableId.Set(&v)
}

// GetVariableValue returns the VariableValue field value if set, zero value otherwise.
func (o *SetVariableAction) GetVariableValue() VariableData {
	if o == nil || IsNil(o.VariableValue) {
		var ret VariableData
		return ret
	}
	return *o.VariableValue
}

// GetVariableValueOk returns a tuple with the VariableValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetVariableAction) GetVariableValueOk() (*VariableData, bool) {
	if o == nil || IsNil(o.VariableValue) {
		return nil, false
	}
	return o.VariableValue, true
}

// HasVariableValue returns a boolean if a field has been set.
func (o *SetVariableAction) HasVariableValue() bool {
	if o != nil && !IsNil(o.VariableValue) {
		return true
	}

	return false
}

// SetVariableValue gets a reference to the given VariableData and assigns it to the VariableValue field.
func (o *SetVariableAction) SetVariableValue(v VariableData) {
	o.VariableValue = &v
}

func (o SetVariableAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetVariableAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["variableId"] = o.VariableId.Get()
	if !IsNil(o.VariableValue) {
		toSerialize["variableValue"] = o.VariableValue
	}
	return toSerialize, nil
}

func (o *SetVariableAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"variableId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetVariableAction := _SetVariableAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetVariableAction)

	if err != nil {
		return err
	}

	*o = SetVariableAction(varSetVariableAction)

	return err
}

type NullableSetVariableAction struct {
	value *SetVariableAction
	isSet bool
}

func (v NullableSetVariableAction) Get() *SetVariableAction {
	return v.value
}

func (v *NullableSetVariableAction) Set(val *SetVariableAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSetVariableAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSetVariableAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetVariableAction(val *SetVariableAction) *NullableSetVariableAction {
	return &NullableSetVariableAction{value: val, isSet: true}
}

func (v NullableSetVariableAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetVariableAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VariableCodeSyntax type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableCodeSyntax{}

// VariableCodeSyntax An object containing platform-specific code syntax definitions for a variable. All platforms are optional.
type VariableCodeSyntax struct {
	WEB *string `json:"WEB,omitempty"`
	ANDROID *string `json:"ANDROID,omitempty"`
	IOS *string `json:"iOS,omitempty"`
}

// NewVariableCodeSyntax instantiates a new VariableCodeSyntax object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableCodeSyntax() *VariableCodeSyntax {
	this := VariableCodeSyntax{}
	return &this
}

// NewVariableCodeSyntaxWithDefaults instantiates a new VariableCodeSyntax object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableCodeSyntaxWithDefaults() *VariableCodeSyntax {
	this := VariableCodeSyntax{}
	return &this
}

// GetWEB returns the WEB field value if set, zero value otherwise.
func (o *VariableCodeSyntax) GetWEB() string {
	if o == nil || IsNil(o.WEB) {
		var ret string
		return ret
	}
	return *o.WEB
}

// GetWEBOk returns a tuple with the WEB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableCodeSyntax) GetWEBOk() (*string, bool) {
	if o == nil || IsNil(o.WEB) {
		return nil, false
	}
	return o.WEB, true
}

// HasWEB returns a boolean if a field has been set.
func (o *VariableCodeSyntax) HasWEB() bool {
	if o != nil && !IsNil(o.WEB) {
		return true
	}

	return false
}

// SetWEB gets a reference to the given string and assigns it to the WEB field.
func (o *VariableCodeSyntax) SetWEB(v string) {
	o.WEB = &v
}

// GetANDROID returns the ANDROID field value if set, zero value otherwise.
func (o *VariableCodeSyntax) GetANDROID() string {
	if o == nil || IsNil(o.ANDROID) {
		var ret string
		return ret
	}
	return *o.ANDROID
}

// GetANDROIDOk returns a tuple with the ANDROID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableCodeSyntax) GetANDROIDOk() (*string, bool) {
	if o == nil || IsNil(o.ANDROID) {
		return nil, false
	}
	return o.ANDROID, true
}

// HasANDROID returns a boolean if a field has been set.
func (o *VariableCodeSyntax) HasANDROID() bool {
	if o != nil && !IsNil(o.ANDROID) {
		return true
	}

	return false
}

// SetANDROID gets a reference to the given string and assigns it to the ANDROID field.
func (o *VariableCodeSyntax) SetANDROID(v string) {
	o.ANDROID = &v
}

// GetIOS returns the IOS field value if set, zero value otherwise.
func (o *VariableCodeSyntax) GetIOS() string {
	if o == nil || IsNil(o.IOS) {
		var ret string
		return ret
	}
	return *o.IOS
}

// GetIOSOk returns a tuple with the IOS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableCodeSyntax) GetIOSOk() (*string, bool) {
	if o == nil || IsNil(o.IOS) {
		return nil, false
	}
	return o.IOS, true
}

// HasIOS returns a boolean if a field has been set.
func (o *VariableCodeSyntax) HasIOS() bool {
	if o != nil && !IsNil(o.IOS) {
		return true
	}

	return false
}

// SetIOS gets a reference to the given string and assigns it to the IOS field.
func (o *VariableCodeSyntax) SetIOS(v string) {
	o.IOS = &v
}

func (o VariableCodeSyntax) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableCodeSyntax) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.WEB) {
		toSerialize["WEB"] = o.WEB
	}
	if !IsNil(o.ANDROID) {
		toSerialize["ANDROID"] = o.ANDROID
	}
	if !IsNil(o.IOS) {
		toSerialize["iOS"] = o.IOS
	}
	return toSerialize, nil
}

type NullableVariableCodeSyntax struct {
	value *VariableCodeSyntax
	isSet bool
}

func (v NullableVariableCodeSyntax) Get() *VariableCodeSyntax {
	return v.value
}

func (v *NullableVariableCodeSyntax) Set(val *VariableCodeSyntax) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableCodeSyntax) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableCodeSyntax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableCodeSyntax(val *VariableCodeSyntax) *NullableVariableCodeSyntax {
	return &NullableVariableCodeSyntax{value: val, isSet: true}
}

func (v NullableVariableCodeSyntax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableCodeSyntax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



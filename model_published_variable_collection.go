/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PublishedVariableCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublishedVariableCollection{}

// PublishedVariableCollection A grouping of related Variable objects each with the same modes.
type PublishedVariableCollection struct {
	// The unique identifier of this variable collection.
	Id string `json:"id"`
	// The ID of the variable collection that is used by subscribing files. This ID changes every time the variable collection is modified and published.
	SubscribedId string `json:"subscribed_id"`
	// The name of this variable collection.
	Name string `json:"name"`
	// The key of this variable collection.
	Key string `json:"key"`
	// The UTC ISO 8601 time at which the variable collection was last updated.  This timestamp will change any time a variable in the collection is changed.
	UpdatedAt time.Time `json:"updatedAt"`
}

type _PublishedVariableCollection PublishedVariableCollection

// NewPublishedVariableCollection instantiates a new PublishedVariableCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishedVariableCollection(id string, subscribedId string, name string, key string, updatedAt time.Time) *PublishedVariableCollection {
	this := PublishedVariableCollection{}
	this.Id = id
	this.SubscribedId = subscribedId
	this.Name = name
	this.Key = key
	this.UpdatedAt = updatedAt
	return &this
}

// NewPublishedVariableCollectionWithDefaults instantiates a new PublishedVariableCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishedVariableCollectionWithDefaults() *PublishedVariableCollection {
	this := PublishedVariableCollection{}
	return &this
}

// GetId returns the Id field value
func (o *PublishedVariableCollection) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublishedVariableCollection) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublishedVariableCollection) SetId(v string) {
	o.Id = v
}

// GetSubscribedId returns the SubscribedId field value
func (o *PublishedVariableCollection) GetSubscribedId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscribedId
}

// GetSubscribedIdOk returns a tuple with the SubscribedId field value
// and a boolean to check if the value has been set.
func (o *PublishedVariableCollection) GetSubscribedIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscribedId, true
}

// SetSubscribedId sets field value
func (o *PublishedVariableCollection) SetSubscribedId(v string) {
	o.SubscribedId = v
}

// GetName returns the Name field value
func (o *PublishedVariableCollection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublishedVariableCollection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublishedVariableCollection) SetName(v string) {
	o.Name = v
}

// GetKey returns the Key field value
func (o *PublishedVariableCollection) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *PublishedVariableCollection) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *PublishedVariableCollection) SetKey(v string) {
	o.Key = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PublishedVariableCollection) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PublishedVariableCollection) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PublishedVariableCollection) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o PublishedVariableCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublishedVariableCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["subscribed_id"] = o.SubscribedId
	toSerialize["name"] = o.Name
	toSerialize["key"] = o.Key
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *PublishedVariableCollection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"subscribed_id",
		"name",
		"key",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublishedVariableCollection := _PublishedVariableCollection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublishedVariableCollection)

	if err != nil {
		return err
	}

	*o = PublishedVariableCollection(varPublishedVariableCollection)

	return err
}

type NullablePublishedVariableCollection struct {
	value *PublishedVariableCollection
	isSet bool
}

func (v NullablePublishedVariableCollection) Get() *PublishedVariableCollection {
	return v.value
}

func (v *NullablePublishedVariableCollection) Set(val *PublishedVariableCollection) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishedVariableCollection) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishedVariableCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishedVariableCollection(val *PublishedVariableCollection) *NullablePublishedVariableCollection {
	return &NullablePublishedVariableCollection{value: val, isSet: true}
}

func (v NullablePublishedVariableCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishedVariableCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



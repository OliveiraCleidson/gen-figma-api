/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ComponentPropertyDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentPropertyDefinition{}

// ComponentPropertyDefinition A property of a component.
type ComponentPropertyDefinition struct {
	// Type of this component property.
	Type ComponentPropertyType `json:"type"`
	DefaultValue ComponentPropertyDefinitionDefaultValue `json:"defaultValue"`
	// All possible values for this property. Only exists on VARIANT properties.
	VariantOptions []string `json:"variantOptions,omitempty"`
	// Preferred values for this property. Only applicable if type is `INSTANCE_SWAP`.
	PreferredValues []InstanceSwapPreferredValue `json:"preferredValues,omitempty"`
}

type _ComponentPropertyDefinition ComponentPropertyDefinition

// NewComponentPropertyDefinition instantiates a new ComponentPropertyDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentPropertyDefinition(type_ ComponentPropertyType, defaultValue ComponentPropertyDefinitionDefaultValue) *ComponentPropertyDefinition {
	this := ComponentPropertyDefinition{}
	this.Type = type_
	this.DefaultValue = defaultValue
	return &this
}

// NewComponentPropertyDefinitionWithDefaults instantiates a new ComponentPropertyDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentPropertyDefinitionWithDefaults() *ComponentPropertyDefinition {
	this := ComponentPropertyDefinition{}
	return &this
}

// GetType returns the Type field value
func (o *ComponentPropertyDefinition) GetType() ComponentPropertyType {
	if o == nil {
		var ret ComponentPropertyType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ComponentPropertyDefinition) GetTypeOk() (*ComponentPropertyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ComponentPropertyDefinition) SetType(v ComponentPropertyType) {
	o.Type = v
}

// GetDefaultValue returns the DefaultValue field value
func (o *ComponentPropertyDefinition) GetDefaultValue() ComponentPropertyDefinitionDefaultValue {
	if o == nil {
		var ret ComponentPropertyDefinitionDefaultValue
		return ret
	}

	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value
// and a boolean to check if the value has been set.
func (o *ComponentPropertyDefinition) GetDefaultValueOk() (*ComponentPropertyDefinitionDefaultValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultValue, true
}

// SetDefaultValue sets field value
func (o *ComponentPropertyDefinition) SetDefaultValue(v ComponentPropertyDefinitionDefaultValue) {
	o.DefaultValue = v
}

// GetVariantOptions returns the VariantOptions field value if set, zero value otherwise.
func (o *ComponentPropertyDefinition) GetVariantOptions() []string {
	if o == nil || IsNil(o.VariantOptions) {
		var ret []string
		return ret
	}
	return o.VariantOptions
}

// GetVariantOptionsOk returns a tuple with the VariantOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentPropertyDefinition) GetVariantOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.VariantOptions) {
		return nil, false
	}
	return o.VariantOptions, true
}

// HasVariantOptions returns a boolean if a field has been set.
func (o *ComponentPropertyDefinition) HasVariantOptions() bool {
	if o != nil && !IsNil(o.VariantOptions) {
		return true
	}

	return false
}

// SetVariantOptions gets a reference to the given []string and assigns it to the VariantOptions field.
func (o *ComponentPropertyDefinition) SetVariantOptions(v []string) {
	o.VariantOptions = v
}

// GetPreferredValues returns the PreferredValues field value if set, zero value otherwise.
func (o *ComponentPropertyDefinition) GetPreferredValues() []InstanceSwapPreferredValue {
	if o == nil || IsNil(o.PreferredValues) {
		var ret []InstanceSwapPreferredValue
		return ret
	}
	return o.PreferredValues
}

// GetPreferredValuesOk returns a tuple with the PreferredValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentPropertyDefinition) GetPreferredValuesOk() ([]InstanceSwapPreferredValue, bool) {
	if o == nil || IsNil(o.PreferredValues) {
		return nil, false
	}
	return o.PreferredValues, true
}

// HasPreferredValues returns a boolean if a field has been set.
func (o *ComponentPropertyDefinition) HasPreferredValues() bool {
	if o != nil && !IsNil(o.PreferredValues) {
		return true
	}

	return false
}

// SetPreferredValues gets a reference to the given []InstanceSwapPreferredValue and assigns it to the PreferredValues field.
func (o *ComponentPropertyDefinition) SetPreferredValues(v []InstanceSwapPreferredValue) {
	o.PreferredValues = v
}

func (o ComponentPropertyDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentPropertyDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["defaultValue"] = o.DefaultValue
	if !IsNil(o.VariantOptions) {
		toSerialize["variantOptions"] = o.VariantOptions
	}
	if !IsNil(o.PreferredValues) {
		toSerialize["preferredValues"] = o.PreferredValues
	}
	return toSerialize, nil
}

func (o *ComponentPropertyDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"defaultValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComponentPropertyDefinition := _ComponentPropertyDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComponentPropertyDefinition)

	if err != nil {
		return err
	}

	*o = ComponentPropertyDefinition(varComponentPropertyDefinition)

	return err
}

type NullableComponentPropertyDefinition struct {
	value *ComponentPropertyDefinition
	isSet bool
}

func (v NullableComponentPropertyDefinition) Get() *ComponentPropertyDefinition {
	return v.value
}

func (v *NullableComponentPropertyDefinition) Set(val *ComponentPropertyDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentPropertyDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentPropertyDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentPropertyDefinition(val *ComponentPropertyDefinition) *NullableComponentPropertyDefinition {
	return &NullableComponentPropertyDefinition{value: val, isSet: true}
}

func (v NullableComponentPropertyDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentPropertyDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



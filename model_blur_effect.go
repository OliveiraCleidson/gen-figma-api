/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlurEffect type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlurEffect{}

// BlurEffect A blur effect
type BlurEffect struct {
	// A string literal representing the effect's type. Always check the type before reading other properties.
	Type string `json:"type"`
	// Whether this blur is active.
	Visible bool `json:"visible"`
	// Radius of the blur effect
	Radius float32 `json:"radius"`
	BoundVariables *BlurEffectBoundVariables `json:"boundVariables,omitempty"`
}

type _BlurEffect BlurEffect

// NewBlurEffect instantiates a new BlurEffect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlurEffect(type_ string, visible bool, radius float32) *BlurEffect {
	this := BlurEffect{}
	this.Type = type_
	this.Visible = visible
	this.Radius = radius
	return &this
}

// NewBlurEffectWithDefaults instantiates a new BlurEffect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlurEffectWithDefaults() *BlurEffect {
	this := BlurEffect{}
	return &this
}

// GetType returns the Type field value
func (o *BlurEffect) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BlurEffect) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BlurEffect) SetType(v string) {
	o.Type = v
}

// GetVisible returns the Visible field value
func (o *BlurEffect) GetVisible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value
// and a boolean to check if the value has been set.
func (o *BlurEffect) GetVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visible, true
}

// SetVisible sets field value
func (o *BlurEffect) SetVisible(v bool) {
	o.Visible = v
}

// GetRadius returns the Radius field value
func (o *BlurEffect) GetRadius() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Radius
}

// GetRadiusOk returns a tuple with the Radius field value
// and a boolean to check if the value has been set.
func (o *BlurEffect) GetRadiusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Radius, true
}

// SetRadius sets field value
func (o *BlurEffect) SetRadius(v float32) {
	o.Radius = v
}

// GetBoundVariables returns the BoundVariables field value if set, zero value otherwise.
func (o *BlurEffect) GetBoundVariables() BlurEffectBoundVariables {
	if o == nil || IsNil(o.BoundVariables) {
		var ret BlurEffectBoundVariables
		return ret
	}
	return *o.BoundVariables
}

// GetBoundVariablesOk returns a tuple with the BoundVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlurEffect) GetBoundVariablesOk() (*BlurEffectBoundVariables, bool) {
	if o == nil || IsNil(o.BoundVariables) {
		return nil, false
	}
	return o.BoundVariables, true
}

// HasBoundVariables returns a boolean if a field has been set.
func (o *BlurEffect) HasBoundVariables() bool {
	if o != nil && !IsNil(o.BoundVariables) {
		return true
	}

	return false
}

// SetBoundVariables gets a reference to the given BlurEffectBoundVariables and assigns it to the BoundVariables field.
func (o *BlurEffect) SetBoundVariables(v BlurEffectBoundVariables) {
	o.BoundVariables = &v
}

func (o BlurEffect) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlurEffect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["visible"] = o.Visible
	toSerialize["radius"] = o.Radius
	if !IsNil(o.BoundVariables) {
		toSerialize["boundVariables"] = o.BoundVariables
	}
	return toSerialize, nil
}

func (o *BlurEffect) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"visible",
		"radius",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlurEffect := _BlurEffect{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlurEffect)

	if err != nil {
		return err
	}

	*o = BlurEffect(varBlurEffect)

	return err
}

type NullableBlurEffect struct {
	value *BlurEffect
	isSet bool
}

func (v NullableBlurEffect) Get() *BlurEffect {
	return v.value
}

func (v *NullableBlurEffect) Set(val *BlurEffect) {
	v.value = val
	v.isSet = true
}

func (v NullableBlurEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableBlurEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlurEffect(val *BlurEffect) *NullableBlurEffect {
	return &NullableBlurEffect{value: val, isSet: true}
}

func (v NullableBlurEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlurEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



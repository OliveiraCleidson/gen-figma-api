/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// Action - An action that is performed when a trigger is activated.
type Action struct {
	ActionOneOf *ActionOneOf
	ConditionalAction *ConditionalAction
	NodeAction *NodeAction
	OpenURLAction *OpenURLAction
	SetVariableAction *SetVariableAction
	SetVariableModeAction *SetVariableModeAction
	UpdateMediaRuntimeAction *UpdateMediaRuntimeAction
}

// ActionOneOfAsAction is a convenience function that returns ActionOneOf wrapped in Action
func ActionOneOfAsAction(v *ActionOneOf) Action {
	return Action{
		ActionOneOf: v,
	}
}

// ConditionalActionAsAction is a convenience function that returns ConditionalAction wrapped in Action
func ConditionalActionAsAction(v *ConditionalAction) Action {
	return Action{
		ConditionalAction: v,
	}
}

// NodeActionAsAction is a convenience function that returns NodeAction wrapped in Action
func NodeActionAsAction(v *NodeAction) Action {
	return Action{
		NodeAction: v,
	}
}

// OpenURLActionAsAction is a convenience function that returns OpenURLAction wrapped in Action
func OpenURLActionAsAction(v *OpenURLAction) Action {
	return Action{
		OpenURLAction: v,
	}
}

// SetVariableActionAsAction is a convenience function that returns SetVariableAction wrapped in Action
func SetVariableActionAsAction(v *SetVariableAction) Action {
	return Action{
		SetVariableAction: v,
	}
}

// SetVariableModeActionAsAction is a convenience function that returns SetVariableModeAction wrapped in Action
func SetVariableModeActionAsAction(v *SetVariableModeAction) Action {
	return Action{
		SetVariableModeAction: v,
	}
}

// UpdateMediaRuntimeActionAsAction is a convenience function that returns UpdateMediaRuntimeAction wrapped in Action
func UpdateMediaRuntimeActionAsAction(v *UpdateMediaRuntimeAction) Action {
	return Action{
		UpdateMediaRuntimeAction: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Action) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActionOneOf
	err = newStrictDecoder(data).Decode(&dst.ActionOneOf)
	if err == nil {
		jsonActionOneOf, _ := json.Marshal(dst.ActionOneOf)
		if string(jsonActionOneOf) == "{}" { // empty struct
			dst.ActionOneOf = nil
		} else {
			if err = validator.Validate(dst.ActionOneOf); err != nil {
				dst.ActionOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActionOneOf = nil
	}

	// try to unmarshal data into ConditionalAction
	err = newStrictDecoder(data).Decode(&dst.ConditionalAction)
	if err == nil {
		jsonConditionalAction, _ := json.Marshal(dst.ConditionalAction)
		if string(jsonConditionalAction) == "{}" { // empty struct
			dst.ConditionalAction = nil
		} else {
			if err = validator.Validate(dst.ConditionalAction); err != nil {
				dst.ConditionalAction = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConditionalAction = nil
	}

	// try to unmarshal data into NodeAction
	err = newStrictDecoder(data).Decode(&dst.NodeAction)
	if err == nil {
		jsonNodeAction, _ := json.Marshal(dst.NodeAction)
		if string(jsonNodeAction) == "{}" { // empty struct
			dst.NodeAction = nil
		} else {
			if err = validator.Validate(dst.NodeAction); err != nil {
				dst.NodeAction = nil
			} else {
				match++
			}
		}
	} else {
		dst.NodeAction = nil
	}

	// try to unmarshal data into OpenURLAction
	err = newStrictDecoder(data).Decode(&dst.OpenURLAction)
	if err == nil {
		jsonOpenURLAction, _ := json.Marshal(dst.OpenURLAction)
		if string(jsonOpenURLAction) == "{}" { // empty struct
			dst.OpenURLAction = nil
		} else {
			if err = validator.Validate(dst.OpenURLAction); err != nil {
				dst.OpenURLAction = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenURLAction = nil
	}

	// try to unmarshal data into SetVariableAction
	err = newStrictDecoder(data).Decode(&dst.SetVariableAction)
	if err == nil {
		jsonSetVariableAction, _ := json.Marshal(dst.SetVariableAction)
		if string(jsonSetVariableAction) == "{}" { // empty struct
			dst.SetVariableAction = nil
		} else {
			if err = validator.Validate(dst.SetVariableAction); err != nil {
				dst.SetVariableAction = nil
			} else {
				match++
			}
		}
	} else {
		dst.SetVariableAction = nil
	}

	// try to unmarshal data into SetVariableModeAction
	err = newStrictDecoder(data).Decode(&dst.SetVariableModeAction)
	if err == nil {
		jsonSetVariableModeAction, _ := json.Marshal(dst.SetVariableModeAction)
		if string(jsonSetVariableModeAction) == "{}" { // empty struct
			dst.SetVariableModeAction = nil
		} else {
			if err = validator.Validate(dst.SetVariableModeAction); err != nil {
				dst.SetVariableModeAction = nil
			} else {
				match++
			}
		}
	} else {
		dst.SetVariableModeAction = nil
	}

	// try to unmarshal data into UpdateMediaRuntimeAction
	err = newStrictDecoder(data).Decode(&dst.UpdateMediaRuntimeAction)
	if err == nil {
		jsonUpdateMediaRuntimeAction, _ := json.Marshal(dst.UpdateMediaRuntimeAction)
		if string(jsonUpdateMediaRuntimeAction) == "{}" { // empty struct
			dst.UpdateMediaRuntimeAction = nil
		} else {
			if err = validator.Validate(dst.UpdateMediaRuntimeAction); err != nil {
				dst.UpdateMediaRuntimeAction = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateMediaRuntimeAction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActionOneOf = nil
		dst.ConditionalAction = nil
		dst.NodeAction = nil
		dst.OpenURLAction = nil
		dst.SetVariableAction = nil
		dst.SetVariableModeAction = nil
		dst.UpdateMediaRuntimeAction = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Action)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Action)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Action) MarshalJSON() ([]byte, error) {
	if src.ActionOneOf != nil {
		return json.Marshal(&src.ActionOneOf)
	}

	if src.ConditionalAction != nil {
		return json.Marshal(&src.ConditionalAction)
	}

	if src.NodeAction != nil {
		return json.Marshal(&src.NodeAction)
	}

	if src.OpenURLAction != nil {
		return json.Marshal(&src.OpenURLAction)
	}

	if src.SetVariableAction != nil {
		return json.Marshal(&src.SetVariableAction)
	}

	if src.SetVariableModeAction != nil {
		return json.Marshal(&src.SetVariableModeAction)
	}

	if src.UpdateMediaRuntimeAction != nil {
		return json.Marshal(&src.UpdateMediaRuntimeAction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Action) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ActionOneOf != nil {
		return obj.ActionOneOf
	}

	if obj.ConditionalAction != nil {
		return obj.ConditionalAction
	}

	if obj.NodeAction != nil {
		return obj.NodeAction
	}

	if obj.OpenURLAction != nil {
		return obj.OpenURLAction
	}

	if obj.SetVariableAction != nil {
		return obj.SetVariableAction
	}

	if obj.SetVariableModeAction != nil {
		return obj.SetVariableModeAction
	}

	if obj.UpdateMediaRuntimeAction != nil {
		return obj.UpdateMediaRuntimeAction
	}

	// all schemas are nil
	return nil
}

type NullableAction struct {
	value *Action
	isSet bool
}

func (v NullableAction) Get() *Action {
	return v.value
}

func (v *NullableAction) Set(val *Action) {
	v.value = val
	v.isSet = true
}

func (v NullableAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAction(val *Action) *NullableAction {
	return &NullableAction{value: val, isSet: true}
}

func (v NullableAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



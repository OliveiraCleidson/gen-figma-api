/*
Figma API

This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).

API version: 0.20.0
Contact: support@figma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HasBlendModeAndOpacityTrait type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HasBlendModeAndOpacityTrait{}

// HasBlendModeAndOpacityTrait struct for HasBlendModeAndOpacityTrait
type HasBlendModeAndOpacityTrait struct {
	// How this node blends with nodes behind it in the scene (see blend mode section for more details)
	BlendMode BlendMode `json:"blendMode"`
	// Opacity of the node
	Opacity *float32 `json:"opacity,omitempty"`
}

type _HasBlendModeAndOpacityTrait HasBlendModeAndOpacityTrait

// NewHasBlendModeAndOpacityTrait instantiates a new HasBlendModeAndOpacityTrait object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHasBlendModeAndOpacityTrait(blendMode BlendMode) *HasBlendModeAndOpacityTrait {
	this := HasBlendModeAndOpacityTrait{}
	this.BlendMode = blendMode
	var opacity float32 = 1
	this.Opacity = &opacity
	return &this
}

// NewHasBlendModeAndOpacityTraitWithDefaults instantiates a new HasBlendModeAndOpacityTrait object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHasBlendModeAndOpacityTraitWithDefaults() *HasBlendModeAndOpacityTrait {
	this := HasBlendModeAndOpacityTrait{}
	var opacity float32 = 1
	this.Opacity = &opacity
	return &this
}

// GetBlendMode returns the BlendMode field value
func (o *HasBlendModeAndOpacityTrait) GetBlendMode() BlendMode {
	if o == nil {
		var ret BlendMode
		return ret
	}

	return o.BlendMode
}

// GetBlendModeOk returns a tuple with the BlendMode field value
// and a boolean to check if the value has been set.
func (o *HasBlendModeAndOpacityTrait) GetBlendModeOk() (*BlendMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlendMode, true
}

// SetBlendMode sets field value
func (o *HasBlendModeAndOpacityTrait) SetBlendMode(v BlendMode) {
	o.BlendMode = v
}

// GetOpacity returns the Opacity field value if set, zero value otherwise.
func (o *HasBlendModeAndOpacityTrait) GetOpacity() float32 {
	if o == nil || IsNil(o.Opacity) {
		var ret float32
		return ret
	}
	return *o.Opacity
}

// GetOpacityOk returns a tuple with the Opacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HasBlendModeAndOpacityTrait) GetOpacityOk() (*float32, bool) {
	if o == nil || IsNil(o.Opacity) {
		return nil, false
	}
	return o.Opacity, true
}

// HasOpacity returns a boolean if a field has been set.
func (o *HasBlendModeAndOpacityTrait) HasOpacity() bool {
	if o != nil && !IsNil(o.Opacity) {
		return true
	}

	return false
}

// SetOpacity gets a reference to the given float32 and assigns it to the Opacity field.
func (o *HasBlendModeAndOpacityTrait) SetOpacity(v float32) {
	o.Opacity = &v
}

func (o HasBlendModeAndOpacityTrait) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HasBlendModeAndOpacityTrait) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blendMode"] = o.BlendMode
	if !IsNil(o.Opacity) {
		toSerialize["opacity"] = o.Opacity
	}
	return toSerialize, nil
}

func (o *HasBlendModeAndOpacityTrait) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blendMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHasBlendModeAndOpacityTrait := _HasBlendModeAndOpacityTrait{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHasBlendModeAndOpacityTrait)

	if err != nil {
		return err
	}

	*o = HasBlendModeAndOpacityTrait(varHasBlendModeAndOpacityTrait)

	return err
}

type NullableHasBlendModeAndOpacityTrait struct {
	value *HasBlendModeAndOpacityTrait
	isSet bool
}

func (v NullableHasBlendModeAndOpacityTrait) Get() *HasBlendModeAndOpacityTrait {
	return v.value
}

func (v *NullableHasBlendModeAndOpacityTrait) Set(val *HasBlendModeAndOpacityTrait) {
	v.value = val
	v.isSet = true
}

func (v NullableHasBlendModeAndOpacityTrait) IsSet() bool {
	return v.isSet
}

func (v *NullableHasBlendModeAndOpacityTrait) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHasBlendModeAndOpacityTrait(val *HasBlendModeAndOpacityTrait) *NullableHasBlendModeAndOpacityTrait {
	return &NullableHasBlendModeAndOpacityTrait{value: val, isSet: true}
}

func (v NullableHasBlendModeAndOpacityTrait) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHasBlendModeAndOpacityTrait) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


